<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imcenyi.github.io</id>
    <title>CenYi</title>
    <link href="https://imcenyi.github.io" />
    <updated>2023-06-22T17:44:40.294Z</updated>
    <category term="C++" />
    <category term="语言学习" />
    <category term="笔记" />
    <category term="感悟" />
    <category term="成长" />
    <category term="C#" />
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%86%E5%B0%8F%E6%93%8D%E4%BD%9C/win11%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%86%E5%B0%8F%E6%93%8D%E4%BD%9C/win11%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html"/>
        <content type="html">&lt;h1 id=&#34;方法1&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法1&#34;&gt;#&lt;/a&gt; 方法 1&lt;/h1&gt;
&lt;h2 id=&#34;winr-打开命令行工具输入control-system-打开高级系统设置点击环境变量将工具的bin文件的路径加入到环境变量path中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#winr-打开命令行工具输入control-system-打开高级系统设置点击环境变量将工具的bin文件的路径加入到环境变量path中&#34;&gt;#&lt;/a&gt; win+R  打开命令行工具，输入 control system 打开高级系统设置，点击环境变量，将工具的（bin 文件）的路径加入到环境变量 path 中。&lt;/h2&gt;
&lt;h1 id=&#34;方法2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法2&#34;&gt;#&lt;/a&gt; 方法 2&lt;/h1&gt;
&lt;h2 id=&#34;直接通过-设置-系统-高级系统设置-进入到control-system&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直接通过-设置-系统-高级系统设置-进入到control-system&#34;&gt;#&lt;/a&gt; 直接通过 设置 -&amp;gt; 系统 -&amp;gt; 高级系统设置 -&amp;gt; 进入到 control system&lt;/h2&gt;
</content>
        <updated>2023-06-22T17:44:40.294Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.279Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.279Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.271Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.271Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.269Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.261Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.261Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.261Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.256Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.253Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.253Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html"/>
        <content type="html"></content>
        <updated>2023-06-22T17:44:40.253Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/Debug.Log.html</id>
        <title></title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/Debug.Log.html"/>
        <content type="html">&lt;h1 id=&#34;一定要记得log的l大写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一定要记得log的l大写&#34;&gt;#&lt;/a&gt; 一定要记得 Log 的 L 大写！！！！&lt;/h1&gt;
</content>
        <updated>2023-06-22T17:44:40.245Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html</id>
        <title>c#bug-直接通过vscode运行CS文件报错</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142390.png&#34; alt=&#34;Pasted image 20230614104941.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢&#34;&gt;#&lt;/a&gt; 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。&lt;/h2&gt;
&lt;h3 id=&#34;1首先是报错的原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1首先是报错的原因&#34;&gt;#&lt;/a&gt; 1. 首先是报错的原因&lt;/h3&gt;
&lt;p&gt;这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。&lt;/p&gt;
&lt;h2 id=&#34;2那为什么在unity的项目对象中可以直接运行而不会报错&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2那为什么在unity的项目对象中可以直接运行而不会报错&#34;&gt;#&lt;/a&gt; 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错&lt;/h2&gt;
&lt;p&gt;Unity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。&lt;br&gt;
在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。&lt;/p&gt;
&lt;h2 id=&#34;解决方法将scriptcs所在的目录加入到环境变量当中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方法将scriptcs所在的目录加入到环境变量当中&#34;&gt;#&lt;/a&gt; 解决方法，将 scriptcs 所在的目录加入到环境变量当中。&lt;/h2&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html</id>
        <title>c#bug-抽象方法只能在抽象类中定义</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html"/>
        <content type="html">&lt;h2 id=&#34;抽象方法只能在抽象类中定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象方法只能在抽象类中定义&#34;&gt;#&lt;/a&gt; 抽象方法只能在抽象类中定义&lt;/h2&gt;
&lt;p&gt;这个错误提示是因为您在抽象类 &lt;code&gt;Polygon&lt;/code&gt;  中声明了一个抽象方法 &lt;code&gt;Purarea&lt;/code&gt; ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。&lt;/p&gt;
&lt;p&gt;要解决这个问题，您需要为 &lt;code&gt;Purarea&lt;/code&gt;  方法提供方法体，或者将 &lt;code&gt;Polygon&lt;/code&gt;  类声明为抽象类，以便子类可以实现 &lt;code&gt;Purarea&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;以下是一个示例，演示了如何在 &lt;code&gt;Polygon&lt;/code&gt;  类中声明抽象方法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-CS&#34; data-language=&#34;CS&#34;&gt;&lt;code class=&#34;language-CS&#34;&gt;
abstract class Polygon

&amp;#123;

    public abstract void Purarea();

&amp;#125;

class Rectangle : Polygon

&amp;#123;

    public override void Purarea()

    &amp;#123;

        Console.WriteLine(&amp;quot;Calculate the area of a rectangle.&amp;quot;);

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Polygon polygon &amp;#x3D; new Rectangle();

polygon.Purarea(); &amp;#x2F;&amp;#x2F; 输出：Calculate the area of a rectangle.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个抽象类 &lt;code&gt;Polygon&lt;/code&gt;  和一个非抽象子类 &lt;code&gt;Rectangle&lt;/code&gt; ，它们都实现了 &lt;code&gt;Purarea&lt;/code&gt;  方法。在使用示例中，我们创建了一个 &lt;code&gt;Rectangle&lt;/code&gt;  对象，并将其赋值给 &lt;code&gt;Polygon&lt;/code&gt;  类型的变量 &lt;code&gt;polygon&lt;/code&gt; 。然后，我们调用 &lt;code&gt;polygon.Purarea()&lt;/code&gt;  方法，它会调用 &lt;code&gt;Rectangle&lt;/code&gt;  类中的 &lt;code&gt;Purarea&lt;/code&gt;  方法，并输出 &lt;code&gt;Calculate the area of a rectangle.&lt;/code&gt; 。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html</id>
        <title>c#/条件语句（线性）</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html"/>
        <content type="html">&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;    void Func1()

    &amp;#123;

        int value1&amp;#x3D;15;

        if(value1&amp;gt;5)

        &amp;#123;

            Debug.Log(&amp;quot;value1 is greater than 5&amp;quot;);&amp;#x2F;&amp;#x2F;value1满足了第一个条件就执行了，输出语句

        &amp;#125;

        else if(value1&amp;gt;10)

        &amp;#123;

            Debug.Log(&amp;quot;value1 is greater than 10&amp;quot;);&amp;#x2F;&amp;#x2F;由于第一个已经执行了，就终端这一串条件语句，所以虽然满足条件但没有执行

        &amp;#125;

        else

        &amp;#123;

            Debug.Log(&amp;quot;value1 is less than 5&amp;quot;);

        &amp;#125;

    &amp;#125;

&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;条件检测是线性的只要满足前面的就不会执行后面的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件检测是线性的只要满足前面的就不会执行后面的&#34;&gt;#&lt;/a&gt; 条件检测是线性的，只要满足前面的就不会执行后面的&lt;/h1&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html</id>
        <title>c#/枚举类的访问等级规则</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html"/>
        <content type="html">&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt; enum emAction
&amp;#123;
    GetUp,
    Wash,
    Eat,
    Work,
&amp;#125;

public emAction Action;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这串代码出现了一个错误，即 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符与 &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符不匹配。具体来说， &lt;code&gt;emAction&lt;/code&gt;  枚举类型是默认的（即没有访问修饰符），而 &lt;code&gt;Action&lt;/code&gt;  字段是公共的（ &lt;code&gt;public&lt;/code&gt; ）。&lt;/p&gt;
&lt;h3 id=&#34;这违反了c的访问性限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这违反了c的访问性限制&#34;&gt;#&lt;/a&gt; 这违反了 C# 的访问性限制&lt;/h3&gt;
&lt;p&gt;因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符更改为公共的（ &lt;code&gt;public&lt;/code&gt; ）或将 &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符更改为默认 (private 级别) 的（即删除 &lt;code&gt;public&lt;/code&gt;  关键字）。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;enum emAction&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 &lt;code&gt;private&lt;/code&gt;  访问等级，是最低一级。&lt;br&gt;
&lt;mark&gt;关于访问等级先后详细看 [[访问等级]]&lt;/mark&gt;&lt;br&gt;
 如果 &lt;code&gt;Action&lt;/code&gt;  字段是 &lt;code&gt;public&lt;/code&gt; ，则将 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的可访问性设置为 &lt;code&gt;private&lt;/code&gt;  是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。&lt;/p&gt;
&lt;h3 id=&#34;那为什么c要有这个访问性限制呢-其实也不难理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#那为什么c要有这个访问性限制呢-其实也不难理解&#34;&gt;#&lt;/a&gt; 那为什么 C# 要有这个访问性限制呢。其实也不难理解&lt;/h3&gt;
&lt;p&gt;C# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。&lt;/p&gt;
&lt;p&gt;例如，在这个示例中， &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符是 &lt;code&gt;public&lt;/code&gt; ，而 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符是默认的（即 &lt;code&gt;private&lt;/code&gt; ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的可访问性低于 &lt;code&gt;mAction&lt;/code&gt;  字段的可访问性。&lt;/p&gt;
&lt;p&gt;说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html</id>
        <title>c#/访问等级</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html"/>
        <content type="html">&lt;h2 id=&#34;访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是&#34;&gt;#&lt;/a&gt; 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; ：公共的，可以被任何代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected internal&lt;/code&gt; ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;internal&lt;/code&gt; ：内部的，可以被同一程序集中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; ：私有的，只能被同一类中的代码访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 &lt;code&gt;private&lt;/code&gt;  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 &lt;code&gt;public&lt;/code&gt;  可以使其他代码更容易地使用它们，从而提高代码的可维护性。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html</id>
        <title>c#/public变量的赋值</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html"/>
        <content type="html">&lt;p&gt;如果在 Unity 引擎中的对象中挂在的脚本里。&lt;br&gt;
有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。&lt;br&gt;
这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;    public enum emAction

    &amp;#123;

        None&amp;#x3D;0,

        GetUp,&amp;#x2F;&amp;#x2F;1

        Wash,&amp;#x2F;&amp;#x2F;2

        Eat,&amp;#x2F;&amp;#x2F;3

        Work,&amp;#x2F;&amp;#x2F;4

    &amp;#125;

    public emAction mAction &amp;#x3D; emAction.Work;
    Debug.Log((int)mAction);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们对 &lt;code&gt;mAction&lt;/code&gt;  的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139957.png&#34; alt=&#34;Pasted image 20230616154518.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我们在脚本的选项中，选择了 mAction 的&lt;mark&gt;初值&lt;/mark&gt;，那么这个值将覆盖脚本代码中的&lt;mark&gt;初始值&lt;/mark&gt;（注意，只是初始值）。&lt;/p&gt;
&lt;p&gt;上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 &lt;code&gt;mAction&lt;/code&gt;  所附的 Work。所以打印出来的还是 None 的 0。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</id>
        <title>c#/this 和 base 的区别</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
        <content type="html">&lt;h2 id=&#34;this和base都是c中的关键字它们的主要区别在于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this和base都是c中的关键字它们的主要区别在于&#34;&gt;#&lt;/a&gt;  &lt;code&gt;this&lt;/code&gt;  和 &lt;code&gt;base&lt;/code&gt;  都是 C# 中的关键字，它们的主要区别在于：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 &lt;code&gt;this&lt;/code&gt;  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt;  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 &lt;code&gt;base&lt;/code&gt;  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是一个示例，演示了如何使用 &lt;code&gt;this&lt;/code&gt;  和 &lt;code&gt;base&lt;/code&gt;  关键字：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;class Person

&amp;#123;

    public string Name &amp;#123; get; set; &amp;#125;

    public int Age &amp;#123; get; set; &amp;#125;

    public Person(string name, int age)

    &amp;#123;

        this.Name &amp;#x3D; name;

        this.Age &amp;#x3D; age;

    &amp;#125;

&amp;#125;

class Student : Person

&amp;#123;

    public string School &amp;#123; get; set; &amp;#125;

    public Student(string name, int age, string school) : base(name, age)

    &amp;#123;

        this.School &amp;#x3D; school;

    &amp;#125;

    public void Study()

    &amp;#123;

        Console.WriteLine(&amp;quot;&amp;#123;0&amp;#125; is studying at &amp;#123;1&amp;#125;.&amp;quot;, this.Name, this.School);

    &amp;#125;

    public void ShowInfo()

    &amp;#123;

        Console.WriteLine(&amp;quot;Name: &amp;#123;0&amp;#125;, Age: &amp;#123;1&amp;#125;, School: &amp;#123;2&amp;#125;&amp;quot;, this.Name, this.Age, this.School);

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Student student &amp;#x3D; new Student(&amp;quot;Tom&amp;quot;, 18, &amp;quot;ABC School&amp;quot;);

student.Study(); &amp;#x2F;&amp;#x2F; 输出：Tom is studying at ABC School.

student.ShowInfo(); &amp;#x2F;&amp;#x2F; 输出：Name: Tom, Age: 18, School: ABC School&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个 &lt;code&gt;Person&lt;/code&gt;  类和一个 &lt;code&gt;Student&lt;/code&gt;  类， &lt;code&gt;Student&lt;/code&gt;  类继承自 &lt;code&gt;Person&lt;/code&gt;  类。在 &lt;code&gt;Person&lt;/code&gt;  类中，我们定义了一个构造函数，使用 &lt;code&gt;this&lt;/code&gt;  关键字来引用当前对象的成员变量。在 &lt;code&gt;Student&lt;/code&gt;  类中，我们定义了一个构造函数，使用 &lt;code&gt;base&lt;/code&gt;  关键字来调用基类的构造函数。在 &lt;code&gt;Student&lt;/code&gt;  类中，我们还定义了两个方法 &lt;code&gt;Study&lt;/code&gt;  和 &lt;code&gt;ShowInfo&lt;/code&gt; ，分别使用 &lt;code&gt;this&lt;/code&gt;  关键字和 &lt;code&gt;base&lt;/code&gt;  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 &lt;code&gt;Student&lt;/code&gt;  对象，并调用了它的 &lt;code&gt;Study&lt;/code&gt;  和 &lt;code&gt;ShowInfo&lt;/code&gt;  方法，输出了相应的信息。&lt;/p&gt;
&lt;p&gt;总的来说， &lt;code&gt;this&lt;/code&gt;  关键字用于引用当前对象， &lt;code&gt;base&lt;/code&gt;  关键字用于引用基类对象。它们的应用场景不同， &lt;code&gt;this&lt;/code&gt;  关键字通常用于访问当前对象的成员， &lt;code&gt;base&lt;/code&gt;  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html</id>
        <title>c#/封装</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html"/>
        <content type="html">&lt;h2 id=&#34;封装的主要目的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装的主要目的&#34;&gt;#&lt;/a&gt; 封装的主要目的&lt;/h2&gt;
&lt;p&gt;封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。&lt;/p&gt;
&lt;p&gt;封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。&lt;/p&gt;
&lt;p&gt;在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html</id>
        <title>c#/抽象方法（abstruct）和虚方法(virtual)的区别</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
        <content type="html">&lt;p&gt;&lt;mark&gt;实际上虚函数就类似于初省值&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&#34;抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现&#34;&gt;#&lt;/a&gt; &lt;mark&gt;抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。&lt;/li&gt;
&lt;li&gt;抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。&lt;/li&gt;
&lt;li&gt;抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;abstract class Shape

&amp;#123;

    public abstract double GetArea();&amp;#x2F;&amp;#x2F;这里的方法体必须是空

&amp;#125;

class Rectangle : Shape

&amp;#123;

    public double Width &amp;#123; get; set; &amp;#125;

    public double Height &amp;#123; get; set; &amp;#125;

    public override double GetArea()&amp;#x2F;&amp;#x2F;子类写入方法体实现

    &amp;#123;

        return Width * Height;

    &amp;#125;

&amp;#125;
class Circle : Shape

&amp;#123;

    public double Radius &amp;#123; get; set; &amp;#125;

    public override double GetArea(）

    &amp;#123;

        return Math.PI * Radius * Radius;

    &amp;#125;

&amp;#125;

class Square : Shape

&amp;#123;

    public double Side &amp;#123; get; set; &amp;#125;

    public override double GetArea()

    &amp;#123;

        return Side * Side;

    &amp;#125;

&amp;#125;

class Triangle : Shape

&amp;#123;

    public double Base &amp;#123; get; set; &amp;#125;

    public double Height &amp;#123; get; set; &amp;#125;

    public override double GetArea()

    &amp;#123;

        return 0.5 * Base * Height;

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Shape shape1 &amp;#x3D; new Rectangle &amp;#123; Width &amp;#x3D; 10, Height &amp;#x3D; 20 &amp;#125;;

Shape shape2 &amp;#x3D; new Circle &amp;#123; Radius &amp;#x3D; 5 &amp;#125;;

Shape shape3 &amp;#x3D; new Square &amp;#123; Side &amp;#x3D; 10 &amp;#125;;

Shape shape4 &amp;#x3D; new Triangle &amp;#123; Base &amp;#x3D; 10, Height &amp;#x3D; 5 &amp;#125;;

Console.WriteLine(shape1.GetArea()); &amp;#x2F;&amp;#x2F; 输出：200

Console.WriteLine(shape2.GetArea()); &amp;#x2F;&amp;#x2F; 输出：78.53981633974483

Console.WriteLine(shape3.GetArea()); &amp;#x2F;&amp;#x2F; 输出：100

Console.WriteLine(shape4.GetArea()); &amp;#x2F;&amp;#x2F; 输出：25&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个抽象类 &lt;code&gt;Shape&lt;/code&gt;  和四个子类 &lt;code&gt;Rectangle&lt;/code&gt; 、 &lt;code&gt;Circle&lt;/code&gt; 、 &lt;code&gt;Square&lt;/code&gt;  和 &lt;code&gt;Triangle&lt;/code&gt; ，它们都重写了 &lt;code&gt;GetArea&lt;/code&gt;  方法。 &lt;code&gt;GetArea&lt;/code&gt;  方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 &lt;code&gt;GetArea&lt;/code&gt;  方法，输出了它们的面积。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;abstract&lt;/code&gt;  和 &lt;code&gt;virtual&lt;/code&gt;  都是 C# 中用于实现多态的关键字，它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  用于声明抽象方法，它必须在派生类中进行实现，而 &lt;code&gt;virtual&lt;/code&gt;  用于声明虚方法，它可以在派生类中进行重写，但不是必须的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  方法没有实现，只有方法签名，而 &lt;code&gt;virtual&lt;/code&gt;  方法有默认的实现，可以在基类中提供。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  方法只能在抽象类中声明，而 &lt;code&gt;virtual&lt;/code&gt;  方法可以在普通的类中声明。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html</id>
        <title>c#/抽象类</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html"/>
        <content type="html">&lt;p&gt;/*  抽象类&lt;/p&gt;
&lt;p&gt;1. 抽象类不可以被实例化&lt;/p&gt;
&lt;p&gt;2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体&lt;/p&gt;
&lt;p&gt;3. 抽象类的子类必须实现抽象类中的所有抽象函数&lt;/p&gt;
&lt;p&gt;4. 抽象类中可以有非抽象函数&lt;/p&gt;
&lt;p&gt;5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数&lt;/p&gt;
&lt;p&gt;6. 非抽象类可以继承抽象类，但是子类必须实现所有抽象函数&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;h2 id=&#34;密封类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密封类&#34;&gt;#&lt;/a&gt; 密封类&lt;/h2&gt;
&lt;p&gt;1. 密封类不可以被继承（他只能是子类）&lt;/p&gt;
&lt;p&gt;2. 密封类不能是抽象的。sealed 和 abstract 是互斥的&lt;/p&gt;
&lt;p&gt;（其实很好理解，密封类不能作为基类，只能是子类&lt;/p&gt;
&lt;p&gt;而抽象类虽然可以既是基类又是子类，但是其中的抽&lt;/p&gt;
&lt;p&gt;象函数是不能在抽象类中写方法体的，必须要在子类&lt;/p&gt;
&lt;p&gt;中实现，这就和密封类的定义【不可被继承，不能有子类】相违背了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142194.png&#34; alt=&#34;Pasted image 20230621161128.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;上述报错表明了抽象类和封闭类是互斥的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上述报错表明了抽象类和封闭类是互斥的&#34;&gt;#&lt;/a&gt; 上述报错，表明了抽象类和封闭类是互斥的&lt;/h3&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html</id>
        <title>c#/抽象函数</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141139.png&#34; alt=&#34;Pasted image 20230621154048.png&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141676.png&#34; alt=&#34;Pasted image 20230621154506.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;抽象类不可被实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象类不可被实例化&#34;&gt;#&lt;/a&gt; 抽象类不可被实例化&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141139.png&#34; alt=&#34;Pasted image 20230621154709.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;抽象类之中的抽象函数必须在子类写好实现的方法体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象类之中的抽象函数必须在子类写好实现的方法体&#34;&gt;#&lt;/a&gt; 抽象类之中的抽象函数必须在&lt;mark&gt;子类写好实现的方法体&lt;/mark&gt;&lt;/h2&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html</id>
        <title>c#/静态类</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html"/>
        <content type="html">&lt;p&gt;静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139796.png&#34; alt=&#34;Pasted image 20230620180951.png&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230140156.png&#34; alt=&#34;Pasted image 20230620181011.png&#34;&gt;&lt;br&gt;
 上面是错误示范&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141887.png&#34; alt=&#34;Pasted image 20230620181325.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;应该使用 MyClass3 这个类名而不是 myClass3 这个实例&lt;/p&gt;
</content>
        <category term="语言学习" />
        <category term="笔记" />
        <category term="C#" />
        <updated>2023-06-22T16:39:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/SHUFLY%E4%BA%A4%E6%B5%81%E4%BC%9A%E6%9C%89%E6%84%9F.html</id>
        <title>“SHUFLY交流会有感“</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/SHUFLY%E4%BA%A4%E6%B5%81%E4%BC%9A%E6%9C%89%E6%84%9F.html"/>
        <content type="html">&lt;p&gt;首先真的十分感谢在交流会上分享经验的学长学姐们，真的收获很多。特别是对于我这种信息面不是很广的大一新生来说，像是打开了新世界的大门。接下来我将通过三个方面来简述一下我的收获和反省&lt;/p&gt;
&lt;h2 id=&#34;1个人选择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1个人选择&#34;&gt;#&lt;/a&gt; 1. 个人选择&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先个人选择这一方面，一定是从自身出发，一位数学系的学长说的很好 ==“别人的经验，别人的经历，终究是别人的，而不是自己的，它并没有办法真正左右你的方向，做出选择的永远是自己。”==&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这对于我来说启发真的很大。近期在周围的压力下和摸索自我的过程中，我仿佛陷入一个泥沼，困与自身的矛盾和焦虑之中，也就是我们常说的&lt;em&gt;&lt;strong&gt;精神内耗&lt;/strong&gt;&lt;/em&gt;。对于自我的渴求，和认知的不足，让我的精神深受折磨。于是我便通过网络，或者和一些牛人朋友的交谈，尝试找寻一条适合自己的道路，或者说是想要去模仿，想要去走一条他们走过的路，说白了还是思想上的偷懒。导致了我一直没有走出这个怪圈，而那位学长的话一下子就点醒了我，从一开始我的方向就错了，我只想着最好能找到一条照着走就完事的路。但我忽视了个体之间的差异，别人终究不是我。付出自己的时间成本去不断试错，只有自我承担着这种风险，才能得到真正的成长，走出的才会是真正适合自己的道路。而这也是我作为一个攀爬者成就自我的必由之路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2方向选择深造or就业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2方向选择深造or就业&#34;&gt;#&lt;/a&gt; 2. 方向选择（深造 or 就业）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我对于这一方面了解的也不是特别多，但能尽可能地早做选择总是没错的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;针对我个人而言&lt;/mark&gt;，我是一个很讨厌按照规矩办事的一个人，准确的说，我很讨厌那种无效和重复的付出。在我行动之前，我一定要先明确，我的目的，以及我如何完成目的，是否有更好的途径来达成我的目的。这就导致了，我不太愿意随大流，走一条相对&lt;em&gt;&lt;strong&gt;稳妥&lt;/strong&gt;&lt;/em&gt;的道路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;深造or就业&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深造or就业&#34;&gt;#&lt;/a&gt; &lt;em&gt;&lt;strong&gt;深造 or 就业&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我目前是偏向于毕业直接投入就业一点（当然随着认知和想法的变化或许会发生改变），或许在大二大三就会开始尝试找实习和项目。至于我为什么不选择去深造读研读博这条路呢，明明大家都在朝这个方向发展，整个大环境给我的感觉就是，不读研就很难有出路。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;我为自己归纳了以下几个原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我为自己归纳了以下几个原因&#34;&gt;#&lt;/a&gt; 我为自己归纳了以下几个原因&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;我对于科研事业并不抱有太大的热忱&lt;/strong&gt;&lt;/em&gt;：&lt;br&gt;
这也是我认为最主要的原因，我认为一个人的主观能动性是非常重要的，一个人要是被强迫去做一个完全不感兴趣的东西，那效率毫无疑问的低的。而且我前面也提到了，我是一个不愿意随大流的人，我不会因为环境的 push，而将过多的心理花在一个不感兴趣的事情上。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;不明白科研的方向&lt;/strong&gt;&lt;/em&gt;：&lt;br&gt;
如果我想去搞研究，我起码要知道自己想研究什么方向吧，总不可能像一只无头苍蝇一样乱飞。当然这也可能是因为我目前还未分流，对于专业认知还不是很清晰导致的。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;科研环境&lt;/strong&gt;&lt;/em&gt;：&lt;br&gt;
目前国内的科研环境一言难尽，而对于出国又碍于自己的外语能力。（在背了在背了）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3为我坚定了短期方向种数媒雾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3为我坚定了短期方向种数媒雾&#34;&gt;#&lt;/a&gt; 3. 为我坚定了短期方向（种‘数媒’（雾））&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这个最后一点，也是我认为收获最大的一点。在交流会的最后私下提问交流的环境，我有幸认识到了 20 级数媒在读的卢学长，通过和学长的交流，我对于数字媒体技术这个专业有了更加清晰的认知，同样也更加坚定了自己的短期道路 —— 进入数字媒体技术专业。至于为什么会选择这个方向呢。首先我个人是理工科出身，同样对于艺术表达这方面也十分感兴趣（当然可能莫得艺术细胞？）。理工科的出身让我对于计算机方面也十分感兴趣，但是从小开始自己就有这过剩的表达欲，我想把自己所想自己的体会让别人知道，而艺术就是一个很好地载体，在高考备考期间，自己甚至抽出来时间学了学 pr（可能上海确实是毕竟闲），剪映等剪辑软件自己尝试着做做自媒体。虽然说没有多少的流量，并没有让更多人看到，但是在这个过程中，我能真正感受到快乐，那种满足。所以这也是我难以割舍的。那怎么办呢。结论就是 ——==“小孩子才做选择，我全都要”== 这也让我盯上了数字媒体技术，它可以同时满足我对计算机和艺术表达的诉求。当然学校的硬件也很足啊。（三套完备的光学动捕啊。斯哈&lt;sub&gt;斯哈&lt;/sub&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一切都还是刚开始一切都是未知数期待自己接下来的成长&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一切都还是刚开始一切都是未知数期待自己接下来的成长&#34;&gt;#&lt;/a&gt; 一切都还是刚开始，一切都是未知数，期待自己接下来的成长&lt;/h2&gt;
</content>
        <category term="感悟" />
        <category term="成长" />
        <updated>2023-04-17T15:39:47.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E2%80%9C.html</id>
        <title>构造函数“</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E2%80%9C.html"/>
        <content type="html"></content>
        <updated>2023-04-08T08:19:59.000Z</updated>
    </entry>
    <entry>
        <id>https://imcenyi.github.io/post/1%20%E5%BC%95%E7%94%A8.html</id>
        <title>c++/引用</title>
        <link rel="alternate" href="https://imcenyi.github.io/post/1%20%E5%BC%95%E7%94%A8.html"/>
        <content type="html">&lt;p&gt;1. 引用&lt;/p&gt;
&lt;h2 id=&#34;引用的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用的概念&#34;&gt;#&lt;/a&gt; 引用的概念&lt;/h2&gt;
&lt;p&gt;某个变量的引用，&lt;mark&gt;等价于&lt;/mark&gt;这个变量，相当于这个变量的&lt;mark&gt;别名&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;引用 (&amp;amp;) 语法如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于 n 的运算，r 同样也会做相同的运算。&lt;br&gt;
反过来，对于 r 的运算，同样也会作用到 n 上。&lt;/p&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;r&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
r&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//这一步运算也作用到了n上&lt;/span&gt;
cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
n&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//这一步运算也作用到了r上&lt;/span&gt;
cout&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后 r=n=5，可见引用运算同步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081852656.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，引用是从一而终的，不可以引用其他变量&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;引用只能引用&lt;mark&gt;变量&lt;/mark&gt;，不能引用&lt;s&gt;常量和表达式&lt;/s&gt;&lt;/strong&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081852848.png&#34; alt=&#34;image.png&#34;&gt;&lt;br&gt;
&lt;strong&gt; 这里 r1=b 这一句，并不是让 r1 引用 b，而是给 r1 赋了 b 的值&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;引用的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用的作用&#34;&gt;#&lt;/a&gt; 引用的作用&lt;/h2&gt;
&lt;p&gt;写一个交换整型变量的值。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081852854.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际上 n1，n2，并不会改变。&lt;/p&gt;
&lt;p&gt;但是引用可以很好解决这个问题。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081852954.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里由与附给形参的类型是引用，所以 a，b 与 n1，n2 等价。&lt;br&gt;
在子函数里 ab 所做的运算，n1n2 同样也会执行，所以 n1n2 会改变。&lt;/p&gt;
&lt;p&gt;返回值是个引用，则可以对于返回值进行赋值。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081853831.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;常引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常引用&#34;&gt;#&lt;/a&gt; 常引用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081853189.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，不可以通过常引用来改变引用的内容（可以用其他方式）。&lt;/strong&gt;!&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304081854020.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="语言学习" />
        <category term="笔记" />
        <updated>2023-03-31T16:39:59.000Z</updated>
    </entry>
</feed>
