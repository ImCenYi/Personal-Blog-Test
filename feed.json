{
    "version": "https://jsonfeed.org/version/1",
    "title": "CenYi",
    "description": "",
    "home_page_url": "https://imcenyi.github.io",
    "items": [
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/(%E9%9D%A2%E5%90%91AI%E5%AD%A6%E4%B9%A0%EF%BC%89%E9%9B%B6%E6%95%A3%E6%A6%82%E5%BF%B5%EF%BC%88%E5%A4%A7%E5%A4%9A%E4%B8%BA%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C&%E5%9B%9E%E8%B0%83.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/(%E9%9D%A2%E5%90%91AI%E5%AD%A6%E4%B9%A0%EF%BC%89%E9%9B%B6%E6%95%A3%E6%A6%82%E5%BF%B5%EF%BC%88%E5%A4%A7%E5%A4%9A%E4%B8%BA%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C&%E5%9B%9E%E8%B0%83.html",
            "title": "零散概念",
            "date_published": "2023-10-20T15:59:59.000Z",
            "content_html": "<h3 id=\"异步操作asynchronous-operation\"><a class=\"markdownIt-Anchor\" href=\"#异步操作asynchronous-operation\">#</a> 异步操作（Asynchronous Operation）</h3>\n<p>想象一下，你去咖啡店点了一杯咖啡。如果这是一个<strong>同步</strong>操作，你会站在那里等待咖啡做好，期间你不能做其他事情，直到咖啡递到你手中。但如果是一个<strong>异步</strong>操作，你点完咖啡后可以找个地方坐下、看书或玩手机，等咖啡做好了，店员会叫你。这样，你不用一直等待，可以利用这段时间做其他事情。</p>\n<p>在计算机编程中，异步操作的概念类似。程序在请求某个需要时间的操作（如读取文件、下载数据或加载场景）时，不会停下来等待操作完成，而是继续执行其他任务。当那个操作完成时，它会得到通知。</p>\n<h3 id=\"回调callback\"><a class=\"markdownIt-Anchor\" href=\"#回调callback\">#</a> 回调（Callback）</h3>\n<p>还是上面的咖啡店例子，当你的咖啡做好了，店员会叫你。这个 “叫你” 的动作，就是一个<strong>回调</strong>。它是咖啡店告诉你：“嘿，你的咖啡好了！”</p>\n<p>在编程中，回调是一个函数或方法，它会在某个任务完成后被自动调用。当你启动一个异步操作时，你可以提供一个回调函数，这样当操作完成（或出现错误）时，这个函数就会被执行。</p>\n<p>例如，你可能会告诉程序：“去加载这个场景，加载完成后，请执行这个回调函数来告诉我。” 当场景加载完成，你的回调函数就会被自动调用，你可以在其中执行一些后续操作，如显示一个 “加载完成” 的提示。</p>\n<p>总结一下：</p>\n<ul>\n<li><strong>异步操作</strong>就像是你在等待咖啡时可以做其他事情，而不是站在那里等。</li>\n<li><strong>回调</strong>就像是咖啡做好后店员叫你的动作，告诉你任务已经完成了。</li>\n</ul>\n<blockquote>\n<p>回调函数（Callback Function）是一种在某个操作（通常是异步操作）完成后被自动执行的函数。它的主要目的是允许程序知道某个任务已经完成，并允许程序在任务完成后执行特定的操作或处理。<br>\n在异步编程中，由于我们不知道操作何时完成，回调函数提供了一种机制来响应这些完成的操作。当异步操作完成时，回调函数被调用，通常带有操作的结果或任何相关的错误信息。</p>\n</blockquote>\n<p>例如，当你从网络下载一个文件时，你可能会提供一个回调函数来处理下载完成后的操作，如保存文件、更新用户界面或处理任何下载过程中的错误。</p>\n<p>简而言之，回调函数就像是一个 “<em>通知</em>” 或 “<em>警报</em>”，告诉程序：“嘿，你之前启动的那个操作已经完成了，现在你可以做一些后续的事情了！”</p>\n<h2 id=\"协程\"><a class=\"markdownIt-Anchor\" href=\"#协程\">#</a> <strong>协程</strong></h2>\n<h3 id=\"协程coroutine\"><a class=\"markdownIt-Anchor\" href=\"#协程coroutine\">#</a> 协程（Coroutine）</h3>\n<p>协程是一种编程构造，它扩展了常规的子程序（或函数）的概念。与子程序不同，协程允许多个入口点和暂停及后续恢复执行的能力。</p>\n<p>协程的关键特点是它可以在任何给定的点暂停执行（通常称为 “挂起”），并在稍后的某个时刻从暂停的地方恢复执行。这使得协程非常适合用于异步编程，因为它们可以在等待某些资源（如 I/O 操作、网络请求等）时挂起，而不会阻塞整个程序或线程。</p>\n<h3 id=\"协程与异步\"><a class=\"markdownIt-Anchor\" href=\"#协程与异步\">#</a> 协程与异步</h3>\n<p>协程本身不是异步的，但它们经常被用于异步编程。协程提供了一种更直观、更简洁的方式来处理异步操作，特别是在需要多个异步步骤的情况下。</p>\n<p>例如，在 Python 中， <code>asyncio</code>  库使用 <code>async</code>  和 <code>await</code>  关键字提供了协程支持，使得异步编程变得更加简单和直观。</p>\n<h3 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\">#</a> 结论</h3>\n<p>协程本身不等同于异步，但它们为异步编程提供了强大的工具。通过使用协程，开发者可以更容易地编写异步代码，而不必深入了解回调、Promise 或其他复杂的异步模式。</p>\n<h2 id=\"协程多线程\"><a class=\"markdownIt-Anchor\" href=\"#协程多线程\">#</a> <strong>协程 &amp; 多线程</strong></h2>\n<h3 id=\"协程coroutine-2\"><a class=\"markdownIt-Anchor\" href=\"#协程coroutine-2\">#</a> 协程（Coroutine）</h3>\n<ol>\n<li><strong>轻量级</strong>：协程是程序中的构造，不依赖于操作系统的线程。因此，创建和切换协程的开销通常比线程小得多。</li>\n<li><strong>协作式多任务</strong>：协程是协作式的，意味着在任何给定时间只有一个协程在执行。一个协程必须显式地让出控制权，以便其他协程可以运行。</li>\n<li><strong>没有并行性</strong>：由于协程是在单个线程上运行的，它们不会真正并行执行。但它们可以用于异步操作，如 I/O 操作，而不会阻塞主线程。</li>\n<li><strong>控制流</strong>：协程可以保存其执行状态（例如局部变量的值），这意味着它们可以在稍后的某个时刻从暂停的地方恢复执行。</li>\n</ol>\n<h3 id=\"多线程multithreading\"><a class=\"markdownIt-Anchor\" href=\"#多线程multithreading\">#</a> 多线程（Multithreading）</h3>\n<ol>\n<li><strong>重量级</strong>：线程是操作系统级别的实体，因此创建、同步和切换线程的开销通常比协程大。</li>\n<li><strong>抢占式多任务</strong>：线程是抢占式的，这意味着操作系统可以在任何时候中断一个线程并开始执行另一个线程。</li>\n<li><strong>真正的并行性</strong>：在多核处理器上，多个线程可以真正并行执行。</li>\n<li><strong>同步问题</strong>：由于线程可以并行执行，它们可能会访问和修改共享资源，这可能导致竞态条件和其他同步问题。因此，线程间的同步和通信通常比协程更复杂。</li>\n</ol>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li><strong>协程</strong>是轻量级的、协作式的并发构造，适合于 I/O 密集型任务和需要高效上下文切换的场景。</li>\n<li><strong>多线程</strong>是重量级的、抢占式的并发构造，适合于 CPU 密集型任务和需要真正并行执行的场景。</li>\n</ul>\n",
            "tags": [
                "study",
                "AI"
            ]
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E7%A4%BE%E6%8B%9B.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E7%A4%BE%E6%8B%9B.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.474Z",
            "content_html": "<p>职位描述</p>\n<p>职位描述 1. 了解项目愿景，与游戏策划、美术、程序员和 QA 合作，设计和完善游戏开发工具，提升团队生产效率。 2. 理解游戏开发美术、程序、策划各职能的工作流程，发掘流程痛点，提供解决方案并执行解决方案。 3. 协助团队建立标准化的生产流程，起草与更新生产管线流程规范。 4. 负责相关文档的编写，为开发团队提供指导和培训。 5. 探索新的领域和机会，并能够在生产管线流程中落地。</p>\n<p>职位要求</p>\n<ol>\n<li>5 年以上游戏设计或开发经验； 2. 了解游戏开发流程，有中重度项目的开发经验者优先； 3. 熟练掌握游戏引擎及编辑器的使用； 4. 积极主动地指导设计相关工作； 5. 善于内部沟通、团队合作和知识分享。</li>\n</ol>\n<p>职位描述</p>\n<p>作为一名资深技术策划，你将在 3A 单机项目中担任技术和设计之间的桥梁，保证所在小组的设计意图能以符合项目进度需要的方式被制作到游戏里，并以 3A 标准向前迭代并最终交付。 工作内容： - 为团队中的游戏策划提供技术指导和支持，保证策划可以快速制作玩法原型验证设计意图 - 调研分析市场头部产品的技术解决方案，与团队合作制定玩法模块的生产管线，包括不限于技术方案、相关工具链、生产规范等 - 给团队中的游戏策划进行生产规范培训，并保证其产出数据符合规范 - 建立管线监控、反馈、改进机制，持续监控生产管线的运行，保证产出内容符合项目计划与需求</p>\n<p>职位要求</p>\n<p>- 热爱 3A 游戏，对 3A 级别游戏有充分深入的了解，尤其是大型 3A 产品<br>\n - 对游戏研发充满热情，长期深度钻研业界顶尖品质开发技术<br>\n - 有充分的 3A 游戏开发经验<br>\n 1）至少 1 款大型 3A 游戏的技术策划经验<br>\n 2）5 年以上游戏行业从业经验，或 2 款及以上上线或发售游戏参与<br>\n - 熟悉 3A 游戏引擎（公开引擎或自研）使用和迭代<br>\n 1）至少 2 年 UE 引擎使用经验<br>\n 2）拥有 UE 引擎 2A 或以上项目研发经验优先<br>\n - 拥有模块技术负责人经验优先<br>\n - 拥有英语沟通能力优先</p>\n<p>职位描述</p>\n<p>1、与程序、策划协作，持续提出和完善编辑器、游戏脚本、AI 行为树等相关功能；<br>\n2、制定和执行数据表、游戏脚本、AI 行为树相关规范，为其他策划提供技术支持；<br>\n3、协助其他策划与其他职能沟通和制定设计需求的技术解决方案；<br>\n4、具备一定的关卡设计和系统设计能力，能独立完成关卡原型、游戏系统的设计；</p>\n<p>职位要求</p>\n<p>1、完整参与过 1 款手机或主机游戏的开发；<br>\n2、在技术策划、关卡策划或系统策划方面有 2 年以上工作经验；<br>\n3、有良好的编程能力，熟悉 Python、Lua、C# 等任一编程语言；<br>\n4、熟悉流行商业游戏开发引擎，如 Unity，Unreal 4 等；<br>\n5、游戏经历丰富，喜欢 FPS、TPS 品类者优先，有 MOD 制作经验者优先。</p>\n<p>职位描述</p>\n<p>1、针对提升游戏表现力的前沿技术进行攻坚，包括但不仅限于：剧情、关卡、AI、角色、运动、镜头、打击感等；<br>\n2、以开发高品质游戏为目的，打造高效率、高质量的游戏生产线，设计开发相应的生产工具以及开发流程；<br>\n3、指导策划、程序、美术、动画、音频等部门具体实施游戏所需功能和整合数据，从全局的角度把控游戏开发的整体流程；<br>\n4、为游戏策划以及其他相关部门提供技术支持，包括编写技术文档，提供指导和培训。</p>\n<p>职位要求</p>\n<p>1、有丰富的游戏项目经验，熟悉游戏策划的工作方式和游戏开发的各个环节； 2、有较强的逻辑思维能力，具备软件工程学基本知识和一定的代码能力，熟悉 C# 语言，具有丰富的商业引擎的使用经验（Unity/Unreal）；<br>\n3、具备优秀的学习能力和独立解决问题的能力；良好的沟通能力、团队协作能力。 加分项<br>\n 1、具备完整的大型项目开发经验和上市产品；<br>\n2、有丰富的关卡策划，系统策划和数值策划相关的开发经验。</p>\n<p>职位描述</p>\n<p>1、维护游戏内主要内容管线，构建易用、直观、高效的工具链条解决内容产出的质量和效率问题，推进制作工具不断迭代优化。<br>\n2、针对新的制作内容，根据设计师思路构建设计和技术方案，推动实现落地，并为后续开发建立设计和技术标准 。<br>\n3、关注策划日常的工作流程，承担与开发人员的沟通桥梁，对于出现的跨职能问题主动推进解决。<br>\n4、关心最新的游戏制作技术，促进公司公用工具和技术在本项目内的应用，组织新工具和技术内容的推广和教学 。</p>\n<p>职位要求</p>\n<p>1、维护游戏内主要内容管线，构建易用、直观、高效的工具链条解决内容产出的质量和效率问题，推进制作工具不断迭代优化。<br>\n2、针对新的制作内容，根据设计师思路构建设计和技术方案，推动实现落地，并为后续开发建立设计和技术标准。<br>\n3、关注策划日常的工作流程，承担与开发人员的沟通桥梁，对于出现的跨职能问题主动推进解决。<br>\n4、关心最新的游戏制作技术，促进公司公用工具和技术在本项目内的应用，组织新工具和技术内容的推广和教学 。</p>\n<p>职位描述</p>\n<p>1. 负责面向玩家的 UGC 编辑器产品的功能开发、体验优化、资源维护等<br>\n 2. 面向开发组内部，对接策划和程序，开发供策划使用的编辑器工具，并优化工具易用性、提升工具效率<br>\n 3. 承接关卡策划的新机制需求，对接程序进行开发实现和封装集成，增强各功能模块的易用性、易扩展性和易维护性</p>\n<p>职位要求</p>\n<p>1.3 年以上技术策划经验，有编辑器开发经验<br>\n 2. 熟悉游戏开发的全流程，对于技术实现方案能深入理解，逻辑能力强，思考全面<br>\n 3. 熟悉《我的世界》、《马里奥制造》、《Roblox》等 UGC 游戏，或 War3、Dota2、星际 2 等编辑器者优先</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.473Z",
            "content_html": "<blockquote>\n<p>本篇是关于游戏剧情如何设计的笔记和一些心得。<br>\n参考：<br>\n<a href=\"https://www.bilibili.com/video/BV1jV4y1H7dU/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=cdfb79b63b1f2a6e293b5958a46cbf20\">怎样写好一个故事</a></p>\n</blockquote>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021413507.png\" alt></p>\n<p>两个理论支柱构建故事<br>\n冲突理论<br>\n渴望<br>\n行动<br>\n障碍<br>\n故事曲线（起承转合）<br>\n阐述<br>\n上升动作<br>\n危机<br>\n高潮<br>\n下降动作</p>\n<p>怎样写好一个古水<br>\n三幕式<br>\n描述基本世界观和任务关系的【建置】<br>\n建置 - 近战 - 转折 - 解决</p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021506430.png\" alt></p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021507016.png\" alt></p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021507814.png\" alt><br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021508256.png\" alt><br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021509705.png\" alt><br>\n不同序列上对应的<br>\n 1. 渴望<br>\n 2. 行动<br>\n 3. 障碍</p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021513923.png\" alt></p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021513611.png\" alt><br>\n模板</p>\n<h1 id=\"剧情架构参考\"><a class=\"markdownIt-Anchor\" href=\"#剧情架构参考\">#</a> 剧情架构参考</h1>\n<h2 id=\"1-开场\"><a class=\"markdownIt-Anchor\" href=\"#1-开场\">#</a> 1. 开场</h2>\n<ul>\n<li><strong>现状</strong>：卢迪厄斯，一个在地球上因交通事故丧生的 34 岁无职游戏宅，转生到了一个充满魔法和剑术的异世界。</li>\n<li><strong>基本任务与关系</strong>：他决心在这个新的世界里弥补前世的遗憾，变得更强。</li>\n<li><strong>无关痛痒的设定</strong>：他的父亲保罗是一位出色的剑士，但与他的关系并不亲近。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514616.png\" alt=\"开场插图\"></li>\n</ul>\n<h2 id=\"2-切入\"><a class=\"markdownIt-Anchor\" href=\"#2-切入\">#</a> 2. 切入</h2>\n<ul>\n<li><strong>深化角色设定</strong>：卢迪厄斯展示了他对魔法的浓厚兴趣和对成为一名魔法师的渴望。</li>\n<li><strong>欲望</strong>：他希望能够进入魔法学校，与其他魔法师一同学习和成长。</li>\n<li><strong>困境</strong>：由于家庭经济问题，他无法支付学费。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514072.png\" alt=\"切入插图\"></li>\n</ul>\n<h2 id=\"3-激励\"><a class=\"markdownIt-Anchor\" href=\"#3-激励\">#</a> 3. 激励</h2>\n<ul>\n<li><strong>突发事件</strong>：卢迪厄斯得知家里请了家教来教他魔法，这让他有了学习魔法的机会。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514535.png\" alt=\"激励插图\"></li>\n</ul>\n<h2 id=\"4-进展\"><a class=\"markdownIt-Anchor\" href=\"#4-进展\">#</a> 4. 进展</h2>\n<ul>\n<li>卢迪厄斯在家教的指导下，开始学习魔法，并取得了一些进步。</li>\n<li><strong>虚假的胜利</strong>：他学到了很多魔法知识和技巧，觉得自己已经变得更强了。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021517880.png\" alt=\"进展插图\"></li>\n</ul>\n<h2 id=\"5-转折\"><a class=\"markdownIt-Anchor\" href=\"#5-转折\">#</a> 5. 转折</h2>\n<ul>\n<li><strong>真相时刻</strong>：卢迪厄斯被意外传送到了魔界，面临着未知的危险和挑战。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021519613.png\" alt=\"转折插图\"></li>\n</ul>\n<h2 id=\"6-再转\"><a class=\"markdownIt-Anchor\" href=\"#6-再转\">#</a> 6. 再转</h2>\n<ul>\n<li>卢迪厄斯决定勇敢面对，开始寻找出魔界的方法，同时也在这个过程中不断地学习和成长。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021523959.png\" alt=\"再转插图\"></li>\n</ul>\n<h2 id=\"7-危机\"><a class=\"markdownIt-Anchor\" href=\"#7-危机\">#</a> 7. 危机</h2>\n<ul>\n<li>在魔界，卢迪厄斯遇到了强大的敌人和各种困难，他被逼到了绝境。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021524699.png\" alt=\"危机插图\"></li>\n</ul>\n<h2 id=\"8-导入\"><a class=\"markdownIt-Anchor\" href=\"#8-导入\">#</a> 8. 导入</h2>\n<ul>\n<li>卢迪厄斯不放弃，他继续寻找出路，同时也在与敌人的战斗中不断磨练自己。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021525070.png\" alt=\"导入插图\"></li>\n</ul>\n<h2 id=\"9-高潮\"><a class=\"markdownIt-Anchor\" href=\"#9-高潮\">#</a> 9. 高潮</h2>\n<ul>\n<li>卢迪厄斯终于找到了出魔界的方法，并且在与敌人的最终决战中展示了他的成长和实力。</li>\n<li><strong>插图</strong>：<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021527773.png\" alt=\"高潮插图\"></li>\n</ul>\n<h2 id=\"10-结局\"><a class=\"markdownIt-Anchor\" href=\"#10-结局\">#</a> 10. 结局</h2>\n<ul>\n<li>卢迪厄斯成功返回了原来的世界，他不仅变得更强，也学会了珍惜生活和他人。</li>\n</ul>\n<p>这是根据《无职转生》的剧情进行的补充和润色，希望对您有所帮助！</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Markdown/%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Markdown/%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.411Z",
            "content_html": "<p>明天要做的事</p>\n<ul class=\"task-list\">\n<li>吃饭</li>\n<li>睡觉</li>\n<li>打豆豆<br>\n明天要做的事</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> 吃饭睡觉</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\"><label for=\"cbx_1\"> 打豆豆</label></li>\n</ul>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">int main()\n&#123;\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.400Z",
            "content_html": "<p>访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：</p>\n<ol>\n<li><code>public</code> ：公共的，可以被任何代码访问。</li>\n<li><code>protected internal</code> ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。</li>\n<li><code>internal</code> ：内部的，可以被同一程序集中的代码访问。</li>\n<li><code>protected</code> ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。</li>\n<li><code>private</code> ：私有的，只能被同一类中的代码访问。</li>\n</ol>\n<p>访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 <code>private</code>  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 <code>public</code>  可以使其他代码更容易地使用它们，从而提高代码的可维护性。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.400Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.399Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.398Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.397Z",
            "content_html": "<h2 id=\"1-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#1-基本概念\">#</a> 1、基本概念</h2>\n<p>单例模式只有一个实例，而且只能在类的内部实例化一次，不可以在外部实例化。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.397Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.395Z",
            "content_html": "<p>静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。<br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139796.png\" alt=\"Pasted image 20230620180951.png\"><br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230140156.png\" alt=\"Pasted image 20230620181011.png\"><br>\n 上面是错误示范<br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141887.png\" alt=\"Pasted image 20230620181325.png\"></p>\n<pre><code>应该使用MyClass3这个类名而不是myClass3这个实例\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.394Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.389Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.388Z",
            "content_html": "<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141676.png\" alt=\"Pasted image 20230621154506.png\"></p>\n<h1 id=\"抽象类不可被实例化\"><a class=\"markdownIt-Anchor\" href=\"#抽象类不可被实例化\">#</a> 抽象类不可被实例化</h1>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141139.png\" alt=\"Pasted image 20230621154709.png\"></p>\n<h1 id=\"抽象类之中的抽象函数必须在子类写好实现的方法体\"><a class=\"markdownIt-Anchor\" href=\"#抽象类之中的抽象函数必须在子类写好实现的方法体\">#</a> 抽象类之中的抽象函数必须在<mark>子类写好实现的方法体</mark></h1>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.387Z",
            "content_html": "<p>/*  抽象类</p>\n<p>1. 抽象类不可以被实例化</p>\n<p>2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体</p>\n<p>3. 抽象类的子类必须实现抽象类中的所有抽象函数</p>\n<p>4. 抽象类中可以有非抽象函数</p>\n<p>5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数</p>\n<p>6. 非抽象类可以继承抽象类，但是子类必须实现所有抽象函数</p>\n<p>*/</p>\n<h2 id=\"密封类\"><a class=\"markdownIt-Anchor\" href=\"#密封类\">#</a> 密封类</h2>\n<p>1. 密封类不可以被继承（他只能是子类）</p>\n<p>2. 密封类不能是抽象的。sealed 和 abstract 是互斥的</p>\n<p>（其实很好理解，密封类不能作为基类，只能是子类</p>\n<p>而抽象类虽然可以既是基类又是子类，但是其中的抽</p>\n<p>象函数是不能在抽象类中写方法体的，必须要在子类</p>\n<p>中实现，这就和密封类的定义【不可被继承，不能有子类】相违背了）</p>\n<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142194.png\" alt=\"Pasted image 20230621161128.png\"></p>\n<h3 id=\"上述报错表明了抽象类和封闭类是互斥的\"><a class=\"markdownIt-Anchor\" href=\"#上述报错表明了抽象类和封闭类是互斥的\">#</a> 上述报错，表明了抽象类和封闭类是互斥的</h3>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.385Z",
            "content_html": "<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">    void Func1()\n\n    &#123;\n\n        int value1&#x3D;15;\n\n        if(value1&gt;5)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 5&quot;);&#x2F;&#x2F;value1满足了第一个条件就执行了，输出语句\n\n        &#125;\n\n        else if(value1&gt;10)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 10&quot;);&#x2F;&#x2F;由于第一个已经执行了，就终端这一串条件语句，所以虽然满足条件但没有执行\n\n        &#125;\n\n        else\n\n        &#123;\n\n            Debug.Log(&quot;value1 is less than 5&quot;);\n\n        &#125;\n\n    &#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"条件检测是线性的只要满足前面的就不会执行后面的\"><a class=\"markdownIt-Anchor\" href=\"#条件检测是线性的只要满足前面的就不会执行后面的\">#</a> 条件检测是线性的，只要满足前面的就不会执行后面的</h1>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.385Z",
            "content_html": "<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\"> enum emAction\n&#123;\n    GetUp,\n    Wash,\n    Eat,\n    Work,\n&#125;\n\npublic emAction Action;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这串代码出现了一个错误，即 <code>emAction</code>  枚举类型的访问修饰符与 <code>mAction</code>  字段的访问修饰符不匹配。具体来说， <code>emAction</code>  枚举类型是默认的（即没有访问修饰符），而 <code>Action</code>  字段是公共的（ <code>public</code> ）。</p>\n<h3 id=\"这违反了c的访问性限制\"><a class=\"markdownIt-Anchor\" href=\"#这违反了c的访问性限制\">#</a> 这违反了 C# 的访问性限制</h3>\n<p>因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 <code>emAction</code>  枚举类型的访问修饰符更改为公共的（ <code>public</code> ）或将 <code>mAction</code>  字段的访问修饰符更改为默认 (private 级别) 的（即删除 <code>public</code>  关键字）。</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">enum emAction<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 <code>private</code>  访问等级，是最低一级。<br>\n<mark>关于访问等级先后详细看 [[访问等级]]</mark><br>\n 如果 <code>Action</code>  字段是 <code>public</code> ，则将 <code>emAction</code>  枚举类型的可访问性设置为 <code>private</code>  是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。</p>\n<h3 id=\"那为什么c要有这个访问性限制呢-其实也不难理解\"><a class=\"markdownIt-Anchor\" href=\"#那为什么c要有这个访问性限制呢-其实也不难理解\">#</a> 那为什么 C# 要有这个访问性限制呢。其实也不难理解</h3>\n<p>C# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。</p>\n<p>例如，在这个示例中， <code>mAction</code>  字段的访问修饰符是 <code>public</code> ，而 <code>emAction</code>  枚举类型的访问修饰符是默认的（即 <code>private</code> ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 <code>emAction</code>  枚举类型的可访问性低于 <code>mAction</code>  字段的可访问性。</p>\n<p>说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95%E3%80%81Event%E4%BA%8B%E4%BB%B6%E3%80%81%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95%E3%80%81Event%E4%BA%8B%E4%BB%B6%E3%80%81%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.384Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Action%E5%A7%94%E6%89%98.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Action%E5%A7%94%E6%89%98.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.383Z",
            "content_html": "<h2 id=\"action的委托不能有返回值\"><a class=\"markdownIt-Anchor\" href=\"#action的委托不能有返回值\">#</a> Action 的委托不能有返回值</h2>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">using System.Collections;\n\nusing System.Collections.Generic;\n\nusing UnityEngine;\n\nusing System;\n\n  \n\n&#x2F;&#x2F;Action是一个委托，它是没有返回值的泛型委托，它可以用来替代没有参数和返回值的委托\n\npublic class Delegate_ex : MonoBehaviour\n\n&#123;\n\n    public delegate void Mydelegate1(int a,int b);\n\n    public delegate int Mydelegate2();\n\n    public delegate void Mydelegate3&lt;T&gt;(T a);\n\n    &#x2F;&#x2F; Start is called before the first frame update\n\n    void Start()\n\n    &#123;\n\n        Mydelegate1 showAdd &#x3D; Add;\n\n        showAdd(1,2);\n\n        Action showAdd2 &#x3D; Subtract;\n\n        showAdd2();\n\n        Action&lt;int,int&gt; showAdd3 &#x3D; Add;\n\n        showAdd3(1,2);\n\n        Mydelegate2 Showten &#x3D; ten;\n\n        int a&#x3D;Showten();\n\n        Debug.Log(a);\n\n        Mydelegate3&lt;string&gt;show3&#x3D;Show3;\n\n        show3(&quot;Show3&quot;);\n\n        Action&lt;string&gt; show4 &#x3D; Show3;\n\n        show4(&quot;Hello World&quot;);\n\n        Action show5 &#x3D; Show4;&#x2F;&#x2F;Action是一个委托，它是没有返回值的泛型委托，它可以用来替代没有参数和返回值的委托\n\n        Mydelegate2 show6 &#x3D; Show4;\n\n        int b&#x3D;show6();\n\n        Debug.Log(b);\n\n    &#125;\n\n    void Update()\n\n    &#123;\n\n    &#125;\n\n    public void Add(int a,int b)\n\n    &#123;\n\n        Debug.Log(a+b);\n\n    &#125;\n\n    public void Subtract()\n\n    &#123;\n\n        Debug.Log(&quot;Subtract&quot;);\n\n    &#125;\n\n    public int ten()\n\n    &#123;\n\n        return 10;\n\n    &#125;\n\n    public void Show3(string a)\n\n    &#123;\n\n        Debug.Log(a);\n\n    &#125;\n\n    public int Show4()（这个语段是错误的）&#x2F;&#x2F;Action委托不可以用这个函数，因为Action委托是没有返回值的泛型委托，而这个函数有返回值\n\n    &#123;\n\n        return 114514;\n\n    &#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"action-是没有返回值的泛型委托\"><a class=\"markdownIt-Anchor\" href=\"#action-是没有返回值的泛型委托\">#</a> Action 是<mark>没有返回值</mark>的泛型委托</h2>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Func%20%E5%A7%94%E6%89%98.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Func%20%E5%A7%94%E6%89%98.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.383Z",
            "content_html": "<p>Func 必须要返回值</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/StringBuilder.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/StringBuilder.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.383Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/String.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/String.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.382Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/FileStream.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/FileStream.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.382Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.381Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.381Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.380Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.379Z",
            "content_html": "<p>[[抽象方法的方法体只能在子类中实现，而不能写在基类中]]</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.379Z",
            "content_html": "<p><mark>实际上虚函数就类似于初省值</mark></p>\n<h3 id=\"抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现\"><a class=\"markdownIt-Anchor\" href=\"#抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现\">#</a> <mark>抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现</mark></h3>\n<p>[[抽象方法的方法体只能在子类中实现，而不能写在基类中]]<br>\n 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于：</p>\n<ol>\n<li>抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。</li>\n<li>抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。</li>\n<li>抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。</li>\n</ol>\n<p>下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数：</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">abstract class Shape\n\n&#123;\n\n    public abstract double GetArea();&#x2F;&#x2F;这里的方法体必须是空\n\n&#125;\n\nclass Rectangle : Shape\n\n&#123;\n\n    public double Width &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()&#x2F;&#x2F;子类写入方法体实现\n\n    &#123;\n\n        return Width * Height;\n\n    &#125;\n\n&#125;\nclass Circle : Shape\n\n&#123;\n\n    public double Radius &#123; get; set; &#125;\n\n    public override double GetArea(）\n\n    &#123;\n\n        return Math.PI * Radius * Radius;\n\n    &#125;\n\n&#125;\n\nclass Square : Shape\n\n&#123;\n\n    public double Side &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return Side * Side;\n\n    &#125;\n\n&#125;\n\nclass Triangle : Shape\n\n&#123;\n\n    public double Base &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return 0.5 * Base * Height;\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nShape shape1 &#x3D; new Rectangle &#123; Width &#x3D; 10, Height &#x3D; 20 &#125;;\n\nShape shape2 &#x3D; new Circle &#123; Radius &#x3D; 5 &#125;;\n\nShape shape3 &#x3D; new Square &#123; Side &#x3D; 10 &#125;;\n\nShape shape4 &#x3D; new Triangle &#123; Base &#x3D; 10, Height &#x3D; 5 &#125;;\n\nConsole.WriteLine(shape1.GetArea()); &#x2F;&#x2F; 输出：200\n\nConsole.WriteLine(shape2.GetArea()); &#x2F;&#x2F; 输出：78.53981633974483\n\nConsole.WriteLine(shape3.GetArea()); &#x2F;&#x2F; 输出：100\n\nConsole.WriteLine(shape4.GetArea()); &#x2F;&#x2F; 输出：25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个抽象类 <code>Shape</code>  和四个子类 <code>Rectangle</code> 、 <code>Circle</code> 、 <code>Square</code>  和 <code>Triangle</code> ，它们都重写了 <code>GetArea</code>  方法。 <code>GetArea</code>  方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 <code>GetArea</code>  方法，输出了它们的面积。</p>\n<p><code>abstract</code>  和 <code>virtual</code>  都是 C# 中用于实现多态的关键字，它们的主要区别在于：</p>\n<ol>\n<li><code>abstract</code>  用于声明抽象方法，它必须在派生类中进行实现，而 <code>virtual</code>  用于声明虚方法，它可以在派生类中进行重写，但不是必须的。</li>\n<li><code>abstract</code>  方法没有实现，只有方法签名，而 <code>virtual</code>  方法有默认的实现，可以在基类中提供。</li>\n<li><code>abstract</code>  方法只能在抽象类中声明，而 <code>virtual</code>  方法可以在普通的类中声明。</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.378Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.378Z",
            "content_html": "<h2 id=\"封装的主要目的\"><a class=\"markdownIt-Anchor\" href=\"#封装的主要目的\">#</a> 封装的主要目的</h2>\n<p>封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。</p>\n<p>封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。</p>\n<p>在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.377Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.376Z",
            "content_html": "<p><code>this</code>  和 <code>base</code>  都是 C# 中的关键字，它们的主要区别在于：</p>\n<ol>\n<li><code>this</code>  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 <code>this</code>  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。</li>\n<li><code>base</code>  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 <code>base</code>  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。</li>\n</ol>\n<p>以下是一个示例，演示了如何使用 <code>this</code>  和 <code>base</code>  关键字：</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">class Person\n\n&#123;\n\n    public string Name &#123; get; set; &#125;\n\n    public int Age &#123; get; set; &#125;\n\n    public Person(string name, int age)\n\n    &#123;\n\n        this.Name &#x3D; name;\n\n        this.Age &#x3D; age;\n\n    &#125;\n\n&#125;\n\nclass Student : Person\n\n&#123;\n\n    public string School &#123; get; set; &#125;\n\n    public Student(string name, int age, string school) : base(name, age)\n\n    &#123;\n\n        this.School &#x3D; school;\n\n    &#125;\n\n    public void Study()\n\n    &#123;\n\n        Console.WriteLine(&quot;&#123;0&#125; is studying at &#123;1&#125;.&quot;, this.Name, this.School);\n\n    &#125;\n\n    public void ShowInfo()\n\n    &#123;\n\n        Console.WriteLine(&quot;Name: &#123;0&#125;, Age: &#123;1&#125;, School: &#123;2&#125;&quot;, this.Name, this.Age, this.School);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nStudent student &#x3D; new Student(&quot;Tom&quot;, 18, &quot;ABC School&quot;);\n\nstudent.Study(); &#x2F;&#x2F; 输出：Tom is studying at ABC School.\n\nstudent.ShowInfo(); &#x2F;&#x2F; 输出：Name: Tom, Age: 18, School: ABC School<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个 <code>Person</code>  类和一个 <code>Student</code>  类， <code>Student</code>  类继承自 <code>Person</code>  类。在 <code>Person</code>  类中，我们定义了一个构造函数，使用 <code>this</code>  关键字来引用当前对象的成员变量。在 <code>Student</code>  类中，我们定义了一个构造函数，使用 <code>base</code>  关键字来调用基类的构造函数。在 <code>Student</code>  类中，我们还定义了两个方法 <code>Study</code>  和 <code>ShowInfo</code> ，分别使用 <code>this</code>  关键字和 <code>base</code>  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 <code>Student</code>  对象，并调用了它的 <code>Study</code>  和 <code>ShowInfo</code>  方法，输出了相应的信息。</p>\n<p>总的来说， <code>this</code>  关键字用于引用当前对象， <code>base</code>  关键字用于引用基类对象。它们的应用场景不同， <code>this</code>  关键字通常用于访问当前对象的成员， <code>base</code>  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.374Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.373Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.369Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.369Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.365Z",
            "content_html": "<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Base \n&#123; \n\tpublic: &#x2F;&#x2F; 公有成员 \n\tprotected: &#x2F;&#x2F; 受保护成员 \n\tprivate: &#x2F;&#x2F; 私有成员 \n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"1public\"><a class=\"markdownIt-Anchor\" href=\"#1public\">#</a> 1.public</h2>\n<p>public 成员，被称为公有成员，是在类外可以访问的，可以不使用任何成员函数等，来直接调用 public 成员。</p>\n<h2 id=\"2protected\"><a class=\"markdownIt-Anchor\" href=\"#2protected\">#</a> 2.protected</h2>\n<h2 id=\"3private\"><a class=\"markdownIt-Anchor\" href=\"#3private\">#</a> 3.private</h2>\n<p><em><strong>默认情况下，没有特别写访问修饰符的成员变量都是 private</strong></em><br>\n<strong> 私有</strong>成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.364Z",
            "content_html": "<h1 id=\"常规转换\"><a class=\"markdownIt-Anchor\" href=\"#常规转换\">#</a> 常规转换</h1>\n<h2 id=\"1隐式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#1隐式类型转换\">#</a> 1. 隐式类型转换</h2>\n<p>而隐式是<a href=\"https://zhidao.baidu.com/search?word=%E7%BC%96%E8%AF%91%E5%99%A8&amp;fr=iknow_pc_qb_highlight\">编译器</a>自动转换的，一般同一<a href=\"https://zhidao.baidu.com/search?word=%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&amp;fr=iknow_pc_qb_highlight\">数据类型</a>（如 byte,int,float,double），由低级转为高级为隐式（如 int 转为 float 或 double）</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"2显示类型转换\"><a class=\"markdownIt-Anchor\" href=\"#2显示类型转换\">#</a> 2. 显示类型转换</h2>\n<p>而高级转为低级为强制类型转换，即显式转换，须用户在代码中写的（如 float 转为 int）。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"四种类型转换方式\"><a class=\"markdownIt-Anchor\" href=\"#四种类型转换方式\">#</a> 四种类型转换方式</h1>\n<p>static_cast<br>\ndynamic_cast<br>\nconst_cast<br>\nreinterpret_cast</p>\n<h2 id=\"static_cast\"><a class=\"markdownIt-Anchor\" href=\"#static_cast\">#</a> static_cast</h2>\n<p>static_cast 用于显式转换一个表达式的类型。 在将 static_cast 应用于 void* 时，会执行指针的类型转换，将其转换为目标类型指针。<br>\n・\t应用场景：<br>\n・\t转换数值类型（如 int 转换为 double）<br>\n・\t转换指针类型（如将 Base* 转换为 Derived*）<br>\n・\t转换引用类型（例如，将 char&amp; 转换为 int&amp;）</p>\n<h2 id=\"dynamic_cast\"><a class=\"markdownIt-Anchor\" href=\"#dynamic_cast\">#</a> dynamic_cast</h2>\n<p>dynamic_cast 用于将一个指向基类的指针或引用转换为指向派生类的指针或引用。<br>\n・\t应用场景：<br>\n・\t用于在运行时动态检测对象实际的派生类型。<br>\n・\t通常用于运行多态类型。</p>\n<h2 id=\"const_cast\"><a class=\"markdownIt-Anchor\" href=\"#const_cast\">#</a> const_cast</h2>\n<p>const_cast 用于去除写保护属性，可以通过该方式去掉类型的 const 或 volatile 属性。<br>\n・\t应用场景：<br>\n・\t用于在修改对象的同时维护其类型的常量性。</p>\n<h2 id=\"reinterpret_cast\"><a class=\"markdownIt-Anchor\" href=\"#reinterpret_cast\">#</a> reinterpret_cast</h2>\n<p>reinterpret_cast 是一种最不安全但最灵活的类型转换，它可以将任何指针转换为任何其他类型的指针。<br>\n・\t应用场景：<br>\n・\t用于在底层系统编程和平台特定代码中。<br>\n需要注意的是，不同的类型转换方式在不同情况下可能导致不同的结果，并且这些方式的使用具有一定的风险和限制。在进行类型转换时，请一定要仔细检查您的代码，以确保它是正确的和安全的。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E6%9C%AA%E5%91%BD%E5%90%8D.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E6%9C%AA%E5%91%BD%E5%90%8D.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.363Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/C%20C++%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/C%20C++%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.362Z",
            "content_html": "<p>参考：<br>\n<a href=\"https://blog.csdn.net/chen_z_p/article/details/105352547\">我终于把 C++ 多文件编程理解透彻了_czpcalm 的博客 - CSDN 博客</a></p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%88%9D%E8%AF%86C++.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%88%9D%E8%AF%86C++.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.362Z",
            "content_html": "<h2 id=\"命名空间方法的使用\"><a class=\"markdownIt-Anchor\" href=\"#命名空间方法的使用\">#</a> 命名空间方法的使用</h2>\n<h3 id><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>引入命名域，如果没有引入命名域，则在 cout 以及 cin 都需要写成<br>\n std::cout<br>\nstd::cin‘</p>\n<p><strong>命名空间的作用</strong></p>\n<p>首先我们知道 C++ 是一个支持面向对象开发的语言，那么在类的定义的时候，我们需要抽象出物体（这一类物体的属性），但是实际情况下，不同类的物品在抽象的时候，可能会有相同定义的属性，比如在游戏当中，玩家有血量 HP ，敌人同样也有血量 HP，那如果定义变量的时候都定义 <code>HP</code>  ，将会产生冲突，命名空间就很好地解决了这一点。</p>\n<p>如下:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">namespace</span> Player\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">float</span> hp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">namespace</span> Enemy\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">float</span> hp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> main\n<span class=\"token punctuation\">&#123;</span>\n\tPlayer<span class=\"token double-colon punctuation\">::</span>hp<span class=\"token punctuation\">;</span>\n\tEnemy<span class=\"token double-colon punctuation\">::</span>hp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述例子中，我分别创建了两个命名空间 “ <code>Player</code> ”，“ <code>Enemy</code> ”, 我在调用他们的时候都必须要在变量前面提前使用作用域限定符号 ==：：==。</p>\n<p>如此如做就对变量进行了很好地区分。同时比起直接该变量名去解决冲突，也提高了可读性和易维护性。</p>\n<h4 id=\"一些奇怪的问题\"><a class=\"markdownIt-Anchor\" href=\"#一些奇怪的问题\">#</a> 一些奇怪的问题</h4>\n<p><strong><mark>Q(imcenyi)</mark></strong>: 那如果有两个全局命名空间比如 a,b, 这两个命名空间下都有变量 num，那如果我在一个程序中，声明了两个命名空间 a，b，这个时候我调用 num 的时候，会发生什么，会报错吗</p>\n<p><mark><strong>A（GitHub Copilot）</strong></mark>: 如果在一个程序中声明了两个命名空间  <code>a</code>  和  <code>b</code> ，并且这两个命名空间下都有变量  <code>num</code> ，那么在调用  <code>num</code>  变量时，编译器会根据作用域规则来确定使用哪个命名空间下的  <code>num</code>  变量。</p>\n<p>具体来说，如果在某个作用域中使用了  <code>num</code>  变量，编译器会按照以下顺序查找  <code>num</code>  变量：</p>\n<ol>\n<li>查找当前作用域中是否有名为  <code>num</code>  的变量，如果有，则使用该变量。</li>\n<li>如果当前作用域中没有名为  <code>num</code>  的变量，则查找最近的外层作用域中是否有名为  <code>num</code>  的变量，如果有，则使用该变量。</li>\n<li>如果所有外层作用域中都没有名为  <code>num</code>  的变量，则查找命名空间  <code>a</code>  中是否有名为  <code>num</code>  的变量，如果有，则使用该变量。</li>\n<li>如果命名空间  <code>a</code>  中没有名为  <code>num</code>  的变量，则查找命名空间  <code>b</code>  中是否有名为  <code>num</code>  的变量，如果有，则使用该变量。</li>\n<li>如果命名空间  <code>b</code>  中也没有名为  <code>num</code>  的变量，则编译器会报错。</li>\n</ol>\n<p>因此，如果在程序中声明了两个命名空间  <code>a</code>  和  <code>b</code> ，并且这两个命名空间下都有变量  <code>num</code> ，那么在调用  <code>num</code>  变量时，编译器会根据作用域规则来确定使用哪个命名空间下的  <code>num</code>  变量，不会报错。但是，为了避免命名冲突，建议在程序中尽量避免使用相同的变量名。</p>\n<p>希望这可以帮助到你！</p>\n<h2 id=\"c完全兼容c\"><a class=\"markdownIt-Anchor\" href=\"#c完全兼容c\">#</a> C++ 完全兼容 C</h2>\n<p>同样 C++ 也完全兼容 C 的全部源文件 但是要再.h 文件名前加 C，如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio.h></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"定义命名空间-namespace\"><a class=\"markdownIt-Anchor\" href=\"#定义命名空间-namespace\">#</a> 定义命名空间 namespace</h2>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">namespace\n&#123;\n...;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.362Z",
            "content_html": "<hr>\n<hr>\n<p>实例化对象。</p>\n<p><code>double a[10];</code>  这条语句在 C++ 中是在栈内存中分配了一块能够存储 10 个  <code>double</code>  类型元素的内存空间。这个数组  <code>a</code>  可以用来存储 10 个  <code>double</code>  类型的值，其索引范围是 0 到 9。</p>\n<p>这里是一个简单的示例，说明如何使用这个数组：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 初始化数组</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 打印数组的值</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们首先声明了一个能够存储 10 个  <code>double</code>  类型值的数组  <code>a</code> 。然后，我们使用一个循环来初始化数组的每个元素，最后我们使用另一个循环来打印数组的每个元素的值。</p>\n<p>在 C++ 中，语句  <code>double *s;</code>  并没有分配内存来存储  <code>double</code>  类型的数据。这条语句只是声明了一个指向  <code>double</code>  类型的指针变量  <code>s</code> 。指针变量  <code>s</code>  本身会占用一些内存来存储一个地址（通常是 4 或 8 字节，取决于系统的架构），但它目前还没有指向任何已分配内存的  <code>double</code>  类型数据。</p>\n<p>如果你想使用这个指针来存储一个  <code>double</code>  类型的数据，你需要先分配内存，可以使用  <code>new</code>  关键字来做这件事，如下所示：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样，内存就被分配了，而且  <code>s</code>  现在指向这块新分配的内存。记得在不再需要这块内存时使用  <code>delete</code>  关键字来释放它，以避免内存泄漏：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">delete</span> s<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.362Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.360Z",
            "content_html": "<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142390.png\" alt=\"Pasted image 20230614104941.png\"></p>\n<h2 id=\"这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢\"><a class=\"markdownIt-Anchor\" href=\"#这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢\">#</a> 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。</h2>\n<h3 id=\"1首先是报错的原因\"><a class=\"markdownIt-Anchor\" href=\"#1首先是报错的原因\">#</a> 1. 首先是报错的原因</h3>\n<p>这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。</p>\n<h2 id=\"2那为什么在unity的项目对象中可以直接运行而不会报错\"><a class=\"markdownIt-Anchor\" href=\"#2那为什么在unity的项目对象中可以直接运行而不会报错\">#</a> 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错</h2>\n<p>Unity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。<br>\n在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。</p>\n<h2 id=\"解决方法将scriptcs所在的目录加入到环境变量当中\"><a class=\"markdownIt-Anchor\" href=\"#解决方法将scriptcs所在的目录加入到环境变量当中\">#</a> 解决方法，将 scriptcs 所在的目录加入到环境变量当中。</h2>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/Debug.Log.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/Debug.Log.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.359Z",
            "content_html": "<h1 id=\"一定要记得log的l大写\"><a class=\"markdownIt-Anchor\" href=\"#一定要记得log的l大写\">#</a> 一定要记得 Log 的 L 大写！！！！</h1>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.359Z",
            "content_html": "<p><mark>抽象方法只能在抽象类中定义</mark><br>\n这个错误提示是因为您在抽象类 <code>Polygon</code>  中声明了一个抽象方法 <code>Purarea</code> ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。</p>\n<p>要解决这个问题，您需要为 <code>Purarea</code>  方法提供方法体，或者将 <code>Polygon</code>  类声明为抽象类，以便子类可以实现 <code>Purarea</code>  方法。</p>\n<p>以下是一个示例，演示了如何在 <code>Polygon</code>  类中声明抽象方法：</p>\n<pre class=\"line-numbers language-CS\" data-language=\"CS\"><code class=\"language-CS\">\nabstract class Polygon\n\n&#123;\n\n    public abstract void Purarea();\n\n&#125;\n\nclass Rectangle : Polygon\n\n&#123;\n\n    public override void Purarea()\n\n    &#123;\n\n        Console.WriteLine(&quot;Calculate the area of a rectangle.&quot;);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nPolygon polygon &#x3D; new Rectangle();\n\npolygon.Purarea(); &#x2F;&#x2F; 输出：Calculate the area of a rectangle.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个抽象类 <code>Polygon</code>  和一个非抽象子类 <code>Rectangle</code> ，它们都实现了 <code>Purarea</code>  方法。在使用示例中，我们创建了一个 <code>Rectangle</code>  对象，并将其赋值给 <code>Polygon</code>  类型的变量 <code>polygon</code> 。然后，我们调用 <code>polygon.Purarea()</code>  方法，它会调用 <code>Rectangle</code>  类中的 <code>Purarea</code>  方法，并输出 <code>Calculate the area of a rectangle.</code> 。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%AE%BA.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%AE%BA.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.346Z",
            "content_html": "<h2 id=\"可以从简单的点子入手\"><a class=\"markdownIt-Anchor\" href=\"#可以从简单的点子入手\">#</a> 可以从简单的点子入手</h2>\n<p>比如<br>\n！[[Pasted image 20230915135613.png]]</p>\n<p>如图一个很简单的东西，从下走到上。这看上去没什么意思，但如果进行了机制的修改扩充，堆叠之后。</p>\n<p>![[Pasted image 20230915135729.png]]</p>\n<p>它就起码看上去很有意思了。<br>\n或者说可以改一下颜色什么的。</p>\n<p>所以一个有趣的游戏或者说很牛的游戏，他不是说一开始的想法就是完美的，他的存在是出于机制的堆叠。</p>\n<h2 id=\"1目的\"><a class=\"markdownIt-Anchor\" href=\"#1目的\">#</a> 1. 目的</h2>\n<ul>\n<li>一个游戏一定要有明确的目标</li>\n<li>难度要有梯度</li>\n</ul>\n<h2 id=\"2难度\"><a class=\"markdownIt-Anchor\" href=\"#2难度\">#</a> 2. 难度</h2>\n<p>如何提升难度</p>\n<ul>\n<li>\n<p>几率</p>\n<ul>\n<li>1. 关注几率的游戏\n<ul>\n<li>练习不会有太大意义，他很难带入到下一场游戏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>技巧</p>\n<ul>\n<li>如下棋 - 胜利完全取决于自己</li>\n</ul>\n</li>\n<li>\n<p>当然在很多游戏中几率与技巧密不可分<br>\n比如<strong>扑克</strong>。</p>\n<ul>\n<li><strong>扑克的随机性</strong>：洗牌，抽牌，发牌</li>\n<li><strong>扑克的技巧性</strong>：如何利用手中的牌打出最好的效果</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%AC%E5%BC%80%E8%AF%BE%E6%8E%A8%E8%8D%90.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%AC%E5%BC%80%E8%AF%BE%E6%8E%A8%E8%8D%90.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.345Z",
            "content_html": "<ol>\n<li>\n<p><strong>Coursera</strong></p>\n<ul>\n<li><a href=\"https://www.coursera.org/specializations/game-development\">Game Design and Development</a>：这是一个由密歇根州立大学提供的专项课程，涵盖了游戏设计和开发的基本知识。</li>\n<li><a href=\"https://www.coursera.org/specializations/game-design\">Game Design: Art and Concepts</a>：这是由加利福尼亚艺术大学提供的专项课程，专注于游戏设计的艺术和概念方面。</li>\n</ul>\n</li>\n<li>\n<p><strong>Udemy</strong></p>\n<ul>\n<li><a href=\"https://www.udemy.com/course/unitycourse/\">Complete C# Unity Game Developer 2D</a>：这门课程将教你如何使用 Unity 和 C# 从头开始创建 2D 游戏。</li>\n<li><a href=\"https://www.udemy.com/course/unrealcourse/\">Unreal Engine C++ Developer: Learn C++ and Make Video Games</a>：如果你对使用 Unreal Engine 进行游戏开发感兴趣，这门课程将是一个很好的起点。</li>\n</ul>\n</li>\n<li>\n<p><strong>edX</strong></p>\n<ul>\n<li><a href=\"https://www.edx.org/professional-certificate/ritx-video-game-design\">Video Game Design and Balance</a>：这是由罗切斯特理工学院提供的专项课程，专注于游戏设计和平衡。</li>\n</ul>\n</li>\n<li>\n<p><strong>FutureLearn</strong></p>\n<ul>\n<li><a href=\"https://www.futurelearn.com/degrees/abertay-university/video-game-design-and-development\">Video Game Design and Development</a>：这是由阿伯泰大学提供的一个完整的在线学位课程，涵盖了游戏设计和开发的各个方面。</li>\n</ul>\n</li>\n<li>\n<p><strong>YouTube</strong></p>\n<ul>\n<li><a href=\"https://www.youtube.com/user/Brackeys\">Brackeys</a>：这是一个非常受欢迎的 YouTube 频道，提供了大量的 Unity 教程，涵盖了从基本概念到高级技术的所有内容。</li>\n<li><a href=\"https://www.youtube.com/c/GDC\">GDC</a>：这个频道提供了大量的游戏开发者大会（GDC）的演讲和教程，涉及游戏设计的各个方面。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>南加州大学（USC）的游戏开发项目是非常知名的。他们确实有一些公开课和在线资源可供参考。以下是一些你可能会感兴趣的资源：</li>\n</ul>\n<ol>\n<li>\n<p><strong>USC Games</strong></p>\n<ul>\n<li><a href=\"https://games.usc.edu/\">USC Games Official Website</a>：你可以在这里找到他们的最新项目和新闻更新，以及他们的一些课程和项目介绍。</li>\n</ul>\n</li>\n<li>\n<p><strong>Coursera</strong></p>\n<ul>\n<li><a href=\"https://www.coursera.org/specializations/game-design-and-development\">Game Design and Development with Unity 2020</a>：这是 USC 提供的一个专项课程，涉及 Unity 2020 的游戏设计和开发。</li>\n</ul>\n</li>\n<li>\n<p><strong>YouTube</strong></p>\n<ul>\n<li><a href=\"https://www.youtube.com/user/USCGames\">USC Games YouTube Channel</a>：这个频道提供了一些关于他们的课程和项目的视频，包括学生项目的展示和一些教学视频。</li>\n</ul>\n</li>\n<li>\n<p><strong>iTunes U</strong></p>\n<ul>\n<li>在 iTunes U 上，USC 曾提供了一些游戏设计和开发的公开课程，你可以在那里搜索 “USC Games” 或 “USC Game Design” 来查找相关课程。</li>\n</ul>\n</li>\n<li>\n<p><strong>其他在线平台</strong></p>\n<ul>\n<li>USC 也可能在其他在线教育平台上提供课程或研讨会，你可以通过检查平台如 edX 或 FutureLearn 来查找他们的课程。</li>\n</ul>\n</li>\n</ol>\n<p>希望这些资源能帮到你！如果你有其他问题或需要更多的信息，随时告诉我。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%8D%97%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E5%85%AC%E5%BC%80%E8%AF%BE.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%8D%97%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E5%85%AC%E5%BC%80%E8%AF%BE.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.345Z",
            "content_html": "<ol>\n<li>\n<p><strong>USC Games</strong></p>\n<ul>\n<li><a href=\"https://games.usc.edu/\">USC Games Official Website</a>：你可以在这里找到他们的最新项目和新闻更新，以及他们的一些课程和项目介绍。</li>\n</ul>\n</li>\n<li>\n<p><strong>Coursera</strong></p>\n<ul>\n<li><a href=\"https://www.coursera.org/specializations/game-design-and-development\">Game Design and Development with Unity 2020</a>：这是 USC 提供的一个专项课程，涉及 Unity 2020 的游戏设计和开发。</li>\n</ul>\n</li>\n<li>\n<p><strong>YouTube</strong></p>\n<ul>\n<li><a href=\"https://www.youtube.com/user/USCGames\">USC Games YouTube Channel</a>：这个频道提供了一些关于他们的课程和项目的视频，包括学生项目的展示和一些教学视频。</li>\n</ul>\n</li>\n<li>\n<p><strong>iTunes U</strong></p>\n<ul>\n<li>在 iTunes U 上，USC 曾提供了一些游戏设计和开发的公开课程，你可以在那里搜索 “USC Games” 或 “USC Game Design” 来查找相关课程。</li>\n</ul>\n</li>\n<li>\n<p><strong>其他在线平台</strong></p>\n<ul>\n<li>USC 也可能在其他在线教育平台上提供课程或研讨会，你可以通过检查平台如 edX 或 FutureLearn 来查找他们的课程</li>\n</ul>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E6%8B%86%E8%A7%A3/RTS%EF%BC%88%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%EF%BC%89.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E6%8B%86%E8%A7%A3/RTS%EF%BC%88%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%EF%BC%89.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.343Z",
            "content_html": "<h2 id=\"1经典rts\"><a class=\"markdownIt-Anchor\" href=\"#1经典rts\">#</a> 1. 经典 RTS</h2>\n<ul>\n<li>\n<p>C&amp;C =《命令与征服》(Command &amp; Conquer) 系列，包括《C&amp;C：红色警戒》；</p>\n</li>\n<li>\n<p>SC=《星际争霸》(StarCraft) 系列；</p>\n</li>\n<li>\n<p>War3=《魔兽争霸 3》(Warcraft 3)</p>\n</li>\n<li>\n<p>AoE=《帝国时代》(Age of Empire) 系列</p>\n</li>\n</ul>\n<h3 id=\"核心玩法\"><a class=\"markdownIt-Anchor\" href=\"#核心玩法\">#</a> 核心玩法：</h3>\n<ul>\n<li>\n<p>建设：玩家需要建造能够实现采集、扩军和战斗功能的建筑。造基地。</p>\n</li>\n<li>\n<p>采集：玩家需要从地图上收集（一种或多种）资源。采矿。</p>\n</li>\n<li>\n<p>扩军：玩家需要招募军队、研究科技，强化军队的军事实力。造兵、升级。</p>\n</li>\n<li>\n<p>战斗：玩家使用军队达成战术与战略目的。打仗。</p>\n</li>\n</ul>\n<h3 id=\"传统rts弊端\"><a class=\"markdownIt-Anchor\" href=\"#传统rts弊端\">#</a> 传统 RTS 弊端</h3>\n<p>系统复杂、操作断手、天梯虐人、体验落后</p>\n<h2 id=\"2核心系统\"><a class=\"markdownIt-Anchor\" href=\"#2核心系统\">#</a> 2. 核心系统</h2>\n<h3 id=\"经济\"><a class=\"markdownIt-Anchor\" href=\"#经济\">#</a> 经济</h3>\n<h3 id=\"科技\"><a class=\"markdownIt-Anchor\" href=\"#科技\">#</a> 科技</h3>\n<h3 id=\"兵力\"><a class=\"markdownIt-Anchor\" href=\"#兵力\">#</a> 兵力</h3>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.342Z",
            "content_html": "<h3 id=\"玩法需求-剧情关卡战斗-\"><a class=\"markdownIt-Anchor\" href=\"#玩法需求-剧情关卡战斗-\">#</a> 玩法需求 -&gt; 剧情 / 关卡 / 战斗 -&gt;</h3>\n<ul>\n<li>世界观</li>\n<li>地图尺寸</li>\n<li>人物形象</li>\n<li>动作表现</li>\n<li>路线引导</li>\n<li>特效反馈</li>\n</ul>\n<h3 id=\"策划需求-美术评估-美术制作\"><a class=\"markdownIt-Anchor\" href=\"#策划需求-美术评估-美术制作\">#</a> 策划需求 -&gt; 美术评估 -&gt; 美术制作</h3>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF%E9%9C%80%E6%B1%82.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF%E9%9C%80%E6%B1%82.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.342Z",
            "content_html": "<h2 id=\"1uiux\"><a class=\"markdownIt-Anchor\" href=\"#1uiux\">#</a> 1.UIUX</h2>\n<p>GUI</p>\n<h2 id=\"2原画\"><a class=\"markdownIt-Anchor\" href=\"#2原画\">#</a> 2. 原画</h2>\n<h3 id=\"风格\"><a class=\"markdownIt-Anchor\" href=\"#风格\">#</a> 风格</h3>\n<ul>\n<li>场景\n<ul>\n<li>场景模型\n<ul>\n<li>建筑</li>\n<li>植被</li>\n</ul>\n</li>\n<li>场景编辑\n<ul>\n<li>地形</li>\n<li>灯光</li>\n<li>关卡</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>角色\n<ul>\n<li>角色模型\n<ul>\n<li>服饰</li>\n<li>人体</li>\n<li>武器</li>\n</ul>\n</li>\n<li>角色动画\n<ul>\n<li>绑定</li>\n<li>动捕</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3技术美术\"><a class=\"markdownIt-Anchor\" href=\"#3技术美术\">#</a> 3. 技术美术</h2>\n<ul>\n<li>技术美术\n<ul>\n<li>材质</li>\n<li>渲染</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.339Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E5%81%9A%E6%B8%B8%E6%88%8F%E6%89%80%E9%9C%80%E7%9A%84%E5%B2%97%E4%BD%8D.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E5%81%9A%E6%B8%B8%E6%88%8F%E6%89%80%E9%9C%80%E7%9A%84%E5%B2%97%E4%BD%8D.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.337Z",
            "content_html": "<h2 id=\"策划\"><a class=\"markdownIt-Anchor\" href=\"#策划\">#</a> 策划</h2>\n<h2 id=\"美术\"><a class=\"markdownIt-Anchor\" href=\"#美术\">#</a> 美术</h2>\n<h2 id=\"程序\"><a class=\"markdownIt-Anchor\" href=\"#程序\">#</a> 程序</h2>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%83%B3%E6%B3%95/%E9%AB%98%E4%B8%AD%E7%9A%84%E5%A0%B5%E4%BA%BA%E6%B8%B8%E6%88%8F.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%83%B3%E6%B3%95/%E9%AB%98%E4%B8%AD%E7%9A%84%E5%A0%B5%E4%BA%BA%E6%B8%B8%E6%88%8F.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.335Z",
            "content_html": "<p>游戏目标<br>\n 11*11<br>\n 两个玩家面对面，从一边走到另外一边</p>\n<p>可以堵人划墙（一次可以最多划两格），不可以堵死，要么选择堵人，要么选择走。堵人有次数限制</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/Y3/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/Y3/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.334Z",
            "content_html": "<p>在实际的结构中，把触发器分为 ABC 三类，函数分为 WXYZ 四类，它们分别是：</p>\n<p>A：初始化游戏设置以及其他游戏开始时的一次性操作</p>\n<p>B：基于帧计时器相关的整个游戏核心系统</p>\n<p>C：其他自定义事件和入口</p>\n<p>W：可运行调用的丰富单例</p>\n<p>X：系统执行</p>\n<p>Y：核心系统</p>\n<p>Z：返回函数</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.322Z",
            "content_html": "<ol>\n<li>理解什么是游戏设计</li>\n<li>学会系统性的创意方法</li>\n<li>具备工程思维</li>\n<li>成为一个专业的开发者</li>\n<li>参展至少一次，与你的玩家面对面</li>\n<li>![[Pasted image 20230910103638.png]]</li>\n<li>![[Pasted image 20230910103946.png]]</li>\n<li>![[Pasted image 20230910104138.png]]</li>\n<li>![[Pasted image 20230910104303.png]]</li>\n<li>![[Pasted image 20230910104451.png]]</li>\n<li>![[Pasted image 20230910104542.png]]</li>\n<li>![[Pasted image 20230910104948.png]]</li>\n<li>![[Pasted image 20230910105143.png]]</li>\n<li>![[Pasted image 20230910105417.png]]![[Pasted image 20230910105748.png]]</li>\n<li>![[Pasted image 20230910105952.png]]</li>\n<li>![[Pasted image 20230910110442.png]]</li>\n<li></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/SetActive.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/SetActive.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.321Z",
            "content_html": "<p>Setactive 可以激活对象，但如果父对象没有激活，这个时候对子对象用 setactive 无作用</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.321Z",
            "content_html": "<p>如果在 Unity 引擎中的对象中挂在的脚本里。<br>\n有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。<br>\n这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">    public enum emAction\n\n    &#123;\n\n        None&#x3D;0,\n\n        GetUp,&#x2F;&#x2F;1\n\n        Wash,&#x2F;&#x2F;2\n\n        Eat,&#x2F;&#x2F;3\n\n        Work,&#x2F;&#x2F;4\n\n    &#125;\n\n    public emAction mAction &#x3D; emAction.Work;\n    Debug.Log((int)mAction);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们对 <code>mAction</code>  的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。<br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139957.png\" alt=\"Pasted image 20230616154518.png\"></p>\n<p>如果我们在脚本的选项中，选择了 <code>mAction</code>  的<mark>初值</mark>，那么这个值将覆盖脚本代码中的<mark>初始值</mark>（注意，只是初始值）。</p>\n<p>上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 <code>mAction</code>  所附的 Work。所以打印出来的还是 None 的 0。</p>\n",
            "tags": []
        },
        {
            "id": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/2023-09-04.html",
            "url": "https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/2023-09-04.html",
            "title": "",
            "date_published": "2023-10-03T16:01:18.318Z",
            "content_html": "",
            "tags": []
        }
    ]
}