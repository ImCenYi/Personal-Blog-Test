<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>CenYi</title>
        <link>https://imcenyi.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Fri, 20 Oct 2023 23:59:59 +0800</pubDate>
        <lastBuildDate>Fri, 20 Oct 2023 23:59:59 +0800</lastBuildDate>
        <category>study</category>
        <category>AI</category>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/(%E9%9D%A2%E5%90%91AI%E5%AD%A6%E4%B9%A0%EF%BC%89%E9%9B%B6%E6%95%A3%E6%A6%82%E5%BF%B5%EF%BC%88%E5%A4%A7%E5%A4%9A%E4%B8%BA%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C&amp;%E5%9B%9E%E8%B0%83.html</guid>
            <title>零散概念</title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/(%E9%9D%A2%E5%90%91AI%E5%AD%A6%E4%B9%A0%EF%BC%89%E9%9B%B6%E6%95%A3%E6%A6%82%E5%BF%B5%EF%BC%88%E5%A4%A7%E5%A4%9A%E4%B8%BA%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C&amp;%E5%9B%9E%E8%B0%83.html</link>
            <category>study</category>
            <category>AI</category>
            <pubDate>Fri, 20 Oct 2023 23:59:59 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;异步操作asynchronous-operation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步操作asynchronous-operation&#34;&gt;#&lt;/a&gt; 异步操作（Asynchronous Operation）&lt;/h3&gt;
&lt;p&gt;想象一下，你去咖啡店点了一杯咖啡。如果这是一个&lt;strong&gt;同步&lt;/strong&gt;操作，你会站在那里等待咖啡做好，期间你不能做其他事情，直到咖啡递到你手中。但如果是一个&lt;strong&gt;异步&lt;/strong&gt;操作，你点完咖啡后可以找个地方坐下、看书或玩手机，等咖啡做好了，店员会叫你。这样，你不用一直等待，可以利用这段时间做其他事情。&lt;/p&gt;
&lt;p&gt;在计算机编程中，异步操作的概念类似。程序在请求某个需要时间的操作（如读取文件、下载数据或加载场景）时，不会停下来等待操作完成，而是继续执行其他任务。当那个操作完成时，它会得到通知。&lt;/p&gt;
&lt;h3 id=&#34;回调callback&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#回调callback&#34;&gt;#&lt;/a&gt; 回调（Callback）&lt;/h3&gt;
&lt;p&gt;还是上面的咖啡店例子，当你的咖啡做好了，店员会叫你。这个 “叫你” 的动作，就是一个&lt;strong&gt;回调&lt;/strong&gt;。它是咖啡店告诉你：“嘿，你的咖啡好了！”&lt;/p&gt;
&lt;p&gt;在编程中，回调是一个函数或方法，它会在某个任务完成后被自动调用。当你启动一个异步操作时，你可以提供一个回调函数，这样当操作完成（或出现错误）时，这个函数就会被执行。&lt;/p&gt;
&lt;p&gt;例如，你可能会告诉程序：“去加载这个场景，加载完成后，请执行这个回调函数来告诉我。” 当场景加载完成，你的回调函数就会被自动调用，你可以在其中执行一些后续操作，如显示一个 “加载完成” 的提示。&lt;/p&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;异步操作&lt;/strong&gt;就像是你在等待咖啡时可以做其他事情，而不是站在那里等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回调&lt;/strong&gt;就像是咖啡做好后店员叫你的动作，告诉你任务已经完成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;回调函数（Callback Function）是一种在某个操作（通常是异步操作）完成后被自动执行的函数。它的主要目的是允许程序知道某个任务已经完成，并允许程序在任务完成后执行特定的操作或处理。&lt;br&gt;
在异步编程中，由于我们不知道操作何时完成，回调函数提供了一种机制来响应这些完成的操作。当异步操作完成时，回调函数被调用，通常带有操作的结果或任何相关的错误信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，当你从网络下载一个文件时，你可能会提供一个回调函数来处理下载完成后的操作，如保存文件、更新用户界面或处理任何下载过程中的错误。&lt;/p&gt;
&lt;p&gt;简而言之，回调函数就像是一个 “&lt;em&gt;通知&lt;/em&gt;” 或 “&lt;em&gt;警报&lt;/em&gt;”，告诉程序：“嘿，你之前启动的那个操作已经完成了，现在你可以做一些后续的事情了！”&lt;/p&gt;
&lt;h2 id=&#34;协程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协程&#34;&gt;#&lt;/a&gt; &lt;strong&gt;协程&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;协程coroutine&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协程coroutine&#34;&gt;#&lt;/a&gt; 协程（Coroutine）&lt;/h3&gt;
&lt;p&gt;协程是一种编程构造，它扩展了常规的子程序（或函数）的概念。与子程序不同，协程允许多个入口点和暂停及后续恢复执行的能力。&lt;/p&gt;
&lt;p&gt;协程的关键特点是它可以在任何给定的点暂停执行（通常称为 “挂起”），并在稍后的某个时刻从暂停的地方恢复执行。这使得协程非常适合用于异步编程，因为它们可以在等待某些资源（如 I/O 操作、网络请求等）时挂起，而不会阻塞整个程序或线程。&lt;/p&gt;
&lt;h3 id=&#34;协程与异步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协程与异步&#34;&gt;#&lt;/a&gt; 协程与异步&lt;/h3&gt;
&lt;p&gt;协程本身不是异步的，但它们经常被用于异步编程。协程提供了一种更直观、更简洁的方式来处理异步操作，特别是在需要多个异步步骤的情况下。&lt;/p&gt;
&lt;p&gt;例如，在 Python 中， &lt;code&gt;asyncio&lt;/code&gt;  库使用 &lt;code&gt;async&lt;/code&gt;  和 &lt;code&gt;await&lt;/code&gt;  关键字提供了协程支持，使得异步编程变得更加简单和直观。&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结论&#34;&gt;#&lt;/a&gt; 结论&lt;/h3&gt;
&lt;p&gt;协程本身不等同于异步，但它们为异步编程提供了强大的工具。通过使用协程，开发者可以更容易地编写异步代码，而不必深入了解回调、Promise 或其他复杂的异步模式。&lt;/p&gt;
&lt;h2 id=&#34;协程多线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协程多线程&#34;&gt;#&lt;/a&gt; &lt;strong&gt;协程 &amp;amp; 多线程&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;协程coroutine-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协程coroutine-2&#34;&gt;#&lt;/a&gt; 协程（Coroutine）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;轻量级&lt;/strong&gt;：协程是程序中的构造，不依赖于操作系统的线程。因此，创建和切换协程的开销通常比线程小得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协作式多任务&lt;/strong&gt;：协程是协作式的，意味着在任何给定时间只有一个协程在执行。一个协程必须显式地让出控制权，以便其他协程可以运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有并行性&lt;/strong&gt;：由于协程是在单个线程上运行的，它们不会真正并行执行。但它们可以用于异步操作，如 I/O 操作，而不会阻塞主线程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制流&lt;/strong&gt;：协程可以保存其执行状态（例如局部变量的值），这意味着它们可以在稍后的某个时刻从暂停的地方恢复执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多线程multithreading&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程multithreading&#34;&gt;#&lt;/a&gt; 多线程（Multithreading）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;重量级&lt;/strong&gt;：线程是操作系统级别的实体，因此创建、同步和切换线程的开销通常比协程大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抢占式多任务&lt;/strong&gt;：线程是抢占式的，这意味着操作系统可以在任何时候中断一个线程并开始执行另一个线程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;真正的并行性&lt;/strong&gt;：在多核处理器上，多个线程可以真正并行执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步问题&lt;/strong&gt;：由于线程可以并行执行，它们可能会访问和修改共享资源，这可能导致竞态条件和其他同步问题。因此，线程间的同步和通信通常比协程更复杂。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协程&lt;/strong&gt;是轻量级的、协作式的并发构造，适合于 I/O 密集型任务和需要高效上下文切换的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多线程&lt;/strong&gt;是重量级的、抢占式的并发构造，适合于 CPU 密集型任务和需要真正并行执行的场景。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E7%A4%BE%E6%8B%9B.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E7%A4%BE%E6%8B%9B.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;职位描述 1. 了解项目愿景，与游戏策划、美术、程序员和 QA 合作，设计和完善游戏开发工具，提升团队生产效率。 2. 理解游戏开发美术、程序、策划各职能的工作流程，发掘流程痛点，提供解决方案并执行解决方案。 3. 协助团队建立标准化的生产流程，起草与更新生产管线流程规范。 4. 负责相关文档的编写，为开发团队提供指导和培训。 5. 探索新的领域和机会，并能够在生产管线流程中落地。&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;5 年以上游戏设计或开发经验； 2. 了解游戏开发流程，有中重度项目的开发经验者优先； 3. 熟练掌握游戏引擎及编辑器的使用； 4. 积极主动地指导设计相关工作； 5. 善于内部沟通、团队合作和知识分享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;作为一名资深技术策划，你将在 3A 单机项目中担任技术和设计之间的桥梁，保证所在小组的设计意图能以符合项目进度需要的方式被制作到游戏里，并以 3A 标准向前迭代并最终交付。 工作内容： - 为团队中的游戏策划提供技术指导和支持，保证策划可以快速制作玩法原型验证设计意图 - 调研分析市场头部产品的技术解决方案，与团队合作制定玩法模块的生产管线，包括不限于技术方案、相关工具链、生产规范等 - 给团队中的游戏策划进行生产规范培训，并保证其产出数据符合规范 - 建立管线监控、反馈、改进机制，持续监控生产管线的运行，保证产出内容符合项目计划与需求&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;p&gt;- 热爱 3A 游戏，对 3A 级别游戏有充分深入的了解，尤其是大型 3A 产品&lt;br&gt;
 - 对游戏研发充满热情，长期深度钻研业界顶尖品质开发技术&lt;br&gt;
 - 有充分的 3A 游戏开发经验&lt;br&gt;
 1）至少 1 款大型 3A 游戏的技术策划经验&lt;br&gt;
 2）5 年以上游戏行业从业经验，或 2 款及以上上线或发售游戏参与&lt;br&gt;
 - 熟悉 3A 游戏引擎（公开引擎或自研）使用和迭代&lt;br&gt;
 1）至少 2 年 UE 引擎使用经验&lt;br&gt;
 2）拥有 UE 引擎 2A 或以上项目研发经验优先&lt;br&gt;
 - 拥有模块技术负责人经验优先&lt;br&gt;
 - 拥有英语沟通能力优先&lt;/p&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;1、与程序、策划协作，持续提出和完善编辑器、游戏脚本、AI 行为树等相关功能；&lt;br&gt;
2、制定和执行数据表、游戏脚本、AI 行为树相关规范，为其他策划提供技术支持；&lt;br&gt;
3、协助其他策划与其他职能沟通和制定设计需求的技术解决方案；&lt;br&gt;
4、具备一定的关卡设计和系统设计能力，能独立完成关卡原型、游戏系统的设计；&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;p&gt;1、完整参与过 1 款手机或主机游戏的开发；&lt;br&gt;
2、在技术策划、关卡策划或系统策划方面有 2 年以上工作经验；&lt;br&gt;
3、有良好的编程能力，熟悉 Python、Lua、C# 等任一编程语言；&lt;br&gt;
4、熟悉流行商业游戏开发引擎，如 Unity，Unreal 4 等；&lt;br&gt;
5、游戏经历丰富，喜欢 FPS、TPS 品类者优先，有 MOD 制作经验者优先。&lt;/p&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;1、针对提升游戏表现力的前沿技术进行攻坚，包括但不仅限于：剧情、关卡、AI、角色、运动、镜头、打击感等；&lt;br&gt;
2、以开发高品质游戏为目的，打造高效率、高质量的游戏生产线，设计开发相应的生产工具以及开发流程；&lt;br&gt;
3、指导策划、程序、美术、动画、音频等部门具体实施游戏所需功能和整合数据，从全局的角度把控游戏开发的整体流程；&lt;br&gt;
4、为游戏策划以及其他相关部门提供技术支持，包括编写技术文档，提供指导和培训。&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;p&gt;1、有丰富的游戏项目经验，熟悉游戏策划的工作方式和游戏开发的各个环节； 2、有较强的逻辑思维能力，具备软件工程学基本知识和一定的代码能力，熟悉 C# 语言，具有丰富的商业引擎的使用经验（Unity/Unreal）；&lt;br&gt;
3、具备优秀的学习能力和独立解决问题的能力；良好的沟通能力、团队协作能力。 加分项&lt;br&gt;
 1、具备完整的大型项目开发经验和上市产品；&lt;br&gt;
2、有丰富的关卡策划，系统策划和数值策划相关的开发经验。&lt;/p&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;1、维护游戏内主要内容管线，构建易用、直观、高效的工具链条解决内容产出的质量和效率问题，推进制作工具不断迭代优化。&lt;br&gt;
2、针对新的制作内容，根据设计师思路构建设计和技术方案，推动实现落地，并为后续开发建立设计和技术标准 。&lt;br&gt;
3、关注策划日常的工作流程，承担与开发人员的沟通桥梁，对于出现的跨职能问题主动推进解决。&lt;br&gt;
4、关心最新的游戏制作技术，促进公司公用工具和技术在本项目内的应用，组织新工具和技术内容的推广和教学 。&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;p&gt;1、维护游戏内主要内容管线，构建易用、直观、高效的工具链条解决内容产出的质量和效率问题，推进制作工具不断迭代优化。&lt;br&gt;
2、针对新的制作内容，根据设计师思路构建设计和技术方案，推动实现落地，并为后续开发建立设计和技术标准。&lt;br&gt;
3、关注策划日常的工作流程，承担与开发人员的沟通桥梁，对于出现的跨职能问题主动推进解决。&lt;br&gt;
4、关心最新的游戏制作技术，促进公司公用工具和技术在本项目内的应用，组织新工具和技术内容的推广和教学 。&lt;/p&gt;
&lt;p&gt;职位描述&lt;/p&gt;
&lt;p&gt;1. 负责面向玩家的 UGC 编辑器产品的功能开发、体验优化、资源维护等&lt;br&gt;
 2. 面向开发组内部，对接策划和程序，开发供策划使用的编辑器工具，并优化工具易用性、提升工具效率&lt;br&gt;
 3. 承接关卡策划的新机制需求，对接程序进行开发实现和封装集成，增强各功能模块的易用性、易扩展性和易维护性&lt;/p&gt;
&lt;p&gt;职位要求&lt;/p&gt;
&lt;p&gt;1.3 年以上技术策划经验，有编辑器开发经验&lt;br&gt;
 2. 熟悉游戏开发的全流程，对于技术实现方案能深入理解，逻辑能力强，思考全面&lt;br&gt;
 3. 熟悉《我的世界》、《马里奥制造》、《Roblox》等 UGC 游戏，或 War3、Dota2、星际 2 等编辑器者优先&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E6%95%85%E4%BA%8B%E8%AE%BE%E8%AE%A1.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本篇是关于游戏剧情如何设计的笔记和一些心得。&lt;br&gt;
参考：&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1jV4y1H7dU/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;amp;vd_source=cdfb79b63b1f2a6e293b5958a46cbf20&#34;&gt;怎样写好一个故事&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021413507.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;两个理论支柱构建故事&lt;br&gt;
冲突理论&lt;br&gt;
渴望&lt;br&gt;
行动&lt;br&gt;
障碍&lt;br&gt;
故事曲线（起承转合）&lt;br&gt;
阐述&lt;br&gt;
上升动作&lt;br&gt;
危机&lt;br&gt;
高潮&lt;br&gt;
下降动作&lt;/p&gt;
&lt;p&gt;怎样写好一个古水&lt;br&gt;
三幕式&lt;br&gt;
描述基本世界观和任务关系的【建置】&lt;br&gt;
建置 - 近战 - 转折 - 解决&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021506430.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021507016.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021507814.png&#34; alt&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021508256.png&#34; alt&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021509705.png&#34; alt&gt;&lt;br&gt;
不同序列上对应的&lt;br&gt;
 1. 渴望&lt;br&gt;
 2. 行动&lt;br&gt;
 3. 障碍&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021513923.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021513611.png&#34; alt&gt;&lt;br&gt;
模板&lt;/p&gt;
&lt;h1 id=&#34;剧情架构参考&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#剧情架构参考&#34;&gt;#&lt;/a&gt; 剧情架构参考&lt;/h1&gt;
&lt;h2 id=&#34;1-开场&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-开场&#34;&gt;#&lt;/a&gt; 1. 开场&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现状&lt;/strong&gt;：卢迪厄斯，一个在地球上因交通事故丧生的 34 岁无职游戏宅，转生到了一个充满魔法和剑术的异世界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本任务与关系&lt;/strong&gt;：他决心在这个新的世界里弥补前世的遗憾，变得更强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无关痛痒的设定&lt;/strong&gt;：他的父亲保罗是一位出色的剑士，但与他的关系并不亲近。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514616.png&#34; alt=&#34;开场插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-切入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-切入&#34;&gt;#&lt;/a&gt; 2. 切入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;深化角色设定&lt;/strong&gt;：卢迪厄斯展示了他对魔法的浓厚兴趣和对成为一名魔法师的渴望。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欲望&lt;/strong&gt;：他希望能够进入魔法学校，与其他魔法师一同学习和成长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;困境&lt;/strong&gt;：由于家庭经济问题，他无法支付学费。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514072.png&#34; alt=&#34;切入插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-激励&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-激励&#34;&gt;#&lt;/a&gt; 3. 激励&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;突发事件&lt;/strong&gt;：卢迪厄斯得知家里请了家教来教他魔法，这让他有了学习魔法的机会。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021514535.png&#34; alt=&#34;激励插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-进展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-进展&#34;&gt;#&lt;/a&gt; 4. 进展&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;卢迪厄斯在家教的指导下，开始学习魔法，并取得了一些进步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚假的胜利&lt;/strong&gt;：他学到了很多魔法知识和技巧，觉得自己已经变得更强了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021517880.png&#34; alt=&#34;进展插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-转折&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-转折&#34;&gt;#&lt;/a&gt; 5. 转折&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真相时刻&lt;/strong&gt;：卢迪厄斯被意外传送到了魔界，面临着未知的危险和挑战。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021519613.png&#34; alt=&#34;转折插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-再转&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-再转&#34;&gt;#&lt;/a&gt; 6. 再转&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;卢迪厄斯决定勇敢面对，开始寻找出魔界的方法，同时也在这个过程中不断地学习和成长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021523959.png&#34; alt=&#34;再转插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-危机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-危机&#34;&gt;#&lt;/a&gt; 7. 危机&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在魔界，卢迪厄斯遇到了强大的敌人和各种困难，他被逼到了绝境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021524699.png&#34; alt=&#34;危机插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-导入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-导入&#34;&gt;#&lt;/a&gt; 8. 导入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;卢迪厄斯不放弃，他继续寻找出路，同时也在与敌人的战斗中不断磨练自己。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021525070.png&#34; alt=&#34;导入插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-高潮&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-高潮&#34;&gt;#&lt;/a&gt; 9. 高潮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;卢迪厄斯终于找到了出魔界的方法，并且在与敌人的最终决战中展示了他的成长和实力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插图&lt;/strong&gt;：&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202310021527773.png&#34; alt=&#34;高潮插图&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-结局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-结局&#34;&gt;#&lt;/a&gt; 10. 结局&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;卢迪厄斯成功返回了原来的世界，他不仅变得更强，也学会了珍惜生活和他人。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是根据《无职转生》的剧情进行的补充和润色，希望对您有所帮助！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Markdown/%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Markdown/%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;明天要做的事&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;吃饭&lt;/li&gt;
&lt;li&gt;睡觉&lt;/li&gt;
&lt;li&gt;打豆豆&lt;br&gt;
明天要做的事&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; 吃饭睡觉&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; 打豆豆&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-c#&#34; data-language=&#34;c#&#34;&gt;&lt;code class=&#34;language-c#&#34;&gt;int main()
&amp;#123;
    return 0;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; ：公共的，可以被任何代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected internal&lt;/code&gt; ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;internal&lt;/code&gt; ：内部的，可以被同一程序集中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; ：私有的，只能被同一类中的代码访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 &lt;code&gt;private&lt;/code&gt;  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 &lt;code&gt;public&lt;/code&gt;  可以使其他代码更容易地使用它们，从而提高代码的可维护性。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E6%A8%A1%E5%BC%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1-基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本概念&#34;&gt;#&lt;/a&gt; 1、基本概念&lt;/h2&gt;
&lt;p&gt;单例模式只有一个实例，而且只能在类的内部实例化一次，不可以在外部实例化。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139796.png&#34; alt=&#34;Pasted image 20230620180951.png&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230140156.png&#34; alt=&#34;Pasted image 20230620181011.png&#34;&gt;&lt;br&gt;
 上面是错误示范&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141887.png&#34; alt=&#34;Pasted image 20230620181325.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;应该使用MyClass3这个类名而不是myClass3这个实例
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141676.png&#34; alt=&#34;Pasted image 20230621154506.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;抽象类不可被实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象类不可被实例化&#34;&gt;#&lt;/a&gt; 抽象类不可被实例化&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141139.png&#34; alt=&#34;Pasted image 20230621154709.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;抽象类之中的抽象函数必须在子类写好实现的方法体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象类之中的抽象函数必须在子类写好实现的方法体&#34;&gt;#&lt;/a&gt; 抽象类之中的抽象函数必须在&lt;mark&gt;子类写好实现的方法体&lt;/mark&gt;&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;/*  抽象类&lt;/p&gt;
&lt;p&gt;1. 抽象类不可以被实例化&lt;/p&gt;
&lt;p&gt;2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体&lt;/p&gt;
&lt;p&gt;3. 抽象类的子类必须实现抽象类中的所有抽象函数&lt;/p&gt;
&lt;p&gt;4. 抽象类中可以有非抽象函数&lt;/p&gt;
&lt;p&gt;5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数&lt;/p&gt;
&lt;p&gt;6. 非抽象类可以继承抽象类，但是子类必须实现所有抽象函数&lt;/p&gt;
&lt;p&gt;*/&lt;/p&gt;
&lt;h2 id=&#34;密封类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密封类&#34;&gt;#&lt;/a&gt; 密封类&lt;/h2&gt;
&lt;p&gt;1. 密封类不可以被继承（他只能是子类）&lt;/p&gt;
&lt;p&gt;2. 密封类不能是抽象的。sealed 和 abstract 是互斥的&lt;/p&gt;
&lt;p&gt;（其实很好理解，密封类不能作为基类，只能是子类&lt;/p&gt;
&lt;p&gt;而抽象类虽然可以既是基类又是子类，但是其中的抽&lt;/p&gt;
&lt;p&gt;象函数是不能在抽象类中写方法体的，必须要在子类&lt;/p&gt;
&lt;p&gt;中实现，这就和密封类的定义【不可被继承，不能有子类】相违背了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142194.png&#34; alt=&#34;Pasted image 20230621161128.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;上述报错表明了抽象类和封闭类是互斥的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上述报错表明了抽象类和封闭类是互斥的&#34;&gt;#&lt;/a&gt; 上述报错，表明了抽象类和封闭类是互斥的&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;    void Func1()

    &amp;#123;

        int value1&amp;#x3D;15;

        if(value1&amp;gt;5)

        &amp;#123;

            Debug.Log(&amp;quot;value1 is greater than 5&amp;quot;);&amp;#x2F;&amp;#x2F;value1满足了第一个条件就执行了，输出语句

        &amp;#125;

        else if(value1&amp;gt;10)

        &amp;#123;

            Debug.Log(&amp;quot;value1 is greater than 10&amp;quot;);&amp;#x2F;&amp;#x2F;由于第一个已经执行了，就终端这一串条件语句，所以虽然满足条件但没有执行

        &amp;#125;

        else

        &amp;#123;

            Debug.Log(&amp;quot;value1 is less than 5&amp;quot;);

        &amp;#125;

    &amp;#125;

&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;条件检测是线性的只要满足前面的就不会执行后面的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件检测是线性的只要满足前面的就不会执行后面的&#34;&gt;#&lt;/a&gt; 条件检测是线性的，只要满足前面的就不会执行后面的&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt; enum emAction
&amp;#123;
    GetUp,
    Wash,
    Eat,
    Work,
&amp;#125;

public emAction Action;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这串代码出现了一个错误，即 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符与 &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符不匹配。具体来说， &lt;code&gt;emAction&lt;/code&gt;  枚举类型是默认的（即没有访问修饰符），而 &lt;code&gt;Action&lt;/code&gt;  字段是公共的（ &lt;code&gt;public&lt;/code&gt; ）。&lt;/p&gt;
&lt;h3 id=&#34;这违反了c的访问性限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这违反了c的访问性限制&#34;&gt;#&lt;/a&gt; 这违反了 C# 的访问性限制&lt;/h3&gt;
&lt;p&gt;因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符更改为公共的（ &lt;code&gt;public&lt;/code&gt; ）或将 &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符更改为默认 (private 级别) 的（即删除 &lt;code&gt;public&lt;/code&gt;  关键字）。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;enum emAction&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 &lt;code&gt;private&lt;/code&gt;  访问等级，是最低一级。&lt;br&gt;
&lt;mark&gt;关于访问等级先后详细看 [[访问等级]]&lt;/mark&gt;&lt;br&gt;
 如果 &lt;code&gt;Action&lt;/code&gt;  字段是 &lt;code&gt;public&lt;/code&gt; ，则将 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的可访问性设置为 &lt;code&gt;private&lt;/code&gt;  是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。&lt;/p&gt;
&lt;h3 id=&#34;那为什么c要有这个访问性限制呢-其实也不难理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#那为什么c要有这个访问性限制呢-其实也不难理解&#34;&gt;#&lt;/a&gt; 那为什么 C# 要有这个访问性限制呢。其实也不难理解&lt;/h3&gt;
&lt;p&gt;C# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。&lt;/p&gt;
&lt;p&gt;例如，在这个示例中， &lt;code&gt;mAction&lt;/code&gt;  字段的访问修饰符是 &lt;code&gt;public&lt;/code&gt; ，而 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的访问修饰符是默认的（即 &lt;code&gt;private&lt;/code&gt; ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 &lt;code&gt;emAction&lt;/code&gt;  枚举类型的可访问性低于 &lt;code&gt;mAction&lt;/code&gt;  字段的可访问性。&lt;/p&gt;
&lt;p&gt;说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95%E3%80%81Event%E4%BA%8B%E4%BB%B6%E3%80%81%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95%E3%80%81Event%E4%BA%8B%E4%BB%B6%E3%80%81%E5%A4%9A%E6%92%AD%E5%A7%94%E6%89%98.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Action%E5%A7%94%E6%89%98.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Action%E5%A7%94%E6%89%98.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;action的委托不能有返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#action的委托不能有返回值&#34;&gt;#&lt;/a&gt; Action 的委托不能有返回值&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;using System.Collections;

using System.Collections.Generic;

using UnityEngine;

using System;

  

&amp;#x2F;&amp;#x2F;Action是一个委托，它是没有返回值的泛型委托，它可以用来替代没有参数和返回值的委托

public class Delegate_ex : MonoBehaviour

&amp;#123;

    public delegate void Mydelegate1(int a,int b);

    public delegate int Mydelegate2();

    public delegate void Mydelegate3&amp;lt;T&amp;gt;(T a);

    &amp;#x2F;&amp;#x2F; Start is called before the first frame update

    void Start()

    &amp;#123;

        Mydelegate1 showAdd &amp;#x3D; Add;

        showAdd(1,2);

        Action showAdd2 &amp;#x3D; Subtract;

        showAdd2();

        Action&amp;lt;int,int&amp;gt; showAdd3 &amp;#x3D; Add;

        showAdd3(1,2);

        Mydelegate2 Showten &amp;#x3D; ten;

        int a&amp;#x3D;Showten();

        Debug.Log(a);

        Mydelegate3&amp;lt;string&amp;gt;show3&amp;#x3D;Show3;

        show3(&amp;quot;Show3&amp;quot;);

        Action&amp;lt;string&amp;gt; show4 &amp;#x3D; Show3;

        show4(&amp;quot;Hello World&amp;quot;);

        Action show5 &amp;#x3D; Show4;&amp;#x2F;&amp;#x2F;Action是一个委托，它是没有返回值的泛型委托，它可以用来替代没有参数和返回值的委托

        Mydelegate2 show6 &amp;#x3D; Show4;

        int b&amp;#x3D;show6();

        Debug.Log(b);

    &amp;#125;

    void Update()

    &amp;#123;

    &amp;#125;

    public void Add(int a,int b)

    &amp;#123;

        Debug.Log(a+b);

    &amp;#125;

    public void Subtract()

    &amp;#123;

        Debug.Log(&amp;quot;Subtract&amp;quot;);

    &amp;#125;

    public int ten()

    &amp;#123;

        return 10;

    &amp;#125;

    public void Show3(string a)

    &amp;#123;

        Debug.Log(a);

    &amp;#125;

    public int Show4()（这个语段是错误的）&amp;#x2F;&amp;#x2F;Action委托不可以用这个函数，因为Action委托是没有返回值的泛型委托，而这个函数有返回值

    &amp;#123;

        return 114514;

    &amp;#125;

&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;action-是没有返回值的泛型委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#action-是没有返回值的泛型委托&#34;&gt;#&lt;/a&gt; Action 是&lt;mark&gt;没有返回值&lt;/mark&gt;的泛型委托&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Func%20%E5%A7%94%E6%89%98.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/%E5%A7%94%E6%89%98/Func%20%E5%A7%94%E6%89%98.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Func 必须要返回值&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/StringBuilder.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/StringBuilder.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/String.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/String.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/FileStream.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/IO%E6%93%8D%E4%BD%9C/FileStream.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;[[抽象方法的方法体只能在子类中实现，而不能写在基类中]]&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;mark&gt;实际上虚函数就类似于初省值&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&#34;抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现&#34;&gt;#&lt;/a&gt; &lt;mark&gt;抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现&lt;/mark&gt;&lt;/h3&gt;
&lt;p&gt;[[抽象方法的方法体只能在子类中实现，而不能写在基类中]]&lt;br&gt;
 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。&lt;/li&gt;
&lt;li&gt;抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。&lt;/li&gt;
&lt;li&gt;抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;abstract class Shape

&amp;#123;

    public abstract double GetArea();&amp;#x2F;&amp;#x2F;这里的方法体必须是空

&amp;#125;

class Rectangle : Shape

&amp;#123;

    public double Width &amp;#123; get; set; &amp;#125;

    public double Height &amp;#123; get; set; &amp;#125;

    public override double GetArea()&amp;#x2F;&amp;#x2F;子类写入方法体实现

    &amp;#123;

        return Width * Height;

    &amp;#125;

&amp;#125;
class Circle : Shape

&amp;#123;

    public double Radius &amp;#123; get; set; &amp;#125;

    public override double GetArea(）

    &amp;#123;

        return Math.PI * Radius * Radius;

    &amp;#125;

&amp;#125;

class Square : Shape

&amp;#123;

    public double Side &amp;#123; get; set; &amp;#125;

    public override double GetArea()

    &amp;#123;

        return Side * Side;

    &amp;#125;

&amp;#125;

class Triangle : Shape

&amp;#123;

    public double Base &amp;#123; get; set; &amp;#125;

    public double Height &amp;#123; get; set; &amp;#125;

    public override double GetArea()

    &amp;#123;

        return 0.5 * Base * Height;

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Shape shape1 &amp;#x3D; new Rectangle &amp;#123; Width &amp;#x3D; 10, Height &amp;#x3D; 20 &amp;#125;;

Shape shape2 &amp;#x3D; new Circle &amp;#123; Radius &amp;#x3D; 5 &amp;#125;;

Shape shape3 &amp;#x3D; new Square &amp;#123; Side &amp;#x3D; 10 &amp;#125;;

Shape shape4 &amp;#x3D; new Triangle &amp;#123; Base &amp;#x3D; 10, Height &amp;#x3D; 5 &amp;#125;;

Console.WriteLine(shape1.GetArea()); &amp;#x2F;&amp;#x2F; 输出：200

Console.WriteLine(shape2.GetArea()); &amp;#x2F;&amp;#x2F; 输出：78.53981633974483

Console.WriteLine(shape3.GetArea()); &amp;#x2F;&amp;#x2F; 输出：100

Console.WriteLine(shape4.GetArea()); &amp;#x2F;&amp;#x2F; 输出：25&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个抽象类 &lt;code&gt;Shape&lt;/code&gt;  和四个子类 &lt;code&gt;Rectangle&lt;/code&gt; 、 &lt;code&gt;Circle&lt;/code&gt; 、 &lt;code&gt;Square&lt;/code&gt;  和 &lt;code&gt;Triangle&lt;/code&gt; ，它们都重写了 &lt;code&gt;GetArea&lt;/code&gt;  方法。 &lt;code&gt;GetArea&lt;/code&gt;  方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 &lt;code&gt;GetArea&lt;/code&gt;  方法，输出了它们的面积。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;abstract&lt;/code&gt;  和 &lt;code&gt;virtual&lt;/code&gt;  都是 C# 中用于实现多态的关键字，它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  用于声明抽象方法，它必须在派生类中进行实现，而 &lt;code&gt;virtual&lt;/code&gt;  用于声明虚方法，它可以在派生类中进行重写，但不是必须的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  方法没有实现，只有方法签名，而 &lt;code&gt;virtual&lt;/code&gt;  方法有默认的实现，可以在基类中提供。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;  方法只能在抽象类中声明，而 &lt;code&gt;virtual&lt;/code&gt;  方法可以在普通的类中声明。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;封装的主要目的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装的主要目的&#34;&gt;#&lt;/a&gt; 封装的主要目的&lt;/h2&gt;
&lt;p&gt;封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。&lt;/p&gt;
&lt;p&gt;封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。&lt;/p&gt;
&lt;p&gt;在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CsharpOOP/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;code&gt;this&lt;/code&gt;  和 &lt;code&gt;base&lt;/code&gt;  都是 C# 中的关键字，它们的主要区别在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 &lt;code&gt;this&lt;/code&gt;  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt;  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 &lt;code&gt;base&lt;/code&gt;  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是一个示例，演示了如何使用 &lt;code&gt;this&lt;/code&gt;  和 &lt;code&gt;base&lt;/code&gt;  关键字：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;class Person

&amp;#123;

    public string Name &amp;#123; get; set; &amp;#125;

    public int Age &amp;#123; get; set; &amp;#125;

    public Person(string name, int age)

    &amp;#123;

        this.Name &amp;#x3D; name;

        this.Age &amp;#x3D; age;

    &amp;#125;

&amp;#125;

class Student : Person

&amp;#123;

    public string School &amp;#123; get; set; &amp;#125;

    public Student(string name, int age, string school) : base(name, age)

    &amp;#123;

        this.School &amp;#x3D; school;

    &amp;#125;

    public void Study()

    &amp;#123;

        Console.WriteLine(&amp;quot;&amp;#123;0&amp;#125; is studying at &amp;#123;1&amp;#125;.&amp;quot;, this.Name, this.School);

    &amp;#125;

    public void ShowInfo()

    &amp;#123;

        Console.WriteLine(&amp;quot;Name: &amp;#123;0&amp;#125;, Age: &amp;#123;1&amp;#125;, School: &amp;#123;2&amp;#125;&amp;quot;, this.Name, this.Age, this.School);

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Student student &amp;#x3D; new Student(&amp;quot;Tom&amp;quot;, 18, &amp;quot;ABC School&amp;quot;);

student.Study(); &amp;#x2F;&amp;#x2F; 输出：Tom is studying at ABC School.

student.ShowInfo(); &amp;#x2F;&amp;#x2F; 输出：Name: Tom, Age: 18, School: ABC School&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个 &lt;code&gt;Person&lt;/code&gt;  类和一个 &lt;code&gt;Student&lt;/code&gt;  类， &lt;code&gt;Student&lt;/code&gt;  类继承自 &lt;code&gt;Person&lt;/code&gt;  类。在 &lt;code&gt;Person&lt;/code&gt;  类中，我们定义了一个构造函数，使用 &lt;code&gt;this&lt;/code&gt;  关键字来引用当前对象的成员变量。在 &lt;code&gt;Student&lt;/code&gt;  类中，我们定义了一个构造函数，使用 &lt;code&gt;base&lt;/code&gt;  关键字来调用基类的构造函数。在 &lt;code&gt;Student&lt;/code&gt;  类中，我们还定义了两个方法 &lt;code&gt;Study&lt;/code&gt;  和 &lt;code&gt;ShowInfo&lt;/code&gt; ，分别使用 &lt;code&gt;this&lt;/code&gt;  关键字和 &lt;code&gt;base&lt;/code&gt;  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 &lt;code&gt;Student&lt;/code&gt;  对象，并调用了它的 &lt;code&gt;Study&lt;/code&gt;  和 &lt;code&gt;ShowInfo&lt;/code&gt;  方法，输出了相应的信息。&lt;/p&gt;
&lt;p&gt;总的来说， &lt;code&gt;this&lt;/code&gt;  关键字用于引用当前对象， &lt;code&gt;base&lt;/code&gt;  关键字用于引用基类对象。它们的应用场景不同， &lt;code&gt;this&lt;/code&gt;  关键字通常用于访问当前对象的成员， &lt;code&gt;base&lt;/code&gt;  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/CS61A/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;class Base 
&amp;#123; 
	public: &amp;#x2F;&amp;#x2F; 公有成员 
	protected: &amp;#x2F;&amp;#x2F; 受保护成员 
	private: &amp;#x2F;&amp;#x2F; 私有成员 
&amp;#125;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1public&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1public&#34;&gt;#&lt;/a&gt; 1.public&lt;/h2&gt;
&lt;p&gt;public 成员，被称为公有成员，是在类外可以访问的，可以不使用任何成员函数等，来直接调用 public 成员。&lt;/p&gt;
&lt;h2 id=&#34;2protected&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2protected&#34;&gt;#&lt;/a&gt; 2.protected&lt;/h2&gt;
&lt;h2 id=&#34;3private&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3private&#34;&gt;#&lt;/a&gt; 3.private&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;默认情况下，没有特别写访问修饰符的成员变量都是 private&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;strong&gt; 私有&lt;/strong&gt;成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常规转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常规转换&#34;&gt;#&lt;/a&gt; 常规转换&lt;/h1&gt;
&lt;h2 id=&#34;1隐式类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1隐式类型转换&#34;&gt;#&lt;/a&gt; 1. 隐式类型转换&lt;/h2&gt;
&lt;p&gt;而隐式是&lt;a href=&#34;https://zhidao.baidu.com/search?word=%E7%BC%96%E8%AF%91%E5%99%A8&amp;amp;fr=iknow_pc_qb_highlight&#34;&gt;编译器&lt;/a&gt;自动转换的，一般同一&lt;a href=&#34;https://zhidao.baidu.com/search?word=%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&amp;amp;fr=iknow_pc_qb_highlight&#34;&gt;数据类型&lt;/a&gt;（如 byte,int,float,double），由低级转为高级为隐式（如 int 转为 float 或 double）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2显示类型转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2显示类型转换&#34;&gt;#&lt;/a&gt; 2. 显示类型转换&lt;/h2&gt;
&lt;p&gt;而高级转为低级为强制类型转换，即显式转换，须用户在代码中写的（如 float 转为 int）。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;四种类型转换方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四种类型转换方式&#34;&gt;#&lt;/a&gt; 四种类型转换方式&lt;/h1&gt;
&lt;p&gt;static_cast&lt;br&gt;
dynamic_cast&lt;br&gt;
const_cast&lt;br&gt;
reinterpret_cast&lt;/p&gt;
&lt;h2 id=&#34;static_cast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static_cast&#34;&gt;#&lt;/a&gt; static_cast&lt;/h2&gt;
&lt;p&gt;static_cast 用于显式转换一个表达式的类型。 在将 static_cast 应用于 void* 时，会执行指针的类型转换，将其转换为目标类型指针。&lt;br&gt;
・	应用场景：&lt;br&gt;
・	转换数值类型（如 int 转换为 double）&lt;br&gt;
・	转换指针类型（如将 Base* 转换为 Derived*）&lt;br&gt;
・	转换引用类型（例如，将 char&amp;amp; 转换为 int&amp;amp;）&lt;/p&gt;
&lt;h2 id=&#34;dynamic_cast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dynamic_cast&#34;&gt;#&lt;/a&gt; dynamic_cast&lt;/h2&gt;
&lt;p&gt;dynamic_cast 用于将一个指向基类的指针或引用转换为指向派生类的指针或引用。&lt;br&gt;
・	应用场景：&lt;br&gt;
・	用于在运行时动态检测对象实际的派生类型。&lt;br&gt;
・	通常用于运行多态类型。&lt;/p&gt;
&lt;h2 id=&#34;const_cast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const_cast&#34;&gt;#&lt;/a&gt; const_cast&lt;/h2&gt;
&lt;p&gt;const_cast 用于去除写保护属性，可以通过该方式去掉类型的 const 或 volatile 属性。&lt;br&gt;
・	应用场景：&lt;br&gt;
・	用于在修改对象的同时维护其类型的常量性。&lt;/p&gt;
&lt;h2 id=&#34;reinterpret_cast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reinterpret_cast&#34;&gt;#&lt;/a&gt; reinterpret_cast&lt;/h2&gt;
&lt;p&gt;reinterpret_cast 是一种最不安全但最灵活的类型转换，它可以将任何指针转换为任何其他类型的指针。&lt;br&gt;
・	应用场景：&lt;br&gt;
・	用于在底层系统编程和平台特定代码中。&lt;br&gt;
需要注意的是，不同的类型转换方式在不同情况下可能导致不同的结果，并且这些方式的使用具有一定的风险和限制。在进行类型转换时，请一定要仔细检查您的代码，以确保它是正确的和安全的。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E6%9C%AA%E5%91%BD%E5%90%8D.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E6%9C%AA%E5%91%BD%E5%90%8D.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/C%20C++%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/C%20C++%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;参考：&lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/chen_z_p/article/details/105352547&#34;&gt;我终于把 C++ 多文件编程理解透彻了_czpcalm 的博客 - CSDN 博客&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%88%9D%E8%AF%86C++.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%88%9D%E8%AF%86C++.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;命名空间方法的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命名空间方法的使用&#34;&gt;#&lt;/a&gt; 命名空间方法的使用&lt;/h2&gt;
&lt;h3 id&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; std&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引入命名域，如果没有引入命名域，则在 cout 以及 cin 都需要写成&lt;br&gt;
 std::cout&lt;br&gt;
std::cin‘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间的作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我们知道 C++ 是一个支持面向对象开发的语言，那么在类的定义的时候，我们需要抽象出物体（这一类物体的属性），但是实际情况下，不同类的物品在抽象的时候，可能会有相同定义的属性，比如在游戏当中，玩家有血量 HP ，敌人同样也有血量 HP，那如果定义变量的时候都定义 &lt;code&gt;HP&lt;/code&gt;  ，将会产生冲突，命名空间就很好地解决了这一点。&lt;/p&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; Player
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; hp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; Enemy
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;float&lt;/span&gt; hp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; main
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
	Player&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;hp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	Enemy&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;hp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述例子中，我分别创建了两个命名空间 “ &lt;code&gt;Player&lt;/code&gt; ”，“ &lt;code&gt;Enemy&lt;/code&gt; ”, 我在调用他们的时候都必须要在变量前面提前使用作用域限定符号 ==：：==。&lt;/p&gt;
&lt;p&gt;如此如做就对变量进行了很好地区分。同时比起直接该变量名去解决冲突，也提高了可读性和易维护性。&lt;/p&gt;
&lt;h4 id=&#34;一些奇怪的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一些奇怪的问题&#34;&gt;#&lt;/a&gt; 一些奇怪的问题&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;mark&gt;Q(imcenyi)&lt;/mark&gt;&lt;/strong&gt;: 那如果有两个全局命名空间比如 a,b, 这两个命名空间下都有变量 num，那如果我在一个程序中，声明了两个命名空间 a，b，这个时候我调用 num 的时候，会发生什么，会报错吗&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;A（GitHub Copilot）&lt;/strong&gt;&lt;/mark&gt;: 如果在一个程序中声明了两个命名空间  &lt;code&gt;a&lt;/code&gt;  和  &lt;code&gt;b&lt;/code&gt; ，并且这两个命名空间下都有变量  &lt;code&gt;num&lt;/code&gt; ，那么在调用  &lt;code&gt;num&lt;/code&gt;  变量时，编译器会根据作用域规则来确定使用哪个命名空间下的  &lt;code&gt;num&lt;/code&gt;  变量。&lt;/p&gt;
&lt;p&gt;具体来说，如果在某个作用域中使用了  &lt;code&gt;num&lt;/code&gt;  变量，编译器会按照以下顺序查找  &lt;code&gt;num&lt;/code&gt;  变量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找当前作用域中是否有名为  &lt;code&gt;num&lt;/code&gt;  的变量，如果有，则使用该变量。&lt;/li&gt;
&lt;li&gt;如果当前作用域中没有名为  &lt;code&gt;num&lt;/code&gt;  的变量，则查找最近的外层作用域中是否有名为  &lt;code&gt;num&lt;/code&gt;  的变量，如果有，则使用该变量。&lt;/li&gt;
&lt;li&gt;如果所有外层作用域中都没有名为  &lt;code&gt;num&lt;/code&gt;  的变量，则查找命名空间  &lt;code&gt;a&lt;/code&gt;  中是否有名为  &lt;code&gt;num&lt;/code&gt;  的变量，如果有，则使用该变量。&lt;/li&gt;
&lt;li&gt;如果命名空间  &lt;code&gt;a&lt;/code&gt;  中没有名为  &lt;code&gt;num&lt;/code&gt;  的变量，则查找命名空间  &lt;code&gt;b&lt;/code&gt;  中是否有名为  &lt;code&gt;num&lt;/code&gt;  的变量，如果有，则使用该变量。&lt;/li&gt;
&lt;li&gt;如果命名空间  &lt;code&gt;b&lt;/code&gt;  中也没有名为  &lt;code&gt;num&lt;/code&gt;  的变量，则编译器会报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，如果在程序中声明了两个命名空间  &lt;code&gt;a&lt;/code&gt;  和  &lt;code&gt;b&lt;/code&gt; ，并且这两个命名空间下都有变量  &lt;code&gt;num&lt;/code&gt; ，那么在调用  &lt;code&gt;num&lt;/code&gt;  变量时，编译器会根据作用域规则来确定使用哪个命名空间下的  &lt;code&gt;num&lt;/code&gt;  变量，不会报错。但是，为了避免命名冲突，建议在程序中尽量避免使用相同的变量名。&lt;/p&gt;
&lt;p&gt;希望这可以帮助到你！&lt;/p&gt;
&lt;h2 id=&#34;c完全兼容c&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c完全兼容c&#34;&gt;#&lt;/a&gt; C++ 完全兼容 C&lt;/h2&gt;
&lt;p&gt;同样 C++ 也完全兼容 C 的全部源文件 但是要再.h 文件名前加 C，如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;cstdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;定义命名空间-namespace&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义命名空间-namespace&#34;&gt;#&lt;/a&gt; 定义命名空间 namespace&lt;/h2&gt;
&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;namespace
&amp;#123;
...;
&amp;#125;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;实例化对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;double a[10];&lt;/code&gt;  这条语句在 C++ 中是在栈内存中分配了一块能够存储 10 个  &lt;code&gt;double&lt;/code&gt;  类型元素的内存空间。这个数组  &lt;code&gt;a&lt;/code&gt;  可以用来存储 10 个  &lt;code&gt;double&lt;/code&gt;  类型的值，其索引范围是 0 到 9。&lt;/p&gt;
&lt;p&gt;这里是一个简单的示例，说明如何使用这个数组：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 初始化数组&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;// 打印数组的值&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;
    std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;cout &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a[&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;] = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;endl&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们首先声明了一个能够存储 10 个  &lt;code&gt;double&lt;/code&gt;  类型值的数组  &lt;code&gt;a&lt;/code&gt; 。然后，我们使用一个循环来初始化数组的每个元素，最后我们使用另一个循环来打印数组的每个元素的值。&lt;/p&gt;
&lt;p&gt;在 C++ 中，语句  &lt;code&gt;double *s;&lt;/code&gt;  并没有分配内存来存储  &lt;code&gt;double&lt;/code&gt;  类型的数据。这条语句只是声明了一个指向  &lt;code&gt;double&lt;/code&gt;  类型的指针变量  &lt;code&gt;s&lt;/code&gt; 。指针变量  &lt;code&gt;s&lt;/code&gt;  本身会占用一些内存来存储一个地址（通常是 4 或 8 字节，取决于系统的架构），但它目前还没有指向任何已分配内存的  &lt;code&gt;double&lt;/code&gt;  类型数据。&lt;/p&gt;
&lt;p&gt;如果你想使用这个指针来存储一个  &lt;code&gt;double&lt;/code&gt;  类型的数据，你需要先分配内存，可以使用  &lt;code&gt;new&lt;/code&gt;  关键字来做这件事，如下所示：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，内存就被分配了，而且  &lt;code&gt;s&lt;/code&gt;  现在指向这块新分配的内存。记得在不再需要这块内存时使用  &lt;code&gt;delete&lt;/code&gt;  关键字来释放它，以避免内存泄漏：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/C++OOP/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142390.png&#34; alt=&#34;Pasted image 20230614104941.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢&#34;&gt;#&lt;/a&gt; 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。&lt;/h2&gt;
&lt;h3 id=&#34;1首先是报错的原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1首先是报错的原因&#34;&gt;#&lt;/a&gt; 1. 首先是报错的原因&lt;/h3&gt;
&lt;p&gt;这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。&lt;/p&gt;
&lt;h2 id=&#34;2那为什么在unity的项目对象中可以直接运行而不会报错&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2那为什么在unity的项目对象中可以直接运行而不会报错&#34;&gt;#&lt;/a&gt; 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错&lt;/h2&gt;
&lt;p&gt;Unity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。&lt;br&gt;
在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。&lt;/p&gt;
&lt;h2 id=&#34;解决方法将scriptcs所在的目录加入到环境变量当中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决方法将scriptcs所在的目录加入到环境变量当中&#34;&gt;#&lt;/a&gt; 解决方法，将 scriptcs 所在的目录加入到环境变量当中。&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/Debug.Log.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/Debug.Log.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一定要记得log的l大写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一定要记得log的l大写&#34;&gt;#&lt;/a&gt; 一定要记得 Log 的 L 大写！！！！&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/Bug%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BA%AA%E5%BF%B5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;mark&gt;抽象方法只能在抽象类中定义&lt;/mark&gt;&lt;br&gt;
这个错误提示是因为您在抽象类 &lt;code&gt;Polygon&lt;/code&gt;  中声明了一个抽象方法 &lt;code&gt;Purarea&lt;/code&gt; ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。&lt;/p&gt;
&lt;p&gt;要解决这个问题，您需要为 &lt;code&gt;Purarea&lt;/code&gt;  方法提供方法体，或者将 &lt;code&gt;Polygon&lt;/code&gt;  类声明为抽象类，以便子类可以实现 &lt;code&gt;Purarea&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;以下是一个示例，演示了如何在 &lt;code&gt;Polygon&lt;/code&gt;  类中声明抽象方法：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-CS&#34; data-language=&#34;CS&#34;&gt;&lt;code class=&#34;language-CS&#34;&gt;
abstract class Polygon

&amp;#123;

    public abstract void Purarea();

&amp;#125;

class Rectangle : Polygon

&amp;#123;

    public override void Purarea()

    &amp;#123;

        Console.WriteLine(&amp;quot;Calculate the area of a rectangle.&amp;quot;);

    &amp;#125;

&amp;#125;

&amp;#x2F;&amp;#x2F; 使用示例

Polygon polygon &amp;#x3D; new Rectangle();

polygon.Purarea(); &amp;#x2F;&amp;#x2F; 输出：Calculate the area of a rectangle.&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个示例中，我们定义了一个抽象类 &lt;code&gt;Polygon&lt;/code&gt;  和一个非抽象子类 &lt;code&gt;Rectangle&lt;/code&gt; ，它们都实现了 &lt;code&gt;Purarea&lt;/code&gt;  方法。在使用示例中，我们创建了一个 &lt;code&gt;Rectangle&lt;/code&gt;  对象，并将其赋值给 &lt;code&gt;Polygon&lt;/code&gt;  类型的变量 &lt;code&gt;polygon&lt;/code&gt; 。然后，我们调用 &lt;code&gt;polygon.Purarea()&lt;/code&gt;  方法，它会调用 &lt;code&gt;Rectangle&lt;/code&gt;  类中的 &lt;code&gt;Purarea&lt;/code&gt;  方法，并输出 &lt;code&gt;Calculate the area of a rectangle.&lt;/code&gt; 。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%AE%BA.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%AE%BA.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;可以从简单的点子入手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可以从简单的点子入手&#34;&gt;#&lt;/a&gt; 可以从简单的点子入手&lt;/h2&gt;
&lt;p&gt;比如&lt;br&gt;
！[[Pasted image 20230915135613.png]]&lt;/p&gt;
&lt;p&gt;如图一个很简单的东西，从下走到上。这看上去没什么意思，但如果进行了机制的修改扩充，堆叠之后。&lt;/p&gt;
&lt;p&gt;![[Pasted image 20230915135729.png]]&lt;/p&gt;
&lt;p&gt;它就起码看上去很有意思了。&lt;br&gt;
或者说可以改一下颜色什么的。&lt;/p&gt;
&lt;p&gt;所以一个有趣的游戏或者说很牛的游戏，他不是说一开始的想法就是完美的，他的存在是出于机制的堆叠。&lt;/p&gt;
&lt;h2 id=&#34;1目的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1目的&#34;&gt;#&lt;/a&gt; 1. 目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个游戏一定要有明确的目标&lt;/li&gt;
&lt;li&gt;难度要有梯度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2难度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2难度&#34;&gt;#&lt;/a&gt; 2. 难度&lt;/h2&gt;
&lt;p&gt;如何提升难度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;几率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1. 关注几率的游戏
&lt;ul&gt;
&lt;li&gt;练习不会有太大意义，他很难带入到下一场游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如下棋 - 胜利完全取决于自己&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然在很多游戏中几率与技巧密不可分&lt;br&gt;
比如&lt;strong&gt;扑克&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扑克的随机性&lt;/strong&gt;：洗牌，抽牌，发牌&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扑克的技巧性&lt;/strong&gt;：如何利用手中的牌打出最好的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%AC%E5%BC%80%E8%AF%BE%E6%8E%A8%E8%8D%90.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%85%AC%E5%BC%80%E8%AF%BE%E6%8E%A8%E8%8D%90.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/specializations/game-development&#34;&gt;Game Design and Development&lt;/a&gt;：这是一个由密歇根州立大学提供的专项课程，涵盖了游戏设计和开发的基本知识。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/specializations/game-design&#34;&gt;Game Design: Art and Concepts&lt;/a&gt;：这是由加利福尼亚艺术大学提供的专项课程，专注于游戏设计的艺术和概念方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Udemy&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/course/unitycourse/&#34;&gt;Complete C# Unity Game Developer 2D&lt;/a&gt;：这门课程将教你如何使用 Unity 和 C# 从头开始创建 2D 游戏。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/course/unrealcourse/&#34;&gt;Unreal Engine C++ Developer: Learn C++ and Make Video Games&lt;/a&gt;：如果你对使用 Unreal Engine 进行游戏开发感兴趣，这门课程将是一个很好的起点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;edX&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edx.org/professional-certificate/ritx-video-game-design&#34;&gt;Video Game Design and Balance&lt;/a&gt;：这是由罗切斯特理工学院提供的专项课程，专注于游戏设计和平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FutureLearn&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.futurelearn.com/degrees/abertay-university/video-game-design-and-development&#34;&gt;Video Game Design and Development&lt;/a&gt;：这是由阿伯泰大学提供的一个完整的在线学位课程，涵盖了游戏设计和开发的各个方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/Brackeys&#34;&gt;Brackeys&lt;/a&gt;：这是一个非常受欢迎的 YouTube 频道，提供了大量的 Unity 教程，涵盖了从基本概念到高级技术的所有内容。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/GDC&#34;&gt;GDC&lt;/a&gt;：这个频道提供了大量的游戏开发者大会（GDC）的演讲和教程，涉及游戏设计的各个方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;南加州大学（USC）的游戏开发项目是非常知名的。他们确实有一些公开课和在线资源可供参考。以下是一些你可能会感兴趣的资源：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;USC Games&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://games.usc.edu/&#34;&gt;USC Games Official Website&lt;/a&gt;：你可以在这里找到他们的最新项目和新闻更新，以及他们的一些课程和项目介绍。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/specializations/game-design-and-development&#34;&gt;Game Design and Development with Unity 2020&lt;/a&gt;：这是 USC 提供的一个专项课程，涉及 Unity 2020 的游戏设计和开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/USCGames&#34;&gt;USC Games YouTube Channel&lt;/a&gt;：这个频道提供了一些关于他们的课程和项目的视频，包括学生项目的展示和一些教学视频。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iTunes U&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 iTunes U 上，USC 曾提供了一些游戏设计和开发的公开课程，你可以在那里搜索 “USC Games” 或 “USC Game Design” 来查找相关课程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他在线平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USC 也可能在其他在线教育平台上提供课程或研讨会，你可以通过检查平台如 edX 或 FutureLearn 来查找他们的课程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望这些资源能帮到你！如果你有其他问题或需要更多的信息，随时告诉我。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%8D%97%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E5%85%AC%E5%BC%80%E8%AF%BE.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%8D%97%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E5%85%AC%E5%BC%80%E8%AF%BE.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;USC Games&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://games.usc.edu/&#34;&gt;USC Games Official Website&lt;/a&gt;：你可以在这里找到他们的最新项目和新闻更新，以及他们的一些课程和项目介绍。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/specializations/game-design-and-development&#34;&gt;Game Design and Development with Unity 2020&lt;/a&gt;：这是 USC 提供的一个专项课程，涉及 Unity 2020 的游戏设计和开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;YouTube&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/USCGames&#34;&gt;USC Games YouTube Channel&lt;/a&gt;：这个频道提供了一些关于他们的课程和项目的视频，包括学生项目的展示和一些教学视频。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iTunes U&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 iTunes U 上，USC 曾提供了一些游戏设计和开发的公开课程，你可以在那里搜索 “USC Games” 或 “USC Game Design” 来查找相关课程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他在线平台&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USC 也可能在其他在线教育平台上提供课程或研讨会，你可以通过检查平台如 edX 或 FutureLearn 来查找他们的课程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E6%8B%86%E8%A7%A3/RTS%EF%BC%88%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%EF%BC%89.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E6%8B%86%E8%A7%A3/RTS%EF%BC%88%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%EF%BC%89.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1经典rts&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1经典rts&#34;&gt;#&lt;/a&gt; 1. 经典 RTS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C&amp;amp;C =《命令与征服》(Command &amp;amp; Conquer) 系列，包括《C&amp;amp;C：红色警戒》；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SC=《星际争霸》(StarCraft) 系列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;War3=《魔兽争霸 3》(Warcraft 3)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AoE=《帝国时代》(Age of Empire) 系列&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心玩法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#核心玩法&#34;&gt;#&lt;/a&gt; 核心玩法：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建设：玩家需要建造能够实现采集、扩军和战斗功能的建筑。造基地。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采集：玩家需要从地图上收集（一种或多种）资源。采矿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩军：玩家需要招募军队、研究科技，强化军队的军事实力。造兵、升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;战斗：玩家使用军队达成战术与战略目的。打仗。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传统rts弊端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#传统rts弊端&#34;&gt;#&lt;/a&gt; 传统 RTS 弊端&lt;/h3&gt;
&lt;p&gt;系统复杂、操作断手、天梯虐人、体验落后&lt;/p&gt;
&lt;h2 id=&#34;2核心系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2核心系统&#34;&gt;#&lt;/a&gt; 2. 核心系统&lt;/h2&gt;
&lt;h3 id=&#34;经济&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#经济&#34;&gt;#&lt;/a&gt; 经济&lt;/h3&gt;
&lt;h3 id=&#34;科技&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#科技&#34;&gt;#&lt;/a&gt; 科技&lt;/h3&gt;
&lt;h3 id=&#34;兵力&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#兵力&#34;&gt;#&lt;/a&gt; 兵力&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;玩法需求-剧情关卡战斗-&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#玩法需求-剧情关卡战斗-&#34;&gt;#&lt;/a&gt; 玩法需求 -&amp;gt; 剧情 / 关卡 / 战斗 -&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;世界观&lt;/li&gt;
&lt;li&gt;地图尺寸&lt;/li&gt;
&lt;li&gt;人物形象&lt;/li&gt;
&lt;li&gt;动作表现&lt;/li&gt;
&lt;li&gt;路线引导&lt;/li&gt;
&lt;li&gt;特效反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;策划需求-美术评估-美术制作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#策划需求-美术评估-美术制作&#34;&gt;#&lt;/a&gt; 策划需求 -&amp;gt; 美术评估 -&amp;gt; 美术制作&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF%E9%9C%80%E6%B1%82.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E7%BE%8E%E6%9C%AF%E9%9C%80%E6%B1%82.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1uiux&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1uiux&#34;&gt;#&lt;/a&gt; 1.UIUX&lt;/h2&gt;
&lt;p&gt;GUI&lt;/p&gt;
&lt;h2 id=&#34;2原画&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2原画&#34;&gt;#&lt;/a&gt; 2. 原画&lt;/h2&gt;
&lt;h3 id=&#34;风格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#风格&#34;&gt;#&lt;/a&gt; 风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;场景
&lt;ul&gt;
&lt;li&gt;场景模型
&lt;ul&gt;
&lt;li&gt;建筑&lt;/li&gt;
&lt;li&gt;植被&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;场景编辑
&lt;ul&gt;
&lt;li&gt;地形&lt;/li&gt;
&lt;li&gt;灯光&lt;/li&gt;
&lt;li&gt;关卡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;
&lt;li&gt;角色模型
&lt;ul&gt;
&lt;li&gt;服饰&lt;/li&gt;
&lt;li&gt;人体&lt;/li&gt;
&lt;li&gt;武器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色动画
&lt;ul&gt;
&lt;li&gt;绑定&lt;/li&gt;
&lt;li&gt;动捕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3技术美术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3技术美术&#34;&gt;#&lt;/a&gt; 3. 技术美术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;技术美术
&lt;ul&gt;
&lt;li&gt;材质&lt;/li&gt;
&lt;li&gt;渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E7%BE%8E%E6%9C%AF/%E5%9C%B0%E5%9B%BE%E7%BC%96%E8%BE%91.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E5%81%9A%E6%B8%B8%E6%88%8F%E6%89%80%E9%9C%80%E7%9A%84%E5%B2%97%E4%BD%8D.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E9%80%9A%E8%AF%86/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%BB%93%E6%9E%84%E5%92%8C%E9%A1%BA%E5%BA%8F/%E5%81%9A%E6%B8%B8%E6%88%8F%E6%89%80%E9%9C%80%E7%9A%84%E5%B2%97%E4%BD%8D.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;策划&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#策划&#34;&gt;#&lt;/a&gt; 策划&lt;/h2&gt;
&lt;h2 id=&#34;美术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#美术&#34;&gt;#&lt;/a&gt; 美术&lt;/h2&gt;
&lt;h2 id=&#34;程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#程序&#34;&gt;#&lt;/a&gt; 程序&lt;/h2&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%83%B3%E6%B3%95/%E9%AB%98%E4%B8%AD%E7%9A%84%E5%A0%B5%E4%BA%BA%E6%B8%B8%E6%88%8F.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%83%B3%E6%B3%95/%E9%AB%98%E4%B8%AD%E7%9A%84%E5%A0%B5%E4%BA%BA%E6%B8%B8%E6%88%8F.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;游戏目标&lt;br&gt;
 11*11&lt;br&gt;
 两个玩家面对面，从一边走到另外一边&lt;/p&gt;
&lt;p&gt;可以堵人划墙（一次可以最多划两格），不可以堵死，要么选择堵人，要么选择走。堵人有次数限制&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/Y3/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/Y3/%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在实际的结构中，把触发器分为 ABC 三类，函数分为 WXYZ 四类，它们分别是：&lt;/p&gt;
&lt;p&gt;A：初始化游戏设置以及其他游戏开始时的一次性操作&lt;/p&gt;
&lt;p&gt;B：基于帧计时器相关的整个游戏核心系统&lt;/p&gt;
&lt;p&gt;C：其他自定义事件和入口&lt;/p&gt;
&lt;p&gt;W：可运行调用的丰富单例&lt;/p&gt;
&lt;p&gt;X：系统执行&lt;/p&gt;
&lt;p&gt;Y：核心系统&lt;/p&gt;
&lt;p&gt;Z：返回函数&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;ol&gt;
&lt;li&gt;理解什么是游戏设计&lt;/li&gt;
&lt;li&gt;学会系统性的创意方法&lt;/li&gt;
&lt;li&gt;具备工程思维&lt;/li&gt;
&lt;li&gt;成为一个专业的开发者&lt;/li&gt;
&lt;li&gt;参展至少一次，与你的玩家面对面&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910103638.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910103946.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910104138.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910104303.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910104451.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910104542.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910104948.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910105143.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910105417.png]]![[Pasted image 20230910105748.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910105952.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20230910110442.png]]&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/SetActive.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/SetActive.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Setactive 可以激活对象，但如果父对象没有激活，这个时候对子对象用 setactive 无作用&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/UnityTD%E8%AF%BE%E7%A8%8B/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;如果在 Unity 引擎中的对象中挂在的脚本里。&lt;br&gt;
有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。&lt;br&gt;
这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-C#&#34; data-language=&#34;C#&#34;&gt;&lt;code class=&#34;language-C#&#34;&gt;    public enum emAction

    &amp;#123;

        None&amp;#x3D;0,

        GetUp,&amp;#x2F;&amp;#x2F;1

        Wash,&amp;#x2F;&amp;#x2F;2

        Eat,&amp;#x2F;&amp;#x2F;3

        Work,&amp;#x2F;&amp;#x2F;4

    &amp;#125;

    public emAction mAction &amp;#x3D; emAction.Work;
    Debug.Log((int)mAction);&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们对 &lt;code&gt;mAction&lt;/code&gt;  的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。&lt;br&gt;
&lt;img src=&#34;https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139957.png&#34; alt=&#34;Pasted image 20230616154518.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我们在脚本的选项中，选择了 &lt;code&gt;mAction&lt;/code&gt;  的&lt;mark&gt;初值&lt;/mark&gt;，那么这个值将覆盖脚本代码中的&lt;mark&gt;初始值&lt;/mark&gt;（注意，只是初始值）。&lt;/p&gt;
&lt;p&gt;上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 &lt;code&gt;mAction&lt;/code&gt;  所附的 Work。所以打印出来的还是 None 的 0。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/2023-09-04.html</guid>
            <title></title>
            <link>https://imcenyi.github.io/post/obsidian/Is%20MyGo(CY%E5%8F%98%E5%BC%BA%E4%B9%8B%E8%B7%AF/1%E6%B8%B8%E6%88%8F/2023-09-04.html</link>
            <pubDate>Wed, 04 Oct 2023 00:01:18 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
    </channel>
</rss>
