{
    "version": "https://jsonfeed.org/version/1",
    "title": "CenYi • All posts by \"bug-c#\" category",
    "description": "",
    "home_page_url": "https://imcenyi.github.io",
    "items": [
        {
            "id": "https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html",
            "url": "https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html",
            "title": "c#bug-抽象方法只能在抽象类中定义",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<h2 id=\"抽象方法只能在抽象类中定义\"><a class=\"markdownIt-Anchor\" href=\"#抽象方法只能在抽象类中定义\">#</a> 抽象方法只能在抽象类中定义</h2>\n<p>这个错误提示是因为您在抽象类 <code>Polygon</code>  中声明了一个抽象方法 <code>Purarea</code> ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。</p>\n<p>要解决这个问题，您需要为 <code>Purarea</code>  方法提供方法体，或者将 <code>Polygon</code>  类声明为抽象类，以便子类可以实现 <code>Purarea</code>  方法。</p>\n<p>以下是一个示例，演示了如何在 <code>Polygon</code>  类中声明抽象方法：</p>\n<pre class=\"line-numbers language-CS\" data-language=\"CS\"><code class=\"language-CS\">\nabstract class Polygon\n\n&#123;\n\n    public abstract void Purarea();\n\n&#125;\n\nclass Rectangle : Polygon\n\n&#123;\n\n    public override void Purarea()\n\n    &#123;\n\n        Console.WriteLine(&quot;Calculate the area of a rectangle.&quot;);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nPolygon polygon &#x3D; new Rectangle();\n\npolygon.Purarea(); &#x2F;&#x2F; 输出：Calculate the area of a rectangle.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个抽象类 <code>Polygon</code>  和一个非抽象子类 <code>Rectangle</code> ，它们都实现了 <code>Purarea</code>  方法。在使用示例中，我们创建了一个 <code>Rectangle</code>  对象，并将其赋值给 <code>Polygon</code>  类型的变量 <code>polygon</code> 。然后，我们调用 <code>polygon.Purarea()</code>  方法，它会调用 <code>Rectangle</code>  类中的 <code>Purarea</code>  方法，并输出 <code>Calculate the area of a rectangle.</code> 。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html",
            "url": "https://imcenyi.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html",
            "title": "c#bug-直接通过vscode运行CS文件报错",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<p><img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230142390.png\" alt=\"Pasted image 20230614104941.png\"></p>\n<h2 id=\"这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢\"><a class=\"markdownIt-Anchor\" href=\"#这个c脚本文件在unity所开的项目中可以正常运行但为什么直接在vscode运行不行呢\">#</a> 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。</h2>\n<h3 id=\"1首先是报错的原因\"><a class=\"markdownIt-Anchor\" href=\"#1首先是报错的原因\">#</a> 1. 首先是报错的原因</h3>\n<p>这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。</p>\n<h2 id=\"2那为什么在unity的项目对象中可以直接运行而不会报错\"><a class=\"markdownIt-Anchor\" href=\"#2那为什么在unity的项目对象中可以直接运行而不会报错\">#</a> 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错</h2>\n<p>Unity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。<br>\n在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。</p>\n<h2 id=\"解决方法将scriptcs所在的目录加入到环境变量当中\"><a class=\"markdownIt-Anchor\" href=\"#解决方法将scriptcs所在的目录加入到环境变量当中\">#</a> 解决方法，将 scriptcs 所在的目录加入到环境变量当中。</h2>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        }
    ]
}