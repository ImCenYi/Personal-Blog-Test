[{"date":"2023-06-22T17:44:40.294Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%86%E5%B0%8F%E6%93%8D%E4%BD%9C/win11%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.html","categories":[["undefined",""]],"content":"# 方法 1 # win+R 打开命令行工具，输入 control system 打开高级系统设置，点击环境变量，将工具的（bin 文件）的路径加入到环境变量 path 中。 # 方法 2 # 直接通过 设置 -&gt; 系统 -&gt; 高级系统设置 -&gt; 进入到 control system"},{"date":"2023-06-22T17:44:40.279Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8E%A5%E5%8F%A3.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.279Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%B3%9B%E5%9E%8B%E7%B1%BB.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.271Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E7%BB%A7%E6%89%BF.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.271Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E8%99%9A%E6%96%B9%E6%B3%95.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.269Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.261Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%88%9B%E5%BB%BA%E7%B1%BB.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.261Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%A4%9A%E6%80%81.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.261Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.256Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.253Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%201.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.253Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%202.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.253Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E6%9C%AA%E5%91%BD%E5%90%8D%203.html","categories":[["undefined",""]]},{"date":"2023-06-22T17:44:40.245Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/Debug.Log.html","categories":[["undefined",""]],"content":"# 一定要记得 Log 的 L 大写！！！！"},{"title":"c#bug-直接通过vscode运行CS文件报错","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87vscode%E8%BF%90%E8%A1%8CCS%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["BUG-C#","/categories/BUG-C/"]],"content":" # 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。 # 1. 首先是报错的原因 这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。 # 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错 Unity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。 在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。 # 解决方法，将 scriptcs 所在的目录加入到环境变量当中。"},{"title":"c#bug-抽象方法只能在抽象类中定义","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/BUG/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%93%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E8%83%BD%E5%86%99%E5%9C%A8%E5%9F%BA%E7%B1%BB%E4%B8%AD.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["BUG-C#","/categories/BUG-C/"]],"content":"# 抽象方法只能在抽象类中定义 这个错误提示是因为您在抽象类 Polygon 中声明了一个抽象方法 Purarea ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。 要解决这个问题，您需要为 Purarea 方法提供方法体，或者将 Polygon 类声明为抽象类，以便子类可以实现 Purarea 方法。 以下是一个示例，演示了如何在 Polygon 类中声明抽象方法： 在这个示例中，我们定义了一个抽象类 Polygon 和一个非抽象子类 Rectangle ，它们都实现了 Purarea 方法。在使用示例中，我们创建了一个 Rectangle 对象，并将其赋值给 Polygon 类型的变量 polygon 。然后，我们调用 polygon.Purarea() 方法，它会调用 Rectangle 类中的 Purarea 方法，并输出 Calculate the area of a rectangle. 。"},{"title":"c#/条件语句（线性）","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":" # 条件检测是线性的，只要满足前面的就不会执行后面的"},{"title":"c#/枚举类的访问等级规则","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":" 上面这串代码出现了一个错误，即 emAction 枚举类型的访问修饰符与 mAction 字段的访问修饰符不匹配。具体来说， emAction 枚举类型是默认的（即没有访问修饰符），而 Action 字段是公共的（ public ）。 # 这违反了 C# 的访问性限制 因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 emAction 枚举类型的访问修饰符更改为公共的（ public ）或将 mAction 字段的访问修饰符更改为默认 (private 级别) 的（即删除 public 关键字）。 我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 private 访问等级，是最低一级。 关于访问等级先后详细看 [[访问等级]] 如果 Action 字段是 public ，则将 emAction 枚举类型的可访问性设置为 private 是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。 # 那为什么 C# 要有这个访问性限制呢。其实也不难理解 C# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。 例如，在这个示例中， mAction 字段的访问修饰符是 public ，而 emAction 枚举类型的访问修饰符是默认的（即 private ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 emAction 枚举类型的可访问性低于 mAction 字段的可访问性。 说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。"},{"title":"c#/访问等级","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"# 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是： public ：公共的，可以被任何代码访问。 protected internal ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。 internal ：内部的，可以被同一程序集中的代码访问。 protected ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。 private ：私有的，只能被同一类中的代码访问。 访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 private 可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 public 可以使其他代码更容易地使用它们，从而提高代码的可维护性。"},{"title":"c#/public变量的赋值","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"如果在 Unity 引擎中的对象中挂在的脚本里。 有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。 这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。 我们对 mAction 的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。 如果我们在脚本的选项中，选择了 mAction 的初值，那么这个值将覆盖脚本代码中的初始值（注意，只是初始值）。 上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 mAction 所附的 Work。所以打印出来的还是 None 的 0。"},{"title":"c#/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"# this 和 base 都是 C# 中的关键字，它们的主要区别在于： this 关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this 关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。 base 关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 base 关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。 以下是一个示例，演示了如何使用 this 和 base 关键字： 在这个示例中，我们定义了一个 Person 类和一个 Student 类， Student 类继承自 Person 类。在 Person 类中，我们定义了一个构造函数，使用 this 关键字来引用当前对象的成员变量。在 Student 类中，我们定义了一个构造函数，使用 base 关键字来调用基类的构造函数。在 Student 类中，我们还定义了两个方法 Study 和 ShowInfo ，分别使用 this 关键字和 base 关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 Student 对象，并调用了它的 Study 和 ShowInfo 方法，输出了相应的信息。 总的来说， this 关键字用于引用当前对象， base 关键字用于引用基类对象。它们的应用场景不同， this 关键字通常用于访问当前对象的成员， base 关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。"},{"title":"c#/封装","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%B0%81%E8%A3%85.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"# 封装的主要目的 封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。 封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。 在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。"},{"title":"c#/抽象方法（abstruct）和虚方法(virtual)的区别","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"实际上虚函数就类似于初省值 # 抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于： 抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。 抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。 抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。 下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数： 在这个示例中，我们定义了一个抽象类 Shape 和四个子类 Rectangle 、 Circle 、 Square 和 Triangle ，它们都重写了 GetArea 方法。 GetArea 方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 GetArea 方法，输出了它们的面积。 abstract 和 virtual 都是 C# 中用于实现多态的关键字，它们的主要区别在于： abstract 用于声明抽象方法，它必须在派生类中进行实现，而 virtual 用于声明虚方法，它可以在派生类中进行重写，但不是必须的。 abstract 方法没有实现，只有方法签名，而 virtual 方法有默认的实现，可以在基类中提供。 abstract 方法只能在抽象类中声明，而 virtual 方法可以在普通的类中声明。 "},{"title":"c#/抽象类","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E5%AF%86%E5%B0%81%E7%B1%BB.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"/* 抽象类 1. 抽象类不可以被实例化 2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体 3. 抽象类的子类必须实现抽象类中的所有抽象函数 4. 抽象类中可以有非抽象函数 5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数 6. 非抽象类可以继承抽象类，但是子类必须实现所有抽象函数 */ # 密封类 1. 密封类不可以被继承（他只能是子类） 2. 密封类不能是抽象的。sealed 和 abstract 是互斥的 （其实很好理解，密封类不能作为基类，只能是子类 而抽象类虽然可以既是基类又是子类，但是其中的抽 象函数是不能在抽象类中写方法体的，必须要在子类 中实现，这就和密封类的定义【不可被继承，不能有子类】相违背了） # 上述报错，表明了抽象类和封闭类是互斥的"},{"title":"c#/抽象函数","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%B1%BB.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":" # 抽象类不可被实例化 # 抽象类之中的抽象函数必须在子类写好实现的方法体"},{"title":"c#/静态类","date":"2023-06-22T16:39:59.000Z","url":"/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E7%B1%BB%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%A1%A8%E7%8E%B0%E5%BD%A2%E5%BC%8F/%E9%9D%99%E6%80%81%E7%B1%BB.html","tags":[["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。 上面是错误示范 应该使用 MyClass3 这个类名而不是 myClass3 这个实例"},{"title":"“SHUFLY交流会有感“","date":"2023-04-17T15:39:47.000Z","url":"/post/SHUFLY%E4%BA%A4%E6%B5%81%E4%BC%9A%E6%9C%89%E6%84%9F.html","tags":[["感悟","/tags/%E6%84%9F%E6%82%9F/"],["成长","/tags/%E6%88%90%E9%95%BF/"]],"categories":[["life","/categories/life/"]],"content":"首先真的十分感谢在交流会上分享经验的学长学姐们，真的收获很多。特别是对于我这种信息面不是很广的大一新生来说，像是打开了新世界的大门。接下来我将通过三个方面来简述一下我的收获和反省 # 1. 个人选择 首先个人选择这一方面，一定是从自身出发，一位数学系的学长说的很好 ==“别人的经验，别人的经历，终究是别人的，而不是自己的，它并没有办法真正左右你的方向，做出选择的永远是自己。”== 这对于我来说启发真的很大。近期在周围的压力下和摸索自我的过程中，我仿佛陷入一个泥沼，困与自身的矛盾和焦虑之中，也就是我们常说的精神内耗。对于自我的渴求，和认知的不足，让我的精神深受折磨。于是我便通过网络，或者和一些牛人朋友的交谈，尝试找寻一条适合自己的道路，或者说是想要去模仿，想要去走一条他们走过的路，说白了还是思想上的偷懒。导致了我一直没有走出这个怪圈，而那位学长的话一下子就点醒了我，从一开始我的方向就错了，我只想着最好能找到一条照着走就完事的路。但我忽视了个体之间的差异，别人终究不是我。付出自己的时间成本去不断试错，只有自我承担着这种风险，才能得到真正的成长，走出的才会是真正适合自己的道路。而这也是我作为一个攀爬者成就自我的必由之路。 # 2. 方向选择（深造 or 就业） 我对于这一方面了解的也不是特别多，但能尽可能地早做选择总是没错的。 针对我个人而言，我是一个很讨厌按照规矩办事的一个人，准确的说，我很讨厌那种无效和重复的付出。在我行动之前，我一定要先明确，我的目的，以及我如何完成目的，是否有更好的途径来达成我的目的。这就导致了，我不太愿意随大流，走一条相对稳妥的道路。 # 深造 or 就业 我目前是偏向于毕业直接投入就业一点（当然随着认知和想法的变化或许会发生改变），或许在大二大三就会开始尝试找实习和项目。至于我为什么不选择去深造读研读博这条路呢，明明大家都在朝这个方向发展，整个大环境给我的感觉就是，不读研就很难有出路。 # 我为自己归纳了以下几个原因 我对于科研事业并不抱有太大的热忱： 这也是我认为最主要的原因，我认为一个人的主观能动性是非常重要的，一个人要是被强迫去做一个完全不感兴趣的东西，那效率毫无疑问的低的。而且我前面也提到了，我是一个不愿意随大流的人，我不会因为环境的 push，而将过多的心理花在一个不感兴趣的事情上。 不明白科研的方向： 如果我想去搞研究，我起码要知道自己想研究什么方向吧，总不可能像一只无头苍蝇一样乱飞。当然这也可能是因为我目前还未分流，对于专业认知还不是很清晰导致的。 科研环境： 目前国内的科研环境一言难尽，而对于出国又碍于自己的外语能力。（在背了在背了）。 # 3. 为我坚定了短期方向（种‘数媒’（雾）） 这个最后一点，也是我认为收获最大的一点。在交流会的最后私下提问交流的环境，我有幸认识到了 20 级数媒在读的卢学长，通过和学长的交流，我对于数字媒体技术这个专业有了更加清晰的认知，同样也更加坚定了自己的短期道路 —— 进入数字媒体技术专业。至于为什么会选择这个方向呢。首先我个人是理工科出身，同样对于艺术表达这方面也十分感兴趣（当然可能莫得艺术细胞？）。理工科的出身让我对于计算机方面也十分感兴趣，但是从小开始自己就有这过剩的表达欲，我想把自己所想自己的体会让别人知道，而艺术就是一个很好地载体，在高考备考期间，自己甚至抽出来时间学了学 pr（可能上海确实是毕竟闲），剪映等剪辑软件自己尝试着做做自媒体。虽然说没有多少的流量，并没有让更多人看到，但是在这个过程中，我能真正感受到快乐，那种满足。所以这也是我难以割舍的。那怎么办呢。结论就是 ——==“小孩子才做选择，我全都要”== 这也让我盯上了数字媒体技术，它可以同时满足我对计算机和艺术表达的诉求。当然学校的硬件也很足啊。（三套完备的光学动捕啊。斯哈斯哈） # 一切都还是刚开始，一切都是未知数，期待自己接下来的成长"},{"title":"构造函数“","date":"2023-04-08T08:19:59.000Z","url":"/post/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E2%80%9C.html","categories":[["undefined",""]]},{"title":"c++/引用","date":"2023-03-31T16:39:59.000Z","url":"/post/1%20%E5%BC%95%E7%94%A8.html","tags":[["C++","/tags/C/"],["语言学习","/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["C++","/categories/C/"]],"content":"1. 引用 # 引用的概念 某个变量的引用，等价于这个变量，相当于这个变量的别名 引用 (&amp;) 语法如下 对于 n 的运算，r 同样也会做相同的运算。 反过来，对于 r 的运算，同样也会作用到 n 上。 如 最后 r=n=5，可见引用运算同步。 注意，引用是从一而终的，不可以引用其他变量 引用只能引用变量，不能引用常量和表达式 这里 r1=b 这一句，并不是让 r1 引用 b，而是给 r1 赋了 b 的值 # 引用的作用 写一个交换整型变量的值。 实际上 n1，n2，并不会改变。 但是引用可以很好解决这个问题。 在这里由与附给形参的类型是引用，所以 a，b 与 n1，n2 等价。 在子函数里 ab 所做的运算，n1n2 同样也会执行，所以 n1n2 会改变。 返回值是个引用，则可以对于返回值进行赋值。 # 常引用 注意，不可以通过常引用来改变引用的内容（可以用其他方式）。! "}]