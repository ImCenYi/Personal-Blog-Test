{"title":"c#/访问等级","uid":"b2e8321107bb1bee6888ca2a7202b079","slug":"学习笔记/Csharp/访问等级","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:53.750Z","comments":true,"path":"api/articles/学习笔记/Csharp/访问等级.json","keywords":null,"cover":null,"content":"<h2 id=\"访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是\"><a class=\"markdownIt-Anchor\" href=\"#访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是\">#</a> 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：</h2>\n<ol>\n<li><code>public</code> ：公共的，可以被任何代码访问。</li>\n<li><code>protected internal</code> ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。</li>\n<li><code>internal</code> ：内部的，可以被同一程序集中的代码访问。</li>\n<li><code>protected</code> ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。</li>\n<li><code>private</code> ：私有的，只能被同一类中的代码访问。</li>\n</ol>\n<p>访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 <code>private</code>  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 <code>public</code>  可以使其他代码更容易地使用它们，从而提高代码的可维护性。</p>\n","text":"# 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是： public ：公共的，可以被任何代码访问。 protected internal ：受保护的内部的，可...","link":"","photos":[],"count_time":{"symbolsCount":391,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7access-level%E6%98%AF%E6%8C%87%E5%9C%A8c%E4%B8%AD%E7%94%A8%E4%BA%8E%E6%8E%A7%E5%88%B6%E7%B1%BB-%E7%BB%93%E6%9E%84%E4%BD%93-%E6%8E%A5%E5%8F%A3-%E5%AD%97%E6%AE%B5-%E5%B1%9E%E6%80%A7-%E6%96%B9%E6%B3%95%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%AD%89%E6%88%90%E5%91%98%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6-c%E4%B8%AD%E6%9C%89%E4%BA%94%E4%B8%AA%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E4%BB%8E%E9%AB%98%E5%88%B0%E4%BD%8E%E5%88%86%E5%88%AB%E6%98%AF\"><span class=\"toc-text\"> 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：</span></a></li></ol>","author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c#/public变量的赋值","uid":"dcd15c9ea32f43ce189ea4a554532717","slug":"学习笔记/Unity引擎/public变量的赋值","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:17.087Z","comments":true,"path":"api/articles/学习笔记/Unity引擎/public变量的赋值.json","keywords":null,"cover":[],"text":"如果在 Unity 引擎中的对象中挂在的脚本里。 有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。 这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。 public enum emAction &#123; None&#x3D;0, GetUp,&...","link":"","photos":[],"count_time":{"symbolsCount":539,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c#bug-抽象方法只能在抽象类中定义","uid":"52ac0bc4af2a723f9f23e72acd05d595","slug":"学习笔记/BUG/抽象方法的方法体只能在子类中实现，而不能写在基类中","date":"2023-06-22T16:39:59.000Z","updated":"2023-07-05T10:55:25.480Z","comments":true,"path":"api/articles/学习笔记/BUG/抽象方法的方法体只能在子类中实现，而不能写在基类中.json","keywords":null,"cover":null,"text":"# 抽象方法只能在抽象类中定义 这个错误提示是因为您在抽象类 Polygon 中声明了一个抽象方法 Purarea ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。 要解决这个问题，您需要为 Purarea 方...","link":"","photos":[],"count_time":{"symbolsCount":842,"symbolsTime":"1 mins."},"categories":[{"name":"BUG-C#","slug":"BUG-C","count":2,"path":"api/categories/BUG-C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}