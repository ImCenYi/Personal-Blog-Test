{"title":"c#/静态类","uid":"c92b939053502639e9ed85c984e3e15d","slug":"学习笔记/Csharp/类的更多表现形式/静态类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:36.472Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/静态类.json","keywords":null,"cover":[],"content":"<p>静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。<br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139796.png\" alt=\"Pasted image 20230620180951.png\"><br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230140156.png\" alt=\"Pasted image 20230620181011.png\"><br>\n 上面是错误示范<br>\n<img src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230141887.png\" alt=\"Pasted image 20230620181325.png\"></p>\n<p>应该使用 MyClass3 这个类名而不是 myClass3 这个实例</p>\n","text":"静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。 上面是错误示范 应该使用 MyClass3 这个类名而不是 myClass3 这个实例 ","link":"","photos":[],"count_time":{"symbolsCount":79,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"toc":"","author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c#/封装","uid":"b760326611e8ddc16545105090a99769","slug":"学习笔记/Csharp/Class类/封装","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:56.847Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/封装.json","keywords":null,"cover":null,"text":"# 封装的主要目的 封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。 封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐...","link":"","photos":[],"count_time":{"symbolsCount":263,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c#/抽象类","uid":"02a13521d1a9067da4901a7085158d6a","slug":"学习笔记/Csharp/类的更多表现形式/密封类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:34.772Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/密封类.json","keywords":null,"cover":[],"text":"/* 抽象类 1. 抽象类不可以被实例化 2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体 3. 抽象类的子类必须实现抽象类中的所有抽象函数 4. 抽象类中可以有非抽象函数 5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数 6. 非抽象类可以继承抽象类，但是子类...","link":"","photos":[],"count_time":{"symbolsCount":345,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}