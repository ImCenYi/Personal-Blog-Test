{"title":"c#/this 和 base 的区别","uid":"e262221502c6a5b9d791265ede6d33bb","slug":"学习笔记/Csharp/Class类/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:20.985Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/this 和 base 的区别.json","keywords":null,"cover":null,"content":"<h2 id=\"this和base都是c中的关键字它们的主要区别在于\"><a class=\"markdownIt-Anchor\" href=\"#this和base都是c中的关键字它们的主要区别在于\">#</a>  <code>this</code>  和 <code>base</code>  都是 C# 中的关键字，它们的主要区别在于：</h2>\n<ol>\n<li><code>this</code>  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 <code>this</code>  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。</li>\n<li><code>base</code>  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 <code>base</code>  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。</li>\n</ol>\n<p>以下是一个示例，演示了如何使用 <code>this</code>  和 <code>base</code>  关键字：</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">class Person\n\n&#123;\n\n    public string Name &#123; get; set; &#125;\n\n    public int Age &#123; get; set; &#125;\n\n    public Person(string name, int age)\n\n    &#123;\n\n        this.Name &#x3D; name;\n\n        this.Age &#x3D; age;\n\n    &#125;\n\n&#125;\n\nclass Student : Person\n\n&#123;\n\n    public string School &#123; get; set; &#125;\n\n    public Student(string name, int age, string school) : base(name, age)\n\n    &#123;\n\n        this.School &#x3D; school;\n\n    &#125;\n\n    public void Study()\n\n    &#123;\n\n        Console.WriteLine(&quot;&#123;0&#125; is studying at &#123;1&#125;.&quot;, this.Name, this.School);\n\n    &#125;\n\n    public void ShowInfo()\n\n    &#123;\n\n        Console.WriteLine(&quot;Name: &#123;0&#125;, Age: &#123;1&#125;, School: &#123;2&#125;&quot;, this.Name, this.Age, this.School);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nStudent student &#x3D; new Student(&quot;Tom&quot;, 18, &quot;ABC School&quot;);\n\nstudent.Study(); &#x2F;&#x2F; 输出：Tom is studying at ABC School.\n\nstudent.ShowInfo(); &#x2F;&#x2F; 输出：Name: Tom, Age: 18, School: ABC School<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个 <code>Person</code>  类和一个 <code>Student</code>  类， <code>Student</code>  类继承自 <code>Person</code>  类。在 <code>Person</code>  类中，我们定义了一个构造函数，使用 <code>this</code>  关键字来引用当前对象的成员变量。在 <code>Student</code>  类中，我们定义了一个构造函数，使用 <code>base</code>  关键字来调用基类的构造函数。在 <code>Student</code>  类中，我们还定义了两个方法 <code>Study</code>  和 <code>ShowInfo</code> ，分别使用 <code>this</code>  关键字和 <code>base</code>  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 <code>Student</code>  对象，并调用了它的 <code>Study</code>  和 <code>ShowInfo</code>  方法，输出了相应的信息。</p>\n<p>总的来说， <code>this</code>  关键字用于引用当前对象， <code>base</code>  关键字用于引用基类对象。它们的应用场景不同， <code>this</code>  关键字通常用于访问当前对象的成员， <code>base</code>  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。</p>\n","text":"# this 和 base 都是 C# 中的关键字，它们的主要区别在于： this 关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this 关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。 base 关键字用于引用基类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this%E5%92%8Cbase%E9%83%BD%E6%98%AFc%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%83%E4%BB%AC%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E5%9C%A8%E4%BA%8E\"><span class=\"toc-text\">  this  和 base  都是 C# 中的关键字，它们的主要区别在于：</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c#/public变量的赋值","uid":"dcd15c9ea32f43ce189ea4a554532717","slug":"学习笔记/Unity引擎/public变量的赋值","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:17.087Z","comments":true,"path":"api/articles/学习笔记/Unity引擎/public变量的赋值.json","keywords":null,"cover":[],"text":"如果在 Unity 引擎中的对象中挂在的脚本里。 有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。 这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。 public enum emAction &#123; None&#x3D;0, GetUp,&...","link":"","photos":[],"count_time":{"symbolsCount":539,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c#/封装","uid":"b760326611e8ddc16545105090a99769","slug":"学习笔记/Csharp/Class类/封装","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:56.847Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/封装.json","keywords":null,"cover":null,"text":"# 封装的主要目的 封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。 封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐...","link":"","photos":[],"count_time":{"symbolsCount":263,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}