{"title":"c#/this 和 base 的区别","uid":"e262221502c6a5b9d791265ede6d33bb","slug":"学习笔记/Csharp/Class类/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:20.985Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/this 和 base 的区别.json","keywords":null,"cover":null,"content":"<h2 id=\"this和base都是c中的关键字它们的主要区别在于\"><a class=\"markdownIt-Anchor\" href=\"#this和base都是c中的关键字它们的主要区别在于\">#</a>  <code>this</code>  和 <code>base</code>  都是 C# 中的关键字，它们的主要区别在于：</h2>\n<ol>\n<li><code>this</code>  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 <code>this</code>  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。</li>\n<li><code>base</code>  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 <code>base</code>  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。</li>\n</ol>\n<p>以下是一个示例，演示了如何使用 <code>this</code>  和 <code>base</code>  关键字：</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">class Person\n\n&#123;\n\n    public string Name &#123; get; set; &#125;\n\n    public int Age &#123; get; set; &#125;\n\n    public Person(string name, int age)\n\n    &#123;\n\n        this.Name &#x3D; name;\n\n        this.Age &#x3D; age;\n\n    &#125;\n\n&#125;\n\nclass Student : Person\n\n&#123;\n\n    public string School &#123; get; set; &#125;\n\n    public Student(string name, int age, string school) : base(name, age)\n\n    &#123;\n\n        this.School &#x3D; school;\n\n    &#125;\n\n    public void Study()\n\n    &#123;\n\n        Console.WriteLine(&quot;&#123;0&#125; is studying at &#123;1&#125;.&quot;, this.Name, this.School);\n\n    &#125;\n\n    public void ShowInfo()\n\n    &#123;\n\n        Console.WriteLine(&quot;Name: &#123;0&#125;, Age: &#123;1&#125;, School: &#123;2&#125;&quot;, this.Name, this.Age, this.School);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nStudent student &#x3D; new Student(&quot;Tom&quot;, 18, &quot;ABC School&quot;);\n\nstudent.Study(); &#x2F;&#x2F; 输出：Tom is studying at ABC School.\n\nstudent.ShowInfo(); &#x2F;&#x2F; 输出：Name: Tom, Age: 18, School: ABC School<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，我们定义了一个 <code>Person</code>  类和一个 <code>Student</code>  类， <code>Student</code>  类继承自 <code>Person</code>  类。在 <code>Person</code>  类中，我们定义了一个构造函数，使用 <code>this</code>  关键字来引用当前对象的成员变量。在 <code>Student</code>  类中，我们定义了一个构造函数，使用 <code>base</code>  关键字来调用基类的构造函数。在 <code>Student</code>  类中，我们还定义了两个方法 <code>Study</code>  和 <code>ShowInfo</code> ，分别使用 <code>this</code>  关键字和 <code>base</code>  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 <code>Student</code>  对象，并调用了它的 <code>Study</code>  和 <code>ShowInfo</code>  方法，输出了相应的信息。</p>\n<p>总的来说， <code>this</code>  关键字用于引用当前对象， <code>base</code>  关键字用于引用基类对象。它们的应用场景不同， <code>this</code>  关键字通常用于访问当前对象的成员， <code>base</code>  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。</p>\n","text":"# this 和 base 都是 C# 中的关键字，它们的主要区别在于： this 关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this 关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。 base 关键字用于引用基类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this%E5%92%8Cbase%E9%83%BD%E6%98%AFc%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%83%E4%BB%AC%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E5%9C%A8%E4%BA%8E\"><span class=\"toc-text\">  this  和 base  都是 C# 中的关键字，它们的主要区别在于：</span></a></li></ol>","author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c#/抽象方法（abstruct）和虚方法(virtual)的区别","uid":"da7125ed58b8c094cc6f04018e8ade4f","slug":"学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:37.762Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别.json","keywords":null,"cover":null,"text":"实际上虚函数就类似于初省值 # 抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于： 抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c#/抽象函数","uid":"a3127223cee8ed98b2c97d067dde0e0d","slug":"学习笔记/Csharp/类的更多表现形式/抽象类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:41.839Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/抽象类.json","keywords":null,"cover":[],"text":" # 抽象类不可被实例化 # 抽象类之中的抽象函数必须在子类写好实现的方法体 ","link":"","photos":[],"count_time":{"symbolsCount":41,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":13,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":13,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":12,"path":"api/tags/C.json"}],"author":{"name":"CenYi","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}