{"title":"c#/封装","uid":"b760326611e8ddc16545105090a99769","slug":"学习笔记/Csharp/Class类/封装","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:56.847Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/封装.json","keywords":null,"cover":null,"content":"<h2 id=\"封装的主要目的\"><a class=\"markdownIt-Anchor\" href=\"#封装的主要目的\">#</a> 封装的主要目的</h2>\n<p>封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。</p>\n<p>封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。</p>\n<p>在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。</p>\n","text":"# 封装的主要目的 封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。 封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐...","link":"","photos":[],"count_time":{"symbolsCount":263,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%BB%E8%A6%81%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\"> 封装的主要目的</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"c#/this 和 base 的区别","uid":"e262221502c6a5b9d791265ede6d33bb","slug":"学习笔记/Csharp/Class类/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:20.985Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/this 和 base 的区别.json","keywords":null,"cover":null,"text":"# this 和 base 都是 C# 中的关键字，它们的主要区别在于： this 关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this 关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。 base 关键字用于引用基类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c#/抽象函数","uid":"a3127223cee8ed98b2c97d067dde0e0d","slug":"学习笔记/Csharp/类的更多表现形式/抽象类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:41.839Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/抽象类.json","keywords":null,"cover":[],"text":" # 抽象类不可被实例化 # 抽象类之中的抽象函数必须在子类写好实现的方法体 ","link":"","photos":[],"count_time":{"symbolsCount":41,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}