{"total":29,"pageSize":12,"pageCount":3,"data":[{"title":"c#/抽象方法（abstruct）和虚方法(virtual)的区别","uid":"da7125ed58b8c094cc6f04018e8ade4f","slug":"学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:37.762Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别.json","cover":null,"text":"实际上虚函数就类似于初省值 # 抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于： 抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/抽象类","uid":"02a13521d1a9067da4901a7085158d6a","slug":"学习笔记/Csharp/类的更多表现形式/密封类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:34.772Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/密封类.json","cover":[],"text":"/* 抽象类 1. 抽象类不可以被实例化 2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体 3. 抽象类的子类必须实现抽象类中的所有抽象函数 4. 抽象类中可以有非抽象函数 5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数 6. 非抽象类可以继承抽象类，但是子类...","link":"","photos":[],"count_time":{"symbolsCount":345,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"“SHUFLY交流会有感“","uid":"6c5c86eb6f1c168ac1792c0c4f39d96d","slug":"SHUFLY交流会有感","date":"2023-04-17T15:39:47.000Z","updated":"2023-04-19T09:17:49.003Z","comments":true,"path":"api/articles/SHUFLY交流会有感.json","cover":"105449863_p0.jpeg","text":"首先真的十分感谢在交流会上分享经验的学长学姐们，真的收获很多。特别是对于我这种信息面不是很广的大一新生来说，像是打开了新世界的大门。接下来我将通过三个方面来简述一下我的收获和反省 # 1. 个人选择 首先个人选择这一方面，一定是从自身出发，一位数学系的学长说的很好 ==“别人的经...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"life","slug":"life","count":1,"path":"api/categories/life.json"}],"tags":[{"name":"感悟","slug":"感悟","count":1,"path":"api/tags/感悟.json"},{"name":"成长","slug":"成长","count":1,"path":"api/tags/成长.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"构造函数“","uid":"b5a6b70e346f74ffeebaddf844453a03","slug":"构造函数“","date":"2023-04-08T08:19:59.000Z","updated":"2023-04-08T08:19:59.233Z","comments":true,"path":"api/articles/构造函数“.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c++/引用","uid":"21559278596ca6545fd6615939158e40","slug":"1 引用","date":"2023-03-31T16:39:59.000Z","updated":"2023-06-23T04:11:42.854Z","comments":true,"path":"api/articles/1 引用.json","cover":"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304180007154.jpg","text":"1. 引用 # 引用的概念 某个变量的引用，等价于这个变量，相当于这个变量的别名 引用 (&amp;) 语法如下 int n=4; int &amp;r=n; 对于 n 的运算，r 同样也会做相同的运算。 反过来，对于 r 的运算，同样也会作用到 n 上。 如 int n=7; ...","link":"","photos":[],"count_time":{"symbolsCount":546,"symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"},{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}