{"name":"语言学习","slug":"语言学习","count":11,"postlist":[{"title":"c++/引用","uid":"21559278596ca6545fd6615939158e40","slug":"1 引用","date":"2023-03-31T16:39:59.000Z","updated":"2023-06-23T04:11:42.854Z","comments":true,"path":"api/articles/1 引用.json","keywords":null,"cover":"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202304180007154.jpg","text":"1. 引用 # 引用的概念 某个变量的引用，等价于这个变量，相当于这个变量的别名 引用 (&amp;) 语法如下 int n=4; int &amp;r=n; 对于 n 的运算，r 同样也会做相同的运算。 反过来，对于 r 的运算，同样也会作用到 n 上。 如 int n=7; ...","link":"","photos":[],"count_time":{"symbolsCount":546,"symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"},{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/条件语句（线性）","uid":"54d447f8623da657ba449b31985df4c4","slug":"学习笔记/Csharp/条件语句（线性）","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:05:22.098Z","comments":true,"path":"api/articles/学习笔记/Csharp/条件语句（线性）.json","keywords":null,"cover":null,"text":" void Func1() &#123; int value1&#x3D;15; if(value1&gt;5) &#123; Debug.Log(&quot;value1 is greater than 5&quot;);&#x2F;&#x2F;value1满足了第一个条件就执...","link":"","photos":[],"count_time":{"symbolsCount":537,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/访问等级","uid":"b2e8321107bb1bee6888ca2a7202b079","slug":"学习笔记/Csharp/访问等级","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:53.750Z","comments":true,"path":"api/articles/学习笔记/Csharp/访问等级.json","keywords":null,"cover":null,"text":"# 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是： public ：公共的，可以被任何代码访问。 protected internal ：受保护的内部的，可...","link":"","photos":[],"count_time":{"symbolsCount":391,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/枚举类的访问等级规则","uid":"d79f42eaa171a5fe6902544e2bd5f323","slug":"学习笔记/Csharp/枚举类的访问等级规则 enum","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:51.726Z","comments":true,"path":"api/articles/学习笔记/Csharp/枚举类的访问等级规则 enum.json","keywords":null,"cover":null,"text":" enum emAction &#123; GetUp, Wash, Eat, Work, &#125; public emAction Action; 上面这串代码出现了一个错误，即 emAction 枚举类型的访问修饰符与 mAction 字段的访问修饰符不匹配。具体来说， ...","link":"","photos":[],"count_time":{"symbolsCount":944,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/public变量的赋值","uid":"dcd15c9ea32f43ce189ea4a554532717","slug":"学习笔记/Unity引擎/public变量的赋值","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:17.087Z","comments":true,"path":"api/articles/学习笔记/Unity引擎/public变量的赋值.json","keywords":null,"cover":[],"text":"如果在 Unity 引擎中的对象中挂在的脚本里。 有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。 这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。 public enum emAction &#123; None&#x3D;0, GetUp,&...","link":"","photos":[],"count_time":{"symbolsCount":539,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/this 和 base 的区别","uid":"e262221502c6a5b9d791265ede6d33bb","slug":"学习笔记/Csharp/Class类/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:06:20.985Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/this 和 base 的区别.json","keywords":null,"cover":null,"text":"# this 和 base 都是 C# 中的关键字，它们的主要区别在于： this 关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this 关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。 base 关键字用于引用基类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/封装","uid":"b760326611e8ddc16545105090a99769","slug":"学习笔记/Csharp/Class类/封装","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-22T18:04:56.847Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/封装.json","keywords":null,"cover":null,"text":"# 封装的主要目的 封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。 封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐...","link":"","photos":[],"count_time":{"symbolsCount":263,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/抽象函数","uid":"a3127223cee8ed98b2c97d067dde0e0d","slug":"学习笔记/Csharp/类的更多表现形式/抽象类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:41.839Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/抽象类.json","keywords":null,"cover":[],"text":" # 抽象类不可被实例化 # 抽象类之中的抽象函数必须在子类写好实现的方法体 ","link":"","photos":[],"count_time":{"symbolsCount":41,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/静态类","uid":"c92b939053502639e9ed85c984e3e15d","slug":"学习笔记/Csharp/类的更多表现形式/静态类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:36.472Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/静态类.json","keywords":null,"cover":[],"text":"静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。 上面是错误示范 应该使用 MyClass3 这个类名而不是 myClass3 这个实例 ","link":"","photos":[],"count_time":{"symbolsCount":79,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/抽象方法（abstruct）和虚方法(virtual)的区别","uid":"da7125ed58b8c094cc6f04018e8ade4f","slug":"学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:37.762Z","comments":true,"path":"api/articles/学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别.json","keywords":null,"cover":null,"text":"实际上虚函数就类似于初省值 # 抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现 抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于： 抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"c#/抽象类","uid":"02a13521d1a9067da4901a7085158d6a","slug":"学习笔记/Csharp/类的更多表现形式/密封类","date":"2023-06-22T16:39:59.000Z","updated":"2023-06-23T04:11:34.772Z","comments":true,"path":"api/articles/学习笔记/Csharp/类的更多表现形式/密封类.json","keywords":null,"cover":[],"text":"/* 抽象类 1. 抽象类不可以被实例化 2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体 3. 抽象类的子类必须实现抽象类中的所有抽象函数 4. 抽象类中可以有非抽象函数 5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数 6. 非抽象类可以继承抽象类，但是子类...","link":"","photos":[],"count_time":{"symbolsCount":345,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":10,"path":"api/categories/C.json"}],"tags":[{"name":"语言学习","slug":"语言学习","count":11,"path":"api/tags/语言学习.json"},{"name":"笔记","slug":"笔记","count":11,"path":"api/tags/笔记.json"},{"name":"C#","slug":"C","count":10,"path":"api/tags/C.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}