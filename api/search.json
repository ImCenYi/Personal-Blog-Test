[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"# 方法 1\n# win+R  打开命令行工具，输入 control system 打开高级系统设置，点击环境变量，将工具的（bin 文件）的路径加入到环境变量 path 中。\n# 方法 2\n# 直接通过 设置 -&gt; 系统 -&gt; 高级系统设置 -&gt; 进入到 control system\n","slug":"学习笔记/细小操作/win11如何设置环境变量","date":"2023-06-22T17:44:40.294Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/类的更多表现形式/泛型类","date":"2023-06-22T17:44:40.279Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/类的更多表现形式/接口","date":"2023-06-22T17:44:40.279Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/继承","date":"2023-06-22T17:44:40.271Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/虚方法","date":"2023-06-22T17:44:40.271Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/构造函数，析构函数","date":"2023-06-22T17:44:40.269Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/多态","date":"2023-06-22T17:44:40.261Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/创建类","date":"2023-06-22T17:44:40.261Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/Csharp/Class类/抽象方法","date":"2023-06-22T17:44:40.261Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/C++/未命名","date":"2023-06-22T17:44:40.256Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/C++/未命名 2","date":"2023-06-22T17:44:40.253Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/C++/未命名 1","date":"2023-06-22T17:44:40.253Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"","slug":"学习笔记/C++/未命名 3","date":"2023-06-22T17:44:40.253Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"# 一定要记得 Log 的 L 大写！！！！\n","slug":"学习笔记/BUG/Debug.Log","date":"2023-06-22T17:44:40.245Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\n# 这个 C# 脚本文件在 Unity 所开的项目中可以正常运行，但为什么直接在 vscode 运行不行呢。\n# 1. 首先是报错的原因\n这个错误提示意味着 PowerShell 无法找到名为 scriptcs 的命令。这通常是因为 scriptcs 没有被正确安装或者没有被添加到系统的 PATH 环境变量中。请确保您已经正确安装了 scriptcs，并将其添加到 PATH 环境变量中。如果您已经安装了 scriptcs 并且将其添加到了 PATH 环境变量中，那么请检查您的命令是否正确拼写。\n# 2. 那为什么在 Unity 的项目对象中可以直接运行，而不会报错\nUnity 引擎已经为您配置好了项目所需的环境，包括编译器、库和其他依赖项。在 Unity 中，您可以直接编写 C# 代码，并且 Unity 引擎会自动编译和运行您的代码。因此，您可以在 Unity 中直接运行这段代码，而不需要手动配置环境。\n在 Unity 中使用了 C# 脚本，那么您不需要使用 scriptcs 来运行它们。Unity 引擎会自动编译和运行您的脚本。因此，如果您在 Unity 中使用 C# 脚本，那么将 scriptcs 添加到 PATH 环境变量中不会对您的 Unity 项目造成任何影响。但是，如果您在 Unity 之外的地方使用 scriptcs 运行 C# 脚本，那么您需要将 scriptcs 添加到 PATH 环境变量中。\n# 解决方法，将 scriptcs 所在的目录加入到环境变量当中。\n","slug":"学习笔记/BUG/直接通过vscode运行CS文件报错","date":"2023-06-22T17:44:40.245Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"抽象方法只能在抽象类中定义\n这个错误提示是因为您在抽象类 Polygon  中声明了一个抽象方法 Purarea ，但是没有为它提供方法体。在 C# 中，抽象方法必须以分号结尾，并且不能有方法体，因为它们没有实现，必须在子类中实现。\n要解决这个问题，您需要为 Purarea  方法提供方法体，或者将 Polygon  类声明为抽象类，以便子类可以实现 Purarea  方法。\n以下是一个示例，演示了如何在 Polygon  类中声明抽象方法：\n\nabstract class Polygon\n\n&#123;\n\n    public abstract void Purarea();\n\n&#125;\n\nclass Rectangle : Polygon\n\n&#123;\n\n    public override void Purarea()\n\n    &#123;\n\n        Console.WriteLine(&quot;Calculate the area of a rectangle.&quot;);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nPolygon polygon &#x3D; new Rectangle();\n\npolygon.Purarea(); &#x2F;&#x2F; 输出：Calculate the area of a rectangle.\n在这个示例中，我们定义了一个抽象类 Polygon  和一个非抽象子类 Rectangle ，它们都实现了 Purarea  方法。在使用示例中，我们创建了一个 Rectangle  对象，并将其赋值给 Polygon  类型的变量 polygon 。然后，我们调用 polygon.Purarea()  方法，它会调用 Rectangle  类中的 Purarea  方法，并输出 Calculate the area of a rectangle. 。\n","slug":"学习笔记/BUG/抽象方法的方法体只能在子类中实现，而不能写在基类中","date":"2023-06-22T17:44:40.245Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"54d447f8623da657ba449b31985df4c4","title":"c#/条件语句（线性）","content":"    void Func1()\n\n    &#123;\n\n        int value1&#x3D;15;\n\n        if(value1&gt;5)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 5&quot;);&#x2F;&#x2F;value1满足了第一个条件就执行了，输出语句\n\n        &#125;\n\n        else if(value1&gt;10)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 10&quot;);&#x2F;&#x2F;由于第一个已经执行了，就终端这一串条件语句，所以虽然满足条件但没有执行\n\n        &#125;\n\n        else\n\n        &#123;\n\n            Debug.Log(&quot;value1 is less than 5&quot;);\n\n        &#125;\n\n    &#125;\n\n&#125;\n# 条件检测是线性的，只要满足前面的就不会执行后面的\n","slug":"学习笔记/Csharp/条件语句（线性）","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"b2e8321107bb1bee6888ca2a7202b079","title":"c#/访问等级","content":"# 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：\n\npublic ：公共的，可以被任何代码访问。\nprotected internal ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。\ninternal ：内部的，可以被同一程序集中的代码访问。\nprotected ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。\nprivate ：私有的，只能被同一类中的代码访问。\n\n访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 private  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 public  可以使其他代码更容易地使用它们，从而提高代码的可维护性。\n","slug":"学习笔记/Csharp/访问等级","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"d79f42eaa171a5fe6902544e2bd5f323","title":"c#/枚举类的访问等级规则","content":" enum emAction\n&#123;\n    GetUp,\n    Wash,\n    Eat,\n    Work,\n&#125;\n\npublic emAction Action;\n上面这串代码出现了一个错误，即 emAction  枚举类型的访问修饰符与 mAction  字段的访问修饰符不匹配。具体来说， emAction  枚举类型是默认的（即没有访问修饰符），而 Action  字段是公共的（ public ）。\n# 这违反了 C# 的访问性限制\n因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 emAction  枚举类型的访问修饰符更改为公共的（ public ）或将 mAction  字段的访问修饰符更改为默认 (private 级别) 的（即删除 public  关键字）。\nenum emAction\n我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 private  访问等级，是最低一级。\n关于访问等级先后详细看 [[访问等级]]\n 如果 Action  字段是 public ，则将 emAction  枚举类型的可访问性设置为 private  是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。\n# 那为什么 C# 要有这个访问性限制呢。其实也不难理解\nC# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。\n例如，在这个示例中， mAction  字段的访问修饰符是 public ，而 emAction  枚举类型的访问修饰符是默认的（即 private ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 emAction  枚举类型的可访问性低于 mAction  字段的可访问性。\n说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。\n","slug":"学习笔记/Csharp/枚举类的访问等级规则 enum","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"dcd15c9ea32f43ce189ea4a554532717","title":"c#/public变量的赋值","content":"如果在 Unity 引擎中的对象中挂在的脚本里。\n有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。\n这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。\n    public enum emAction\n\n    &#123;\n\n        None&#x3D;0,\n\n        GetUp,&#x2F;&#x2F;1\n\n        Wash,&#x2F;&#x2F;2\n\n        Eat,&#x2F;&#x2F;3\n\n        Work,&#x2F;&#x2F;4\n\n    &#125;\n\n    public emAction mAction &#x3D; emAction.Work;\n    Debug.Log((int)mAction);\n我们对 mAction  的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。\n\n如果我们在脚本的选项中，选择了 mAction 的初值，那么这个值将覆盖脚本代码中的初始值（注意，只是初始值）。\n上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 mAction  所附的 Work。所以打印出来的还是 None 的 0。\n","slug":"学习笔记/Unity引擎/public变量的赋值","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"e262221502c6a5b9d791265ede6d33bb","title":"c#/this 和 base 的区别","content":"#  this  和 base  都是 C# 中的关键字，它们的主要区别在于：\n\nthis  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 this  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。\nbase  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 base  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。\n\n以下是一个示例，演示了如何使用 this  和 base  关键字：\nclass Person\n\n&#123;\n\n    public string Name &#123; get; set; &#125;\n\n    public int Age &#123; get; set; &#125;\n\n    public Person(string name, int age)\n\n    &#123;\n\n        this.Name &#x3D; name;\n\n        this.Age &#x3D; age;\n\n    &#125;\n\n&#125;\n\nclass Student : Person\n\n&#123;\n\n    public string School &#123; get; set; &#125;\n\n    public Student(string name, int age, string school) : base(name, age)\n\n    &#123;\n\n        this.School &#x3D; school;\n\n    &#125;\n\n    public void Study()\n\n    &#123;\n\n        Console.WriteLine(&quot;&#123;0&#125; is studying at &#123;1&#125;.&quot;, this.Name, this.School);\n\n    &#125;\n\n    public void ShowInfo()\n\n    &#123;\n\n        Console.WriteLine(&quot;Name: &#123;0&#125;, Age: &#123;1&#125;, School: &#123;2&#125;&quot;, this.Name, this.Age, this.School);\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nStudent student &#x3D; new Student(&quot;Tom&quot;, 18, &quot;ABC School&quot;);\n\nstudent.Study(); &#x2F;&#x2F; 输出：Tom is studying at ABC School.\n\nstudent.ShowInfo(); &#x2F;&#x2F; 输出：Name: Tom, Age: 18, School: ABC School\n在这个示例中，我们定义了一个 Person  类和一个 Student  类， Student  类继承自 Person  类。在 Person  类中，我们定义了一个构造函数，使用 this  关键字来引用当前对象的成员变量。在 Student  类中，我们定义了一个构造函数，使用 base  关键字来调用基类的构造函数。在 Student  类中，我们还定义了两个方法 Study  和 ShowInfo ，分别使用 this  关键字和 base  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 Student  对象，并调用了它的 Study  和 ShowInfo  方法，输出了相应的信息。\n总的来说， this  关键字用于引用当前对象， base  关键字用于引用基类对象。它们的应用场景不同， this  关键字通常用于访问当前对象的成员， base  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。\n","slug":"学习笔记/Csharp/Class类/this 和 base 的区别","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"b760326611e8ddc16545105090a99769","title":"c#/封装","content":"# 封装的主要目的\n封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。\n封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。\n在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。\n","slug":"学习笔记/Csharp/Class类/封装","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"a3127223cee8ed98b2c97d067dde0e0d","title":"c#/抽象函数","content":"\n\n# 抽象类不可被实例化\n\n# 抽象类之中的抽象函数必须在子类写好实现的方法体\n","slug":"学习笔记/Csharp/类的更多表现形式/抽象类","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"c92b939053502639e9ed85c984e3e15d","title":"c#/静态类","content":"静态变量不可以通过实例来访问，只能通过类名，因为他是共有的。\n\n\n 上面是错误示范\n\n应该使用 MyClass3 这个类名而不是 myClass3 这个实例\n","slug":"学习笔记/Csharp/类的更多表现形式/静态类","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"da7125ed58b8c094cc6f04018e8ade4f","title":"c#/抽象方法（abstruct）和虚方法(virtual)的区别","content":"实际上虚函数就类似于初省值\n# 抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现\n抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于：\n\n抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。\n抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。\n抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。\n\n下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数：\nabstract class Shape\n\n&#123;\n\n    public abstract double GetArea();&#x2F;&#x2F;这里的方法体必须是空\n\n&#125;\n\nclass Rectangle : Shape\n\n&#123;\n\n    public double Width &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()&#x2F;&#x2F;子类写入方法体实现\n\n    &#123;\n\n        return Width * Height;\n\n    &#125;\n\n&#125;\nclass Circle : Shape\n\n&#123;\n\n    public double Radius &#123; get; set; &#125;\n\n    public override double GetArea(）\n\n    &#123;\n\n        return Math.PI * Radius * Radius;\n\n    &#125;\n\n&#125;\n\nclass Square : Shape\n\n&#123;\n\n    public double Side &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return Side * Side;\n\n    &#125;\n\n&#125;\n\nclass Triangle : Shape\n\n&#123;\n\n    public double Base &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return 0.5 * Base * Height;\n\n    &#125;\n\n&#125;\n\n&#x2F;&#x2F; 使用示例\n\nShape shape1 &#x3D; new Rectangle &#123; Width &#x3D; 10, Height &#x3D; 20 &#125;;\n\nShape shape2 &#x3D; new Circle &#123; Radius &#x3D; 5 &#125;;\n\nShape shape3 &#x3D; new Square &#123; Side &#x3D; 10 &#125;;\n\nShape shape4 &#x3D; new Triangle &#123; Base &#x3D; 10, Height &#x3D; 5 &#125;;\n\nConsole.WriteLine(shape1.GetArea()); &#x2F;&#x2F; 输出：200\n\nConsole.WriteLine(shape2.GetArea()); &#x2F;&#x2F; 输出：78.53981633974483\n\nConsole.WriteLine(shape3.GetArea()); &#x2F;&#x2F; 输出：100\n\nConsole.WriteLine(shape4.GetArea()); &#x2F;&#x2F; 输出：25\n在这个示例中，我们定义了一个抽象类 Shape  和四个子类 Rectangle 、 Circle 、 Square  和 Triangle ，它们都重写了 GetArea  方法。 GetArea  方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 GetArea  方法，输出了它们的面积。\nabstract  和 virtual  都是 C# 中用于实现多态的关键字，它们的主要区别在于：\n\nabstract  用于声明抽象方法，它必须在派生类中进行实现，而 virtual  用于声明虚方法，它可以在派生类中进行重写，但不是必须的。\nabstract  方法没有实现，只有方法签名，而 virtual  方法有默认的实现，可以在基类中提供。\nabstract  方法只能在抽象类中声明，而 virtual  方法可以在普通的类中声明。\n\n","slug":"学习笔记/Csharp/Class类/抽象方法（abstruct）和虚方法(virtual)的区别","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"02a13521d1a9067da4901a7085158d6a","title":"c#/抽象类","content":"/*  抽象类\n1. 抽象类不可以被实例化\n2. 抽象函数只能写在抽象类之中，并且抽象函数不能有方法体\n3. 抽象类的子类必须实现抽象类中的所有抽象函数\n4. 抽象类中可以有非抽象函数\n5. 抽象类可以继承抽象类，但是子类必须实现所有抽象函数\n6. 非抽象类可以继承抽象类，但是子类必须实现所有抽象函数\n*/\n# 密封类\n1. 密封类不可以被继承（他只能是子类）\n2. 密封类不能是抽象的。sealed 和 abstract 是互斥的\n（其实很好理解，密封类不能作为基类，只能是子类\n而抽象类虽然可以既是基类又是子类，但是其中的抽\n象函数是不能在抽象类中写方法体的，必须要在子类\n中实现，这就和密封类的定义【不可被继承，不能有子类】相违背了）\n\n# 上述报错，表明了抽象类和封闭类是互斥的\n","slug":"学习笔记/Csharp/类的更多表现形式/密封类","date":"2023-06-22T16:39:59.000Z","categories_index":"C#","tags_index":"语言学习,笔记,C#","author_index":"Aurora"},{"id":"6c5c86eb6f1c168ac1792c0c4f39d96d","title":"“SHUFLY交流会有感“","content":"首先真的十分感谢在交流会上分享经验的学长学姐们，真的收获很多。特别是对于我这种信息面不是很广的大一新生来说，像是打开了新世界的大门。接下来我将通过三个方面来简述一下我的收获和反省\n# 1. 个人选择\n\n\n首先个人选择这一方面，一定是从自身出发，一位数学系的学长说的很好 ==“别人的经验，别人的经历，终究是别人的，而不是自己的，它并没有办法真正左右你的方向，做出选择的永远是自己。”==\n\n\n这对于我来说启发真的很大。近期在周围的压力下和摸索自我的过程中，我仿佛陷入一个泥沼，困与自身的矛盾和焦虑之中，也就是我们常说的精神内耗。对于自我的渴求，和认知的不足，让我的精神深受折磨。于是我便通过网络，或者和一些牛人朋友的交谈，尝试找寻一条适合自己的道路，或者说是想要去模仿，想要去走一条他们走过的路，说白了还是思想上的偷懒。导致了我一直没有走出这个怪圈，而那位学长的话一下子就点醒了我，从一开始我的方向就错了，我只想着最好能找到一条照着走就完事的路。但我忽视了个体之间的差异，别人终究不是我。付出自己的时间成本去不断试错，只有自我承担着这种风险，才能得到真正的成长，走出的才会是真正适合自己的道路。而这也是我作为一个攀爬者成就自我的必由之路。\n\n\n# 2. 方向选择（深造 or 就业）\n\n我对于这一方面了解的也不是特别多，但能尽可能地早做选择总是没错的。\n\n针对我个人而言，我是一个很讨厌按照规矩办事的一个人，准确的说，我很讨厌那种无效和重复的付出。在我行动之前，我一定要先明确，我的目的，以及我如何完成目的，是否有更好的途径来达成我的目的。这就导致了，我不太愿意随大流，走一条相对稳妥的道路。\n\n\n# 深造 or 就业\n\n\n我目前是偏向于毕业直接投入就业一点（当然随着认知和想法的变化或许会发生改变），或许在大二大三就会开始尝试找实习和项目。至于我为什么不选择去深造读研读博这条路呢，明明大家都在朝这个方向发展，整个大环境给我的感觉就是，不读研就很难有出路。\n\n\n# 我为自己归纳了以下几个原因\n\n\n\n我对于科研事业并不抱有太大的热忱：\n这也是我认为最主要的原因，我认为一个人的主观能动性是非常重要的，一个人要是被强迫去做一个完全不感兴趣的东西，那效率毫无疑问的低的。而且我前面也提到了，我是一个不愿意随大流的人，我不会因为环境的 push，而将过多的心理花在一个不感兴趣的事情上。\n不明白科研的方向：\n如果我想去搞研究，我起码要知道自己想研究什么方向吧，总不可能像一只无头苍蝇一样乱飞。当然这也可能是因为我目前还未分流，对于专业认知还不是很清晰导致的。\n科研环境：\n目前国内的科研环境一言难尽，而对于出国又碍于自己的外语能力。（在背了在背了）。\n\n# 3. 为我坚定了短期方向（种‘数媒’（雾））\n\n这个最后一点，也是我认为收获最大的一点。在交流会的最后私下提问交流的环境，我有幸认识到了 20 级数媒在读的卢学长，通过和学长的交流，我对于数字媒体技术这个专业有了更加清晰的认知，同样也更加坚定了自己的短期道路 —— 进入数字媒体技术专业。至于为什么会选择这个方向呢。首先我个人是理工科出身，同样对于艺术表达这方面也十分感兴趣（当然可能莫得艺术细胞？）。理工科的出身让我对于计算机方面也十分感兴趣，但是从小开始自己就有这过剩的表达欲，我想把自己所想自己的体会让别人知道，而艺术就是一个很好地载体，在高考备考期间，自己甚至抽出来时间学了学 pr（可能上海确实是毕竟闲），剪映等剪辑软件自己尝试着做做自媒体。虽然说没有多少的流量，并没有让更多人看到，但是在这个过程中，我能真正感受到快乐，那种满足。所以这也是我难以割舍的。那怎么办呢。结论就是 ——==“小孩子才做选择，我全都要”== 这也让我盯上了数字媒体技术，它可以同时满足我对计算机和艺术表达的诉求。当然学校的硬件也很足啊。（三套完备的光学动捕啊。斯哈斯哈）\n\n# 一切都还是刚开始，一切都是未知数，期待自己接下来的成长\n","slug":"SHUFLY交流会有感","date":"2023-04-17T15:39:47.000Z","categories_index":"life","tags_index":"感悟,成长","author_index":"Aurora"},{"id":"b5a6b70e346f74ffeebaddf844453a03","title":"构造函数“","content":"","slug":"构造函数“","date":"2023-04-08T08:19:59.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"21559278596ca6545fd6615939158e40","title":"c++/引用","content":"1. 引用\n# 引用的概念\n某个变量的引用，等价于这个变量，相当于这个变量的别名\n引用 (&amp;) 语法如下\nint n=4;\nint &amp;r=n;\n对于 n 的运算，r 同样也会做相同的运算。\n反过来，对于 r 的运算，同样也会作用到 n 上。\n如\nint n=7;\nint &amp;r=n;\nr=4;     //这一步运算也作用到了n上\ncout&lt;&lt;r;\ncout&lt;&lt;n;\nn=5;     //这一步运算也作用到了r上\ncout&lt;&lt;r;  \n最后 r=n=5，可见引用运算同步。\n\n注意，引用是从一而终的，不可以引用其他变量\n引用只能引用变量，不能引用常量和表达式\n\n 这里 r1=b 这一句，并不是让 r1 引用 b，而是给 r1 赋了 b 的值\n# 引用的作用\n写一个交换整型变量的值。\n\n实际上 n1，n2，并不会改变。\n但是引用可以很好解决这个问题。\n\n在这里由与附给形参的类型是引用，所以 a，b 与 n1，n2 等价。\n在子函数里 ab 所做的运算，n1n2 同样也会执行，所以 n1n2 会改变。\n返回值是个引用，则可以对于返回值进行赋值。\n\n# 常引用\n\n注意，不可以通过常引用来改变引用的内容（可以用其他方式）。!\n\n","slug":"1 引用","date":"2023-03-31T16:39:59.000Z","categories_index":"C++","tags_index":"C++,语言学习,笔记","author_index":"Aurora"}]