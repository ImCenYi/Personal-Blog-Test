{
    "version": "https://jsonfeed.org/version/1",
    "title": "CenYi • All posts by \"c#\" tag",
    "description": "",
    "home_page_url": "https://imcenyi.github.io",
    "items": [
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E8%A7%84%E5%88%99%20enum/",
            "title": "c#/枚举类的访问等级规则",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<pre><code class=\"language-C#\"> enum emAction\n&#123;\n    GetUp,\n    Wash,\n    Eat,\n    Work,\n&#125;\n\npublic emAction Action;\n</code></pre>\n<p>上面这串代码出现了一个错误，即 <code>emAction</code>  枚举类型的访问修饰符与 <code>mAction</code>  字段的访问修饰符不匹配。具体来说， <code>emAction</code>  枚举类型是默认的（即没有访问修饰符），而 <code>Action</code>  字段是公共的（ <code>public</code> ）。</p>\n<h3 id=\"这违反了c的访问性限制\"><a class=\"markdownIt-Anchor\" href=\"#这违反了c的访问性限制\">#</a> 这违反了 C# 的访问性限制</h3>\n<p>因为一个字段的可访问性不能高于其类型的可访问性。因此，您需要将 <code>emAction</code>  枚举类型的访问修饰符更改为公共的（ <code>public</code> ）或将 <code>mAction</code>  字段的访问修饰符更改为默认 (private 级别) 的（即删除 <code>public</code>  关键字）。</p>\n<pre><code class=\"language-C#\">enum emAction\n</code></pre>\n<p>我们可以看到上面那串代码之中，所定义的 emAction 枚举类。前面没有刻意加上访问修饰符，则默认是 <code>private</code>  访问等级，是最低一级。<br>\n<mark>关于访问等级先后详细看 [[访问等级]]</mark><br>\n 如果 <code>Action</code>  字段是 <code>public</code> ，则将 <code>emAction</code>  枚举类型的可访问性设置为 <code>private</code>  是不合适的，因为这会违反 C# 的访问性规则。一个字段的可访问性不能高于其类型的可访问性。</p>\n<h3 id=\"那为什么c要有这个访问性限制呢-其实也不难理解\"><a class=\"markdownIt-Anchor\" href=\"#那为什么c要有这个访问性限制呢-其实也不难理解\">#</a> 那为什么 C# 要有这个访问性限制呢。其实也不难理解</h3>\n<p>C# 中语段的访问等级不能高于枚举类型的访问等级，是因为一个语段（如字段、属性、方法等）的可访问性依赖于其类型的可访问性。如果一个语段的类型的可访问性比它本身的可访问性更低，那么这个语段就不能被访问，因为它的类型不可访问。</p>\n<p>例如，在这个示例中， <code>mAction</code>  字段的访问修饰符是 <code>public</code> ，而 <code>emAction</code>  枚举类型的访问修饰符是默认的（即 <code>private</code> ）。这违反了 C# 的访问性规则，因为一个字段的可访问性不能高于其类型的可访问性。因此，编译器会报错，提示 <code>emAction</code>  枚举类型的可访问性低于 <code>mAction</code>  字段的可访问性。</p>\n<p>说白了，这个语段的访问，必须要访问到这个枚举类型本身，如果这个语段的访问性比枚举类型高，那么对于这个语段的访问就不成立。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7/",
            "title": "c#/访问等级",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<h2 id=\"访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是\"><a class=\"markdownIt-Anchor\" href=\"#访问等级access-level是指在c中用于控制类-结构体-接口-字段-属性-方法和构造函数等成员的可访问性的修饰符-c中有五个访问等级从高到低分别是\">#</a> 访问等级（Access Level）是指在 C# 中用于控制类、结构体、接口、字段、属性、方法和构造函数等成员的可访问性的修饰符。C# 中有五个访问等级，从高到低分别是：</h2>\n<ol>\n<li><code>public</code> ：公共的，可以被任何代码访问。</li>\n<li><code>protected internal</code> ：受保护的内部的，可以被同一程序集中的代码和派生类中的代码访问。</li>\n<li><code>internal</code> ：内部的，可以被同一程序集中的代码访问。</li>\n<li><code>protected</code> ：受保护的，可以被派生类中的代码和同一程序集中的代码访问。</li>\n<li><code>private</code> ：私有的，只能被同一类中的代码访问。</li>\n</ol>\n<p>访问等级可以帮助您控制代码的可访问性，从而提高代码的安全性和可维护性。例如，将某些成员设置为 <code>private</code>  可以防止其他代码意外地修改它们，从而提高代码的安全性。将某些成员设置为 <code>public</code>  可以使其他代码更容易地使用它们，从而提高代码的可维护性。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%BA%BF%E6%80%A7%EF%BC%89/",
            "title": "c#/条件语句（线性）",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<pre><code class=\"language-C#\">    void Func1()\n\n    &#123;\n\n        int value1=15;\n\n        if(value1&gt;5)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 5&quot;);//value1满足了第一个条件就执行了，输出语句\n\n        &#125;\n\n        else if(value1&gt;10)\n\n        &#123;\n\n            Debug.Log(&quot;value1 is greater than 10&quot;);//由于第一个已经执行了，就终端这一串条件语句，所以虽然满足条件但没有执行\n\n        &#125;\n\n        else\n\n        &#123;\n\n            Debug.Log(&quot;value1 is less than 5&quot;);\n\n        &#125;\n\n    &#125;\n\n&#125;\n</code></pre>\n<h1 id=\"条件检测是线性的只要满足前面的就不会执行后面的\"><a class=\"markdownIt-Anchor\" href=\"#条件检测是线性的只要满足前面的就不会执行后面的\">#</a> 条件检测是线性的，只要满足前面的就不会执行后面的</h1>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/this%20%E5%92%8C%20base%20%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "c#/this 和 base 的区别",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<h2 id=\"this和base都是c中的关键字它们的主要区别在于\"><a class=\"markdownIt-Anchor\" href=\"#this和base都是c中的关键字它们的主要区别在于\">#</a>  <code>this</code>  和 <code>base</code>  都是 C# 中的关键字，它们的主要区别在于：</h2>\n<ol>\n<li><code>this</code>  关键字用于引用当前对象，可以用来访问当前对象的成员变量、成员方法和构造函数等。 <code>this</code>  关键字可以用于区分局部变量和成员变量、调用其他构造函数、实现链式调用等场景。</li>\n<li><code>base</code>  关键字用于引用基类对象，可以用来访问基类的成员变量、成员方法和构造函数等。 <code>base</code>  关键字可以用于在派生类中调用基类的构造函数、访问基类中被隐藏的成员等场景。</li>\n</ol>\n<p>以下是一个示例，演示了如何使用 <code>this</code>  和 <code>base</code>  关键字：</p>\n<pre><code class=\"language-C#\">class Person\n\n&#123;\n\n    public string Name &#123; get; set; &#125;\n\n    public int Age &#123; get; set; &#125;\n\n    public Person(string name, int age)\n\n    &#123;\n\n        this.Name = name;\n\n        this.Age = age;\n\n    &#125;\n\n&#125;\n\nclass Student : Person\n\n&#123;\n\n    public string School &#123; get; set; &#125;\n\n    public Student(string name, int age, string school) : base(name, age)\n\n    &#123;\n\n        this.School = school;\n\n    &#125;\n\n    public void Study()\n\n    &#123;\n\n        Console.WriteLine(&quot;&#123;0&#125; is studying at &#123;1&#125;.&quot;, this.Name, this.School);\n\n    &#125;\n\n    public void ShowInfo()\n\n    &#123;\n\n        Console.WriteLine(&quot;Name: &#123;0&#125;, Age: &#123;1&#125;, School: &#123;2&#125;&quot;, this.Name, this.Age, this.School);\n\n    &#125;\n\n&#125;\n\n// 使用示例\n\nStudent student = new Student(&quot;Tom&quot;, 18, &quot;ABC School&quot;);\n\nstudent.Study(); // 输出：Tom is studying at ABC School.\n\nstudent.ShowInfo(); // 输出：Name: Tom, Age: 18, School: ABC School\n</code></pre>\n<p>在这个示例中，我们定义了一个 <code>Person</code>  类和一个 <code>Student</code>  类， <code>Student</code>  类继承自 <code>Person</code>  类。在 <code>Person</code>  类中，我们定义了一个构造函数，使用 <code>this</code>  关键字来引用当前对象的成员变量。在 <code>Student</code>  类中，我们定义了一个构造函数，使用 <code>base</code>  关键字来调用基类的构造函数。在 <code>Student</code>  类中，我们还定义了两个方法 <code>Study</code>  和 <code>ShowInfo</code> ，分别使用 <code>this</code>  关键字和 <code>base</code>  关键字来访问当前对象和基类对象的成员变量。在使用示例中，我们创建了一个 <code>Student</code>  对象，并调用了它的 <code>Study</code>  和 <code>ShowInfo</code>  方法，输出了相应的信息。</p>\n<p>总的来说， <code>this</code>  关键字用于引用当前对象， <code>base</code>  关键字用于引用基类对象。它们的应用场景不同， <code>this</code>  关键字通常用于访问当前对象的成员， <code>base</code>  关键字通常用于在派生类中调用基类的构造函数或访问基类中被隐藏的成员。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Unity%E5%BC%95%E6%93%8E/public%E5%8F%98%E9%87%8F%E7%9A%84%E8%B5%8B%E5%80%BC/",
            "title": "c#/public变量的赋值",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<p>如果在 Unity 引擎中的对象中挂在的脚本里。<br>\n有 public 访问修饰符。会在脚本模块下看到这个变量，并进行赋值。<br>\n这个赋值的优先级很高，会覆盖掉脚本代码之中初始化定义的赋值。</p>\n<pre><code class=\"language-C#\">    public enum emAction\n\n    &#123;\n\n        None=0,\n\n        GetUp,//1\n\n        Wash,//2\n\n        Eat,//3\n\n        Work,//4\n\n    &#125;\n\n    public emAction mAction = emAction.Work;\n    Debug.Log((int)mAction);\n</code></pre>\n<p>我们对 <code>mAction</code>  的初始划定义是 Work，照理来说的应该在终端打印出 4，但实际上。<br>\n<img data-src=\"https://cenyi-picture-1317709115.cos.ap-shanghai.myqcloud.com/picture/202306230139957.png\" alt=\"Pasted image 20230616154518.png\"></p>\n<p>如果我们在脚本的选项中，选择了 mAction 的<mark>初值</mark>，那么这个值将覆盖脚本代码中的<mark>初始值</mark>（注意，只是初始值）。</p>\n<p>上面那个举得实例中，我们在 Unity 选择了 None 覆盖了我们初始化定义 <code>mAction</code>  所附的 Work。所以打印出来的还是 None 的 0。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%B0%81%E8%A3%85/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E5%B0%81%E8%A3%85/",
            "title": "c#/封装",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<h2 id=\"封装的主要目的\"><a class=\"markdownIt-Anchor\" href=\"#封装的主要目的\">#</a> 封装的主要目的</h2>\n<p>封装的主要目的是将数据和行为组合在一个单元中，并对外部隐藏数据的实现细节，只暴露必要的接口供外部访问。这样可以提高代码的可维护性、可重用性和安全性。</p>\n<p>封装可以防止外部代码直接访问和修改对象的内部状态，从而避免了意外的数据修改和错误的数据访问。同时，封装还可以隐藏对象的实现细节，使得对象的实现可以自由地修改，而不会影响到外部代码的使用。</p>\n<p>在面向对象编程中，封装是三大特性之一，另外两个是继承和多态。封装是面向对象编程的基础，它可以使得代码更加模块化、可维护性更高、可重用性更好，从而提高代码的质量和效率。</p>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        },
        {
            "id": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://imcenyi.github.io/2023/06/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Csharp/Class%E7%B1%BB/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%88abstruct%EF%BC%89%E5%92%8C%E8%99%9A%E6%96%B9%E6%B3%95(virtual)%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "c#/抽象方法（abstruct）和虚方法(virtual)的区别",
            "date_published": "2023-06-22T16:39:59.000Z",
            "content_html": "<p><mark>实际上虚函数就类似于初省值</mark></p>\n<h3 id=\"抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现\"><a class=\"markdownIt-Anchor\" href=\"#抽象函数只能定义在抽象类中并且不能在基类中写入方法体只能写在子类实现\">#</a> <mark>抽象函数只能定义在抽象类中，并且不能在基类中写入方法体，只能写在子类实现</mark></h3>\n<p>抽象方法和虚函数都是面向对象编程中的重要概念，它们都可以在基类中声明，然后在派生类中进行实现。它们的主要区别在于：</p>\n<ol>\n<li>抽象方法必须在派生类中进行实现，而虚函数可以选择在派生类中进行重写。</li>\n<li>抽象方法没有实现，只有方法签名，而虚函数有默认的实现 ==（必须）==，可以在基类中提供。</li>\n<li>抽象方法只能在抽象类中声明，而虚函数可以在普通的类中声明。</li>\n</ol>\n<p>下面是一个示例，演示了如何在抽象类中声明抽象方法和在普通类中声明虚函数：</p>\n<pre><code class=\"language-C#\">abstract class Shape\n\n&#123;\n\n    public abstract double GetArea();//这里的方法体必须是空\n\n&#125;\n\nclass Rectangle : Shape\n\n&#123;\n\n    public double Width &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()//子类写入方法体实现\n\n    &#123;\n\n        return Width * Height;\n\n    &#125;\n\n&#125;\nclass Circle : Shape\n\n&#123;\n\n    public double Radius &#123; get; set; &#125;\n\n    public override double GetArea(）\n\n    &#123;\n\n        return Math.PI * Radius * Radius;\n\n    &#125;\n\n&#125;\n\nclass Square : Shape\n\n&#123;\n\n    public double Side &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return Side * Side;\n\n    &#125;\n\n&#125;\n\nclass Triangle : Shape\n\n&#123;\n\n    public double Base &#123; get; set; &#125;\n\n    public double Height &#123; get; set; &#125;\n\n    public override double GetArea()\n\n    &#123;\n\n        return 0.5 * Base * Height;\n\n    &#125;\n\n&#125;\n\n// 使用示例\n\nShape shape1 = new Rectangle &#123; Width = 10, Height = 20 &#125;;\n\nShape shape2 = new Circle &#123; Radius = 5 &#125;;\n\nShape shape3 = new Square &#123; Side = 10 &#125;;\n\nShape shape4 = new Triangle &#123; Base = 10, Height = 5 &#125;;\n\nConsole.WriteLine(shape1.GetArea()); // 输出：200\n\nConsole.WriteLine(shape2.GetArea()); // 输出：78.53981633974483\n\nConsole.WriteLine(shape3.GetArea()); // 输出：100\n\nConsole.WriteLine(shape4.GetArea()); // 输出：25\n</code></pre>\n<p>在这个示例中，我们定义了一个抽象类 <code>Shape</code>  和四个子类 <code>Rectangle</code> 、 <code>Circle</code> 、 <code>Square</code>  和 <code>Triangle</code> ，它们都重写了 <code>GetArea</code>  方法。 <code>GetArea</code>  方法是一个抽象方法，必须在子类中实现。在使用示例中，我们创建了四个不同的形状对象，并分别调用它们的 <code>GetArea</code>  方法，输出了它们的面积。</p>\n<p><code>abstract</code>  和 <code>virtual</code>  都是 C# 中用于实现多态的关键字，它们的主要区别在于：</p>\n<ol>\n<li><code>abstract</code>  用于声明抽象方法，它必须在派生类中进行实现，而 <code>virtual</code>  用于声明虚方法，它可以在派生类中进行重写，但不是必须的。</li>\n<li><code>abstract</code>  方法没有实现，只有方法签名，而 <code>virtual</code>  方法有默认的实现，可以在基类中提供。</li>\n<li><code>abstract</code>  方法只能在抽象类中声明，而 <code>virtual</code>  方法可以在普通的类中声明。</li>\n</ol>\n",
            "tags": [
                "语言学习",
                "笔记",
                "C#"
            ]
        }
    ]
}